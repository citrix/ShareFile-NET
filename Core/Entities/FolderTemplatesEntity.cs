// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2015 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using ShareFile.Api.Models;
using ShareFile.Api.Client;
using ShareFile.Api.Client.Requests;
using ShareFile.Api.Client.Extensions;

namespace ShareFile.Api.Client.Entities
{
    public interface IFolderTemplatesEntity : IEntityBase
    {
        
        /// <summary>
        /// Get Folder Templates for Current Account
        /// </summary>
        /// <remarks>
        /// Returns all folder templates for the current account.
        /// </remarks>
        /// <returns>
        /// Folder templates for current account
        /// </returns>
        IQuery<ODataFeed<FolderTemplate>> Get();
        IQuery<FolderTemplate> Get(Uri url);
        
        /// <summary>
        /// Create Folder Template
        /// </summary>
        /// <example>
        /// {
        /// "Name": "Client Folder",
        /// "Description": "For all client folders created in 2014 or after"
        /// "Items": [
        /// {
        /// "Name": "Folder 1",
        /// "Items": [
        /// {
        /// "Name": "Subfolder1"
        /// }
        /// ]
        /// },
        /// {
        /// "Name": "Folder 2"
        /// }
        /// ]
        /// </example>
        /// <remarks>
        /// Creates a new folder template.
        /// </remarks>
        /// <returns>
        /// The created folder template
        /// </returns>
        IQuery<FolderTemplate> Create(FolderTemplate template);
        
        /// <summary>
        /// Update Folder Template
        /// </summary>
        /// <example>
        /// {
        /// "Name": "Client Folder",
        /// "Description": "For all client folders created in 2014 or after",
        /// "Items": [
        /// {
        /// "Name": "A new folder",
        /// "Items": [
        /// {
        /// "TemplateId": "ft-12345-abdef-abdef-12345-abdef",
        /// "Name": "A new subfolder"
        /// }
        /// ]
        /// },
        /// {
        /// "Id": "fti-xxxxx-xxxxx-xxxxx-xxxxx",
        /// "Name": "An existing folder with a different name"
        /// }
        /// ]
        /// }
        /// </example>
        /// <remarks>
        /// Updates an existing folder template
        /// </remarks>
        /// <returns>
        /// The updated folder template
        /// </returns>
        IQuery<FolderTemplate> Update(FolderTemplate template);
        
        /// <summary>
        /// Delete Folder Template
        /// </summary>
        /// <remarks>
        /// Removes a folder template
        /// </remarks>
        /// <param name="url"></param>
        IQuery Delete(Uri url);
    }

    public class FolderTemplatesEntity : EntityBase, IFolderTemplatesEntity
    {
        public FolderTemplatesEntity (IShareFileClient client)
            : base (client, "FolderTemplates")
        { }
        
        
        /// <summary>
        /// Get Folder Templates for Current Account
        /// </summary>
        /// <remarks>
        /// Returns all folder templates for the current account.
        /// </remarks>
        /// <returns>
        /// Folder templates for current account
        /// </returns>
        public IQuery<ODataFeed<FolderTemplate>> Get()
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<ODataFeed<FolderTemplate>>(Client);
		    sfApiQuery.From("FolderTemplates");
            sfApiQuery.HttpMethod = "GET";	
		    return sfApiQuery;
        }
        public IQuery<FolderTemplate> Get(Uri url)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<FolderTemplate>(Client);
            sfApiQuery.Uri(url);
            sfApiQuery.HttpMethod = "GET";	
		    return sfApiQuery;
        }
        
        /// <summary>
        /// Create Folder Template
        /// </summary>
        /// <example>
        /// {
        /// "Name": "Client Folder",
        /// "Description": "For all client folders created in 2014 or after"
        /// "Items": [
        /// {
        /// "Name": "Folder 1",
        /// "Items": [
        /// {
        /// "Name": "Subfolder1"
        /// }
        /// ]
        /// },
        /// {
        /// "Name": "Folder 2"
        /// }
        /// ]
        /// </example>
        /// <remarks>
        /// Creates a new folder template.
        /// </remarks>
        /// <returns>
        /// The created folder template
        /// </returns>
        public IQuery<FolderTemplate> Create(FolderTemplate template)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<FolderTemplate>(Client);
		    sfApiQuery.From("FolderTemplates");
            sfApiQuery.Body = template;
            sfApiQuery.HttpMethod = "POST";	
		    return sfApiQuery;
        }
        
        /// <summary>
        /// Update Folder Template
        /// </summary>
        /// <example>
        /// {
        /// "Name": "Client Folder",
        /// "Description": "For all client folders created in 2014 or after",
        /// "Items": [
        /// {
        /// "Name": "A new folder",
        /// "Items": [
        /// {
        /// "TemplateId": "ft-12345-abdef-abdef-12345-abdef",
        /// "Name": "A new subfolder"
        /// }
        /// ]
        /// },
        /// {
        /// "Id": "fti-xxxxx-xxxxx-xxxxx-xxxxx",
        /// "Name": "An existing folder with a different name"
        /// }
        /// ]
        /// }
        /// </example>
        /// <remarks>
        /// Updates an existing folder template
        /// </remarks>
        /// <returns>
        /// The updated folder template
        /// </returns>
        public IQuery<FolderTemplate> Update(FolderTemplate template)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<FolderTemplate>(Client);
		    sfApiQuery.From("FolderTemplates");
            sfApiQuery.Body = template;
            sfApiQuery.HttpMethod = "PATCH";	
		    return sfApiQuery;
        }
        
        /// <summary>
        /// Delete Folder Template
        /// </summary>
        /// <remarks>
        /// Removes a folder template
        /// </remarks>
        /// <param name="url"></param>
        public IQuery Delete(Uri url)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query(Client);
            sfApiQuery.Uri(url);
            sfApiQuery.HttpMethod = "DELETE";	
		    return sfApiQuery;
        }
    }
}