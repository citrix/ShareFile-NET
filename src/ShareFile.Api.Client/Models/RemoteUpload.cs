// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2018 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Net;

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using ShareFile.Api.Client.Extensions;
using ShareFile.Api.Client.Exceptions;

namespace ShareFile.Api.Client.Models 
{
	/// <summary>
	/// This class represents Users and the Options like IsPublic, RequireUserInfo and SelectRecipient in a Remote Upload.
	/// </summary>
	public class RemoteUpload : ODataObject 
	{
		/// <summary>
		/// The Name of this Remote Upload.
		/// </summary>
		public string Name { get; set; }
		/// <summary>
		/// Uri to access the Remote Upload through the Web portal
		/// </summary>
		public string Uri { get; set; }
		/// <summary>
		/// Indicates whether the Remote Upload is public or not.
		/// One File Drop on your account can be marked as public, meaning that it is accessible from the short link https://example.sharefile.com/filedrop.
		/// Any additional File Drops on your account can be linked to on your web site using the link at the top of this page
		/// </summary>
		public bool? IsPublic { get; set; }
		/// <summary>
		/// Indicates whether the Remote Upload requires user information ( first name, last name, email , company).
		/// </summary>
		public bool? RequireUserInfo { get; set; }
		/// <summary>
		/// When it's true, visitors of this Remote Upload can select a recipient from a list.
		/// </summary>
		public bool? SelectRecipient { get; set; }
		/// <summary>
		/// Users who can have access to this Remote Upload.
		/// </summary>
		public IEnumerable<Contact> Users { get; set; }

		public override void Copy(ODataObject source, JsonSerializer serializer)
		{
			if(source == null || serializer == null) return;
			base.Copy(source, serializer);

			var typedSource = source as RemoteUpload;
			if(typedSource != null)
			{
				Name = typedSource.Name;
				Uri = typedSource.Uri;
				IsPublic = typedSource.IsPublic;
				RequireUserInfo = typedSource.RequireUserInfo;
				SelectRecipient = typedSource.SelectRecipient;
				Users = typedSource.Users;
			}
			else
			{
				JToken token;
				if(source.TryGetProperty("Name", out token) && token.Type != JTokenType.Null)
				{
					Name = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("Uri", out token) && token.Type != JTokenType.Null)
				{
					Uri = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("IsPublic", out token) && token.Type != JTokenType.Null)
				{
					IsPublic = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("RequireUserInfo", out token) && token.Type != JTokenType.Null)
				{
					RequireUserInfo = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("SelectRecipient", out token) && token.Type != JTokenType.Null)
				{
					SelectRecipient = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("Users", out token) && token.Type != JTokenType.Null)
				{
					Users = (IEnumerable<Contact>)serializer.Deserialize(token.CreateReader(), typeof(IEnumerable<Contact>));
				}
			}
		}
	}
}