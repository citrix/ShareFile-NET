// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2015 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using ShareFile.Api.Client.Extensions;

namespace ShareFile.Api.Models 
{
#if ShareFile
	public class UsagePlanAddOn : ODataObject 
	{

		public string TypeCode { get; set; }

		public string Code { get; set; }

		public SafeEnum<LimitingFactor> LimitingFactor { get; set; }

		public int LowerLimit { get; set; }

		public int UpperLimit { get; set; }

		public SafeEnum<AddonField> Field { get; set; }

		public int Interval { get; set; }

		public decimal Price { get; set; }

		public decimal MonthlyPrice { get; set; }

		public decimal QuarterlyPrice { get; set; }

		public decimal YearlyPrice { get; set; }

		public override void Copy(ODataObject source, JsonSerializer serializer)
		{
			if(source == null || serializer == null) return;
			base.Copy(source, serializer);

			var typedSource = source as UsagePlanAddOn;
			if(typedSource != null)
			{
				TypeCode = typedSource.TypeCode;
				Code = typedSource.Code;
				LimitingFactor = typedSource.LimitingFactor;
				LowerLimit = typedSource.LowerLimit;
				UpperLimit = typedSource.UpperLimit;
				Field = typedSource.Field;
				Interval = typedSource.Interval;
				Price = typedSource.Price;
				MonthlyPrice = typedSource.MonthlyPrice;
				QuarterlyPrice = typedSource.QuarterlyPrice;
				YearlyPrice = typedSource.YearlyPrice;
			}
			else
			{
				JToken token;
				if(source.TryGetProperty("TypeCode", out token) && token.Type != JTokenType.Null)
				{
					TypeCode = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("Code", out token) && token.Type != JTokenType.Null)
				{
					Code = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("LimitingFactor", out token) && token.Type != JTokenType.Null)
				{
					LimitingFactor = (SafeEnum<LimitingFactor>)serializer.Deserialize(token.CreateReader(), typeof(SafeEnum<LimitingFactor>));
				}
				if(source.TryGetProperty("LowerLimit", out token) && token.Type != JTokenType.Null)
				{
					LowerLimit = (int)serializer.Deserialize(token.CreateReader(), typeof(int));
				}
				if(source.TryGetProperty("UpperLimit", out token) && token.Type != JTokenType.Null)
				{
					UpperLimit = (int)serializer.Deserialize(token.CreateReader(), typeof(int));
				}
				if(source.TryGetProperty("Field", out token) && token.Type != JTokenType.Null)
				{
					Field = (SafeEnum<AddonField>)serializer.Deserialize(token.CreateReader(), typeof(SafeEnum<AddonField>));
				}
				if(source.TryGetProperty("Interval", out token) && token.Type != JTokenType.Null)
				{
					Interval = (int)serializer.Deserialize(token.CreateReader(), typeof(int));
				}
				if(source.TryGetProperty("Price", out token) && token.Type != JTokenType.Null)
				{
					Price = (decimal)serializer.Deserialize(token.CreateReader(), typeof(decimal));
				}
				if(source.TryGetProperty("MonthlyPrice", out token) && token.Type != JTokenType.Null)
				{
					MonthlyPrice = (decimal)serializer.Deserialize(token.CreateReader(), typeof(decimal));
				}
				if(source.TryGetProperty("QuarterlyPrice", out token) && token.Type != JTokenType.Null)
				{
					QuarterlyPrice = (decimal)serializer.Deserialize(token.CreateReader(), typeof(decimal));
				}
				if(source.TryGetProperty("YearlyPrice", out token) && token.Type != JTokenType.Null)
				{
					YearlyPrice = (decimal)serializer.Deserialize(token.CreateReader(), typeof(decimal));
				}
			}
		}
	}
#endif
}