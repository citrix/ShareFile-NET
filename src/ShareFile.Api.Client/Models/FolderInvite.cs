// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2018 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Net;

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using ShareFile.Api.Client.Extensions;
using ShareFile.Api.Client.Exceptions;

namespace ShareFile.Api.Client.Models 
{
	/// <summary>
	/// This class represents options available in a Folder Invite such as whether the recipient can download, upload, view and get notifications etc.
	/// </summary>
	public class FolderInvite : ODataObject 
	{
		/// <summary>
		/// Title of the folder invite
		/// </summary>
		public string Title { get; set; }
		/// <summary>
		/// Short description for the folder invite
		/// </summary>
		public string Description { get; set; }
		/// <summary>
		/// Date when the folder invititation was created.
		/// </summary>
		public DateTime? CreationDate { get; set; }
		/// <summary>
		/// Expiration date of the folder invite.
		/// </summary>
		public DateTime? ExpirationDate { get; set; }
		/// <summary>
		/// Unique identifier for the Creator of the folder invite.
		/// </summary>
		public string CreatorId { get; set; }
		/// <summary>
		/// Short version of items creator's name. E.g., J. Doe.
		/// </summary>
		public string CreatorNameShort { get; set; }
		/// <summary>
		/// AccountId of the folder invite.
		/// </summary>
		public string AccountId { get; set; }
		/// <summary>
		/// Maxixmum registrations allowed for the folder invite.
		/// </summary>
		public int? MaxRegistrations { get; set; }
		/// <summary>
		/// Total registrations on the the folder invite.
		/// </summary>
		public int? TotalRegistrations { get; set; }
		/// <summary>
		/// Notify the creator when a user registers for the folder.
		/// </summary>
		public bool? NotifyCreatorOnRegistration { get; set; }
		/// <summary>
		/// Unique identifier of the folder whose invite has been created or edited
		/// </summary>
		public string FolderId { get; set; }
		/// <summary>
		/// Indicates whether the recipient of the invite can download files from the folder.
		/// </summary>
		public bool? CanDownload { get; set; }
		/// <summary>
		/// Indicates whether the recipient of the invite can view files of the folder.
		/// </summary>
		public bool? CanView { get; set; }
		/// <summary>
		/// Indicates whether the recipient of the invite can upload files to the folder.
		/// </summary>
		public bool? CanUpload { get; set; }
		/// <summary>
		/// Indicates whether the recipient of the invite can delete files from the folder.
		/// </summary>
		public bool? CanDelete { get; set; }
		/// <summary>
		/// Indicates whether the recipient of the invite can get notified when uploding files to the folder.
		/// </summary>
		public bool? NotifyOnUpload { get; set; }
		/// <summary>
		/// Indicates whether the recipient of the invite can get notified when downloading files from the folder.
		/// </summary>
		public bool? NotifyOnDownload { get; set; }
		/// <summary>
		/// Url that redirects the user to registration page.
		/// </summary>
		public string InviteUrl { get; set; }
		/// <summary>
		/// User exists.
		/// </summary>
		public bool? IsExistingUser { get; set; }
		/// <summary>
		/// User exists and already confirmed.
		/// </summary>
		public bool? IsConfirmed { get; set; }
		/// <summary>
		/// Has exceeded Maximum failed attempts.
		/// </summary>
		public bool? HasExceededMaxFailedAttempts { get; set; }

		public override void Copy(ODataObject source, JsonSerializer serializer)
		{
			if(source == null || serializer == null) return;
			base.Copy(source, serializer);

			var typedSource = source as FolderInvite;
			if(typedSource != null)
			{
				Title = typedSource.Title;
				Description = typedSource.Description;
				CreationDate = typedSource.CreationDate;
				ExpirationDate = typedSource.ExpirationDate;
				CreatorId = typedSource.CreatorId;
				CreatorNameShort = typedSource.CreatorNameShort;
				AccountId = typedSource.AccountId;
				MaxRegistrations = typedSource.MaxRegistrations;
				TotalRegistrations = typedSource.TotalRegistrations;
				NotifyCreatorOnRegistration = typedSource.NotifyCreatorOnRegistration;
				FolderId = typedSource.FolderId;
				CanDownload = typedSource.CanDownload;
				CanView = typedSource.CanView;
				CanUpload = typedSource.CanUpload;
				CanDelete = typedSource.CanDelete;
				NotifyOnUpload = typedSource.NotifyOnUpload;
				NotifyOnDownload = typedSource.NotifyOnDownload;
				InviteUrl = typedSource.InviteUrl;
				IsExistingUser = typedSource.IsExistingUser;
				IsConfirmed = typedSource.IsConfirmed;
				HasExceededMaxFailedAttempts = typedSource.HasExceededMaxFailedAttempts;
			}
			else
			{
				JToken token;
				if(source.TryGetProperty("Title", out token) && token.Type != JTokenType.Null)
				{
					Title = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("Description", out token) && token.Type != JTokenType.Null)
				{
					Description = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("CreationDate", out token) && token.Type != JTokenType.Null)
				{
					CreationDate = (DateTime?)serializer.Deserialize(token.CreateReader(), typeof(DateTime?));
				}
				if(source.TryGetProperty("ExpirationDate", out token) && token.Type != JTokenType.Null)
				{
					ExpirationDate = (DateTime?)serializer.Deserialize(token.CreateReader(), typeof(DateTime?));
				}
				if(source.TryGetProperty("CreatorId", out token) && token.Type != JTokenType.Null)
				{
					CreatorId = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("CreatorNameShort", out token) && token.Type != JTokenType.Null)
				{
					CreatorNameShort = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("AccountId", out token) && token.Type != JTokenType.Null)
				{
					AccountId = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("MaxRegistrations", out token) && token.Type != JTokenType.Null)
				{
					MaxRegistrations = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("TotalRegistrations", out token) && token.Type != JTokenType.Null)
				{
					TotalRegistrations = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("NotifyCreatorOnRegistration", out token) && token.Type != JTokenType.Null)
				{
					NotifyCreatorOnRegistration = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("FolderId", out token) && token.Type != JTokenType.Null)
				{
					FolderId = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("CanDownload", out token) && token.Type != JTokenType.Null)
				{
					CanDownload = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("CanView", out token) && token.Type != JTokenType.Null)
				{
					CanView = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("CanUpload", out token) && token.Type != JTokenType.Null)
				{
					CanUpload = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("CanDelete", out token) && token.Type != JTokenType.Null)
				{
					CanDelete = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("NotifyOnUpload", out token) && token.Type != JTokenType.Null)
				{
					NotifyOnUpload = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("NotifyOnDownload", out token) && token.Type != JTokenType.Null)
				{
					NotifyOnDownload = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("InviteUrl", out token) && token.Type != JTokenType.Null)
				{
					InviteUrl = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("IsExistingUser", out token) && token.Type != JTokenType.Null)
				{
					IsExistingUser = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("IsConfirmed", out token) && token.Type != JTokenType.Null)
				{
					IsConfirmed = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("HasExceededMaxFailedAttempts", out token) && token.Type != JTokenType.Null)
				{
					HasExceededMaxFailedAttempts = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
			}
		}
	}
}