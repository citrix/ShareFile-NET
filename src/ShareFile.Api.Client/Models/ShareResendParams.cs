// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2018 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Net;

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using ShareFile.Api.Client.Extensions;
using ShareFile.Api.Client.Exceptions;

namespace ShareFile.Api.Client.Models 
{
	/// <summary>
	/// Parameters used to re-send an existing share
	/// </summary>
	public class ShareResendParams : ODataObject 
	{
		/// <summary>
		/// The ID of the existing share
		/// </summary>
		public string ShareId { get; set; }
		/// <summary>
		/// These can be email addresses or group IDs
		/// </summary>
		public IEnumerable<string> Recipients { get; set; }
		public string Subject { get; set; }
		/// <summary>
		/// Message included in the share notification
		/// </summary>
		public string Body { get; set; }
		/// <summary>
		/// Send a copy of the notification to the cender
		/// </summary>
		public bool CcSender { get; set; }
		public bool NotifyOnUse { get; set; }

		public override void Copy(ODataObject source, JsonSerializer serializer)
		{
			if(source == null || serializer == null) return;
			base.Copy(source, serializer);

			var typedSource = source as ShareResendParams;
			if(typedSource != null)
			{
				ShareId = typedSource.ShareId;
				Recipients = typedSource.Recipients;
				Subject = typedSource.Subject;
				Body = typedSource.Body;
				CcSender = typedSource.CcSender;
				NotifyOnUse = typedSource.NotifyOnUse;
			}
			else
			{
				JToken token;
				if(source.TryGetProperty("ShareId", out token) && token.Type != JTokenType.Null)
				{
					ShareId = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("Recipients", out token) && token.Type != JTokenType.Null)
				{
					Recipients = (IEnumerable<string>)serializer.Deserialize(token.CreateReader(), typeof(IEnumerable<string>));
				}
				if(source.TryGetProperty("Subject", out token) && token.Type != JTokenType.Null)
				{
					Subject = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("Body", out token) && token.Type != JTokenType.Null)
				{
					Body = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("CcSender", out token) && token.Type != JTokenType.Null)
				{
					CcSender = (bool)serializer.Deserialize(token.CreateReader(), typeof(bool));
				}
				if(source.TryGetProperty("NotifyOnUse", out token) && token.Type != JTokenType.Null)
				{
					NotifyOnUse = (bool)serializer.Deserialize(token.CreateReader(), typeof(bool));
				}
			}
		}
	}
}