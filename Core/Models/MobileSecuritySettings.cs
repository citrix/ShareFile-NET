// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2015 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using ShareFile.Api.Client.Extensions;

namespace ShareFile.Api.Models 
{
	public class MobileSecuritySettings : ODataObject 
	{

		public int PoisonPillInterval { get; set; }

		public bool? EnableOpenExternal { get; set; }

		public bool? EnableOfflineCache { get; set; }

		public bool? EnableAutoLogin { get; set; }

		public bool? RestrictModifiedDevices { get; set; }

		public SafeEnum<PinLockType> PinLockType { get; set; }

		public int? PinLockMaxAttempts { get; set; }

		public int? PinLockLockoutIntervalSeconds { get; set; }

		public int? PinLockExternalActionGraceIntervalSeconds { get; set; }

		public int? PinLockInternalActionGraceIntervalSeconds { get; set; }

		public override void Copy(ODataObject source, JsonSerializer serializer)
		{
			if(source == null || serializer == null) return;
			base.Copy(source, serializer);

			var typedSource = source as MobileSecuritySettings;
			if(typedSource != null)
			{
				PoisonPillInterval = typedSource.PoisonPillInterval;
				EnableOpenExternal = typedSource.EnableOpenExternal;
				EnableOfflineCache = typedSource.EnableOfflineCache;
				EnableAutoLogin = typedSource.EnableAutoLogin;
				RestrictModifiedDevices = typedSource.RestrictModifiedDevices;
				PinLockType = typedSource.PinLockType;
				PinLockMaxAttempts = typedSource.PinLockMaxAttempts;
				PinLockLockoutIntervalSeconds = typedSource.PinLockLockoutIntervalSeconds;
				PinLockExternalActionGraceIntervalSeconds = typedSource.PinLockExternalActionGraceIntervalSeconds;
				PinLockInternalActionGraceIntervalSeconds = typedSource.PinLockInternalActionGraceIntervalSeconds;
			}
			else
			{
				JToken token;
				if(source.TryGetProperty("PoisonPillInterval", out token) && token.Type != JTokenType.Null)
				{
					PoisonPillInterval = (int)serializer.Deserialize(token.CreateReader(), typeof(int));
				}
				if(source.TryGetProperty("EnableOpenExternal", out token) && token.Type != JTokenType.Null)
				{
					EnableOpenExternal = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableOfflineCache", out token) && token.Type != JTokenType.Null)
				{
					EnableOfflineCache = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableAutoLogin", out token) && token.Type != JTokenType.Null)
				{
					EnableAutoLogin = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("RestrictModifiedDevices", out token) && token.Type != JTokenType.Null)
				{
					RestrictModifiedDevices = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("PinLockType", out token) && token.Type != JTokenType.Null)
				{
					PinLockType = (SafeEnum<PinLockType>)serializer.Deserialize(token.CreateReader(), typeof(SafeEnum<PinLockType>));
				}
				if(source.TryGetProperty("PinLockMaxAttempts", out token) && token.Type != JTokenType.Null)
				{
					PinLockMaxAttempts = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("PinLockLockoutIntervalSeconds", out token) && token.Type != JTokenType.Null)
				{
					PinLockLockoutIntervalSeconds = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("PinLockExternalActionGraceIntervalSeconds", out token) && token.Type != JTokenType.Null)
				{
					PinLockExternalActionGraceIntervalSeconds = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("PinLockInternalActionGraceIntervalSeconds", out token) && token.Type != JTokenType.Null)
				{
					PinLockInternalActionGraceIntervalSeconds = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
			}
		}
	}
}