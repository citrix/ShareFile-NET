// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2015 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Net;

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using ShareFile.Api.Client.Extensions;
using ShareFile.Api.Client.Exceptions;

namespace ShareFile.Api.Models 
{
	public class FileLock : ODataObject 
	{

		public string LockId { get; set; }

		public SafeEnum<LockType> LockType { get; set; }

		public Principal Owner { get; set; }

		public int? ExpirationTimeInMinutes { get; set; }

		public override void Copy(ODataObject source, JsonSerializer serializer)
		{
			if(source == null || serializer == null) return;
			base.Copy(source, serializer);

			var typedSource = source as FileLock;
			if(typedSource != null)
			{
				LockId = typedSource.LockId;
				LockType = typedSource.LockType;
				Owner = typedSource.Owner;
				ExpirationTimeInMinutes = typedSource.ExpirationTimeInMinutes;
			}
			else
			{
				JToken token;
				if(source.TryGetProperty("LockId", out token) && token.Type != JTokenType.Null)
				{
					LockId = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("LockType", out token) && token.Type != JTokenType.Null)
				{
					LockType = (SafeEnum<LockType>)serializer.Deserialize(token.CreateReader(), typeof(SafeEnum<LockType>));
				}
				if(source.TryGetProperty("Owner", out token) && token.Type != JTokenType.Null)
				{
					Owner = (Principal)serializer.Deserialize(token.CreateReader(), typeof(Principal));
				}
				if(source.TryGetProperty("ExpirationTimeInMinutes", out token) && token.Type != JTokenType.Null)
				{
					ExpirationTimeInMinutes = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
			}
		}
	}
}