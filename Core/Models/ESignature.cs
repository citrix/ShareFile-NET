// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2015 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Net;

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using ShareFile.Api.Client.Extensions;
using ShareFile.Api.Client.Exceptions;

namespace ShareFile.Api.Models 
{
	public class ESignature : ODataObject 
	{

		public string ID { get; set; }

		public string ItemID { get; set; }

		public string ReferenceID { get; set; }

		public string AlternateReferenceID { get; set; }

		public string SignedItemID { get; set; }

		public SafeEnum<IntegrationProvider> Provider { get; set; }

		public string UserID { get; set; }

		public SafeEnum<ESignatureDocumentStatus> Status { get; set; }

		public DateTime DateCreated { get; set; }

		public DateTime DateLastUpdated { get; set; }

		public string DocumentUrl { get; set; }

		public override void Copy(ODataObject source, JsonSerializer serializer)
		{
			if(source == null || serializer == null) return;
			base.Copy(source, serializer);

			var typedSource = source as ESignature;
			if(typedSource != null)
			{
				ID = typedSource.ID;
				ItemID = typedSource.ItemID;
				ReferenceID = typedSource.ReferenceID;
				AlternateReferenceID = typedSource.AlternateReferenceID;
				SignedItemID = typedSource.SignedItemID;
				Provider = typedSource.Provider;
				UserID = typedSource.UserID;
				Status = typedSource.Status;
				DateCreated = typedSource.DateCreated;
				DateLastUpdated = typedSource.DateLastUpdated;
				DocumentUrl = typedSource.DocumentUrl;
			}
			else
			{
				JToken token;
				if(source.TryGetProperty("ID", out token) && token.Type != JTokenType.Null)
				{
					ID = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("ItemID", out token) && token.Type != JTokenType.Null)
				{
					ItemID = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("ReferenceID", out token) && token.Type != JTokenType.Null)
				{
					ReferenceID = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("AlternateReferenceID", out token) && token.Type != JTokenType.Null)
				{
					AlternateReferenceID = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("SignedItemID", out token) && token.Type != JTokenType.Null)
				{
					SignedItemID = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("Provider", out token) && token.Type != JTokenType.Null)
				{
					Provider = (SafeEnum<IntegrationProvider>)serializer.Deserialize(token.CreateReader(), typeof(SafeEnum<IntegrationProvider>));
				}
				if(source.TryGetProperty("UserID", out token) && token.Type != JTokenType.Null)
				{
					UserID = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("Status", out token) && token.Type != JTokenType.Null)
				{
					Status = (SafeEnum<ESignatureDocumentStatus>)serializer.Deserialize(token.CreateReader(), typeof(SafeEnum<ESignatureDocumentStatus>));
				}
				if(source.TryGetProperty("DateCreated", out token) && token.Type != JTokenType.Null)
				{
					DateCreated = (DateTime)serializer.Deserialize(token.CreateReader(), typeof(DateTime));
				}
				if(source.TryGetProperty("DateLastUpdated", out token) && token.Type != JTokenType.Null)
				{
					DateLastUpdated = (DateTime)serializer.Deserialize(token.CreateReader(), typeof(DateTime));
				}
				if(source.TryGetProperty("DocumentUrl", out token) && token.Type != JTokenType.Null)
				{
					DocumentUrl = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
			}
		}
	}
}