// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2014 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using ShareFile.Api.Models;
using ShareFile.Api.Client;

namespace ShareFile.Api.Client
{
	public class UsersEntity : ODataEntityBase
	{
		/// <summary>
		/// Get User
		/// </summary>
		/// <remarks>
		/// Retrieve a single user, by ID or email, or the currently authenticated user.
		/// </remarks>
		/// <param name="id"></param>
		/// <param name="emailAddress"></param>
		/// <returns>
		/// the requested User object
		/// </returns>
		public IQuery<User> Get(string id = null, string emailAddress = null)
		{
			IQuery<User> query = new IQuery<User>(Client);
			query.From("Users");
			query.QueryString("id", id);
			query.QueryString("emailAddress", emailAddress);
			query.HttpMethod = "GET";
			return query;
		}

		/// <summary>
		/// Create Customer
		/// </summary>
		/// <example>
		/// {
		/// "Email":"user.one@domain.com",
		/// "FirstName":"Name",
		/// "LastName":"Last Name",
		/// "Company":"Company",
		/// "Password":"password",
		/// "Preferences":
		/// {
		/// "CanResetPassword":true,
		/// "CanViewMySettings":true
		/// },
		/// "DefaultZone":
		/// {
		/// "Id":"zoneid"
		/// }
		/// }
		/// </example>
		/// <remarks>
		/// The following parameters from the input object are used: Email, FirstName, LastName, Company,
		/// DefaultZone, Password, Preferences.CanResetPassword and Preferences.CanViewMySettingsOther parameters are ignored
		/// </remarks>
		/// <param name="user"></param>
		/// <param name="pushCreatorDefaultSettings"></param>
		/// <param name="addshared"></param>
		/// <param name="notify"></param>
		/// <param name="ifNecessary"></param>
		/// <returns>
		/// The new user
		/// </returns>
		public IQuery<User> Create(User user, bool pushCreatorDefaultSettings = false, bool addshared = false, bool notify = false, bool ifNecessary = false)
		{
			IQuery<User> query = new IQuery<User>(Client);
			query.From("Users");
			query.QueryString("pushCreatorDefaultSettings", pushCreatorDefaultSettings);
			query.QueryString("addshared", addshared);
			query.QueryString("notify", notify);
			query.QueryString("ifNecessary", ifNecessary);
			query.Body = user;
			query.HttpMethod = "POST";
			return query;
		}

		/// <summary>
		/// Create Employee
		/// </summary>
		/// <example>
		/// {
		/// "Email":"user.one@domain.com",
		/// "FirstName":"Name",
		/// "LastName":"Last Name",
		/// "Company":"Company",
		/// "Password":"password",
		/// "StorageQuotaLimitGB":50,
		/// "Preferences":
		/// {
		/// "CanResetPassword":true,
		/// "CanViewMySettings":true
		/// },
		/// "DefaultZone":
		/// {
		/// "Id":"zoneid"
		/// },
		/// "IsAdministrator": false,
		/// "CanCreateFolders": false,
		/// "CanUseFileBox": true,
		/// "CanManageUsers": false
		/// }
		/// </example>
		/// <remarks>
		/// Create a new Employee user (AccountUser)
		/// The following parameters from the input object are used: Email, FirstName, LastName, Company,
		/// DefaultZone, Password, IsEmployee, IsAdministrator, CanCreateFolders, CanUseFileBox, CanManageUsers,
		/// Preferences.CanResetPassword and Preferences.CanViewMySettings.
		/// Other parameters are ignoredStorageQuotaLimitGB parameter is optional. If not specified or equal to -1 the account default storage quota value will be set for the user.
		/// </remarks>
		/// <param name="user"></param>
		/// <param name="pushCreatorDefaultSettings"></param>
		/// <param name="addshared"></param>
		/// <param name="notify"></param>
		/// <param name="ifNecessary"></param>
		/// <returns>
		/// The new employee user
		/// </returns>
		public IQuery<User> CreateAccountUser(AccountUser user, bool pushCreatorDefaultSettings = false, bool addshared = false, bool notify = false, bool ifNecessary = false)
		{
			IQuery<User> query = new IQuery<User>(Client);
			query.From("Users");
			query.Action("AccountUser");
			query.QueryString("pushCreatorDefaultSettings", pushCreatorDefaultSettings);
			query.QueryString("addshared", addshared);
			query.QueryString("notify", notify);
			query.QueryString("ifNecessary", ifNecessary);
			query.Body = user;
			query.HttpMethod = "POST";
			return query;
		}

		/// <summary>
		/// Update User
		/// </summary>
		/// <example>
		/// {
		/// "FirstName":"FirstName",
		/// "LastName":"LastName",
		/// "Company":"Company",
		/// "Email":"user@domain.com",
		/// "Security":
		/// {
		/// "IsDisabled":false
		/// }
		/// "DefaultZone":
		/// {
		/// "Id":"newzoneid"
		/// }
		/// }
		/// </example>
		/// <remarks>
		/// Modifies an existing user object
		/// The following parameters can be modified through this call: FirstName, LastName, Company,
		/// Email, IsDisabled, DefaultZone Id
		/// </remarks>
		/// <param name="id"></param>
		/// <param name="user"></param>
		/// <returns>
		/// a modified user record
		/// </returns>
		public IQuery<User> Update(string id, User user)
		{
			IQuery<User> query = new IQuery<User>(Client);
			query.From("Users");
			query.Ids(id);
			query.Body = user;
			query.HttpMethod = "PATCH";
			return query;
		}

		/// <summary>
		/// Add Roles
		/// </summary>
		/// <example>
		/// {
		/// "Roles" : [ "CanManageUsers", "CanSelectFolderZone" ]
		/// }
		/// </example>
		/// <remarks>
		/// Modifies an existing user object to ADD a new role
		/// The following roles can be added to the user through this call (depending on User type):
		/// CanCreateFolders,
		/// CanSelectFolderZone,
		/// CanUseFileBox,
		/// CanManageUsers,
		/// AdminSharedAddressBook,
		/// CanChangePassword,
		/// CanManageMySettings
		/// </remarks>
		/// <param name="parentid"></param>
		/// <param name="user"></param>
		/// <returns>
		/// a modified user record
		/// </returns>
		public IQuery<User> UpdateRoles( id = , User user, string parentid)
		{
			IQuery<User> query = new IQuery<User>(Client);
			query.From("Users");
			query.Action("Roles");
			query.Ids(id);
			query.QueryString("parentid", parentid);
			query.Body = user;
			query.HttpMethod = "PATCH";
			return query;
		}

		/// <summary>
		/// Set Roles
		/// </summary>
		/// <example>
		/// {
		/// "Roles" : [ "CanManageUsers", "CanSelectFolderZone" ]
		/// }
		/// </example>
		/// <remarks>
		/// Sets the roles for a user (roles not provided will be disabled.)
		/// The following roles can be set to the user through this call (depending on User type):
		/// CanCreateFolders,
		/// CanSelectFolderZone,
		/// CanUseFileBox,
		/// CanManageUsers,
		/// AdminSharedAddressBook,
		/// CanChangePassword,
		/// CanManageMySettings
		/// </remarks>
		/// <param name="parentid"></param>
		/// <param name="user"></param>
		/// <returns>
		/// a modified user record
		/// </returns>
		public IQuery<User> UpdateRoles( id = , User user, string parentid)
		{
			IQuery<User> query = new IQuery<User>(Client);
			query.From("Users");
			query.Action("Roles");
			query.Ids(id);
			query.QueryString("parentid", parentid);
			query.Body = user;
			query.HttpMethod = "PUT";
			return query;
		}

		/// <summary>
		/// Update Employee or Promote Customer
		/// </summary>
		/// <example>
		/// {
		/// "FirstName":"FirstName",
		/// "LastName":"LastName",
		/// "Company":"Company",
		/// "Email":"user@domain.com",
		/// "StorageQuotaLimitGB":100,
		/// "Security":
		/// {
		/// "IsDisabled":false
		/// }
		/// "DefaultZone":
		/// {
		/// "Id":"newzoneid"
		/// }
		/// }
		/// </example>
		/// <remarks>
		/// Modifies an existing user object
		/// The following parameters can be modified through this call: FirstName, LastName, Company,
		/// Email, IsEmployee, IsDisabled, DefaultZone Id, StorageQuotaLimitGB.During a promotion (the user id points to Customer), the following parameters can be
		/// modified: CanCreateFolders, CanUseFileBox, CanManageUsers. StorageQuotaLimitGB equal to -1 sets the user quota to the account default storage quota value.
		/// </remarks>
		/// <param name="id"></param>
		/// <param name="user"></param>
		/// <returns>
		/// a modified user record
		/// </returns>
		public IQuery<User> UpdateAccountUser(string id, AccountUser user)
		{
			IQuery<User> query = new IQuery<User>(Client);
			query.From("Users");
			query.Action("AccountUser");
			query.ActionIds(id);
			query.Body = user;
			query.HttpMethod = "PATCH";
			return query;
		}

		/// <summary>
		/// Get HomeFolder
		/// </summary>
		/// <remarks>
		/// Returns a user's home folder
		/// </remarks>
		/// <param name="id"></param>
		/// <returns>
		/// A folder record representing the requesting user home folder
		/// </returns>
		public IQuery<Item> GetHomeFolder(string id)
		{
			IQuery<Item> query = new IQuery<Item>(Client);
			query.From("Users");
			query.Action("HomeFolder");
			query.Ids(id);
			query.HttpMethod = "GET";
			return query;
		}

		public IQuery<ODataFeed<Item>> TopFolders(string userId)
		{
			IQuery<ODataFeed<Item>> query = new IQuery<ODataFeed<Item>>(Client);
			query.From("Users");
			query.Action("TopFolders");
			query.Ids(userId);
			query.HttpMethod = "GET";
			return query;
		}

		public IQuery<ODataFeed<Item>> Box(string userId)
		{
			IQuery<ODataFeed<Item>> query = new IQuery<ODataFeed<Item>>(Client);
			query.From("Users");
			query.Action("Box");
			query.Ids(userId);
			query.HttpMethod = "GET";
			return query;
		}

		/// <summary>
		/// Get User Preferences
		/// </summary>
		/// <remarks>
		/// Retrieves the User preferences record - all user-selected prefernces, such as timezone,
		/// time format, sort preferences, etc.
		/// </remarks>
		/// <param name="id"></param>
		/// <returns>
		/// the user selected preferences
		/// </returns>
		public IQuery<UserPreferences> GetPreferences(string id)
		{
			IQuery<UserPreferences> query = new IQuery<UserPreferences>(Client);
			query.From("Users");
			query.Action("Preferences");
			query.Ids(id);
			query.HttpMethod = "GET";
			return query;
		}

		/// <summary>
		/// Reset Password
		/// </summary>
		/// <example>
		/// {
		/// "NewPassword":"new password",
		/// "OldPassword":"old password"
		/// }
		/// {
		/// "NewPassword":"new password",
		/// "OldPassword":"old password"
		/// }
		/// </example>
		/// <remarks>
		/// Resets a user password. A user can reset his own password providing the old and new
		/// passwords. Administrators can issue this call without providing the old password.
		/// </remarks>
		/// <param name="id"></param>
		/// <param name="properties"></param>
		/// <param name="notify"></param>
		/// <returns>
		/// The modified user record
		/// </returns>
		public IQuery<User> ResetPassword(string id, ODataObject properties, bool notify = false)
		{
			IQuery<User> query = new IQuery<User>(Client);
			query.From("Users");
			query.Action("ResetPassword");
			query.Ids(id);
			query.QueryString("notify", notify);
			query.Body = properties;
			query.HttpMethod = "POST";
			return query;
		}

		/// <summary>
		/// Send Welcome Email
		/// </summary>
		/// <remarks>
		/// Resends the 'welcome' email to the given user
		/// </remarks>
		/// <param name="id"></param>
		public IQuery ResendWelcome(string id)
		{
			IQuery query = new IQuery(Client);
			query.From("Users");
			query.Action("ResendWelcome");
			query.Ids(id);
			query.HttpMethod = "POST";
			return query;
		}

		/// <summary>
		/// Delete User
		/// </summary>
		/// <remarks>
		/// Removes an user
		/// </remarks>
		/// <param name="id"></param>
		/// <param name="completely"></param>
		public IQuery Delete(string id, bool completely = false)
		{
			IQuery query = new IQuery(Client);
			query.From("Users");
			query.Ids(id);
			query.QueryString("completely", completely);
			query.HttpMethod = "DELETE";
			return query;
		}

		/// <summary>
		/// Get List of User Shared Folders
		/// </summary>
		/// <remarks>
		/// Retrieve the list of shared folders the authenticated user has access to
		/// </remarks>
		/// <returns>
		/// A list of Folder objects, representing shared folders of an user
		/// </returns>
		public IQuery<ODataFeed<Item>> GetAllSharedFolders()
		{
			IQuery<ODataFeed<Item>> query = new IQuery<ODataFeed<Item>>(Client);
			query.From("Users");
			query.Action("AllSharedFolders");
			query.HttpMethod = "GET";
			return query;
		}

		/// <summary>
		/// Get List of User Shared Folders
		/// </summary>
		/// <remarks>
		/// Retrieve the top-level folders for this user. This method requires the account to be
		/// in the new UI model of "My Files", "Shared", "Connectors", "Favorites" tab - otherwise
		/// it will return an empty list (new UX model is the default since May 2013).
		/// </remarks>
		/// <returns>
		/// A list of Folder objects, representing shared folders of an user
		/// </returns>
		public IQuery<ODataFeed<Item>> GetTopFolders()
		{
			IQuery<ODataFeed<Item>> query = new IQuery<ODataFeed<Item>>(Client);
			query.From("Users");
			query.Action("TopFolders");
			query.HttpMethod = "GET";
			return query;
		}

		/// <summary>
		/// Get List of User Shared Folders
		/// </summary>
		/// <remarks>
		/// Retrieve the connector folders that are associated with a network share service
		/// </remarks>
		/// <returns>
		/// A list of Folder objects, representing network shared connector folders of an user
		/// </returns>
		public IQuery<ODataFeed<Item>> NetworkShareConnectors()
		{
			IQuery<ODataFeed<Item>> query = new IQuery<ODataFeed<Item>>(Client);
			query.From("Users");
			query.Action("NetworkShareConnectors");
			query.HttpMethod = "GET";
			return query;
		}

		/// <summary>
		/// Get List of User Shared Folders
		/// </summary>
		/// <remarks>
		/// Retrieve the connector folders that are associated with a sharepoint service
		/// </remarks>
		/// <returns>
		/// A list of Folder objects, representing sharepoint folders of an user
		/// </returns>
		public IQuery<ODataFeed<Item>> SharepointConnectors()
		{
			IQuery<ODataFeed<Item>> query = new IQuery<ODataFeed<Item>>(Client);
			query.From("Users");
			query.Action("SharepointConnectors");
			query.HttpMethod = "GET";
			return query;
		}

		/// <summary>
		/// Confirm the current user logging in for the first time
		/// </summary>
		/// <example>
		/// {
		/// "FirstName":"",
		/// "LastName":"",
		/// "Company":"",
		/// "Password":"",
		/// "DayLightName":"",
		/// "UTCOffset":"",
		/// "DateFormat":"",
		/// "TimeFormat":"",
		/// "EmailInterval":0
		/// }
		/// </example>
		/// <param name="settings"></param>
		/// <returns>
		/// no data on success
		/// </returns>
		public IQuery Confirm(UserConfirmationSettings settings)
		{
			IQuery query = new IQuery(Client);
			query.From("Users");
			query.Action("Confirm");
			query.Body = settings;
			query.HttpMethod = "POST";
			return query;
		}

		/// <summary>
		/// Get Current User Info
		/// </summary>
		/// <returns>
		/// UserInfo
		/// </returns>
		public IQuery<UserInfo> GetInfo()
		{
			IQuery<UserInfo> query = new IQuery<UserInfo>(Client);
			query.From("Users");
			query.Action("Info");
			query.HttpMethod = "GET";
			return query;
		}

	}
}
