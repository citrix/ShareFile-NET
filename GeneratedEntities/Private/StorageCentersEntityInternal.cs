// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2014 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using ShareFile.Api.Models;
using ShareFile.Api.Client;

namespace ShareFile.Api.Client
{
#if ShareFile
	public class StorageCentersEntityInternal : StorageCentersEntity
	{
		/// <summary>
		/// Get Storage Center
		/// </summary>
		/// <param name="id"></param>
		/// <returns>
		/// A single Storage Center
		/// </returns>
		public IQuery<StorageCenter> Get(string id)
		{
			IQuery<StorageCenter> query = new IQuery<StorageCenter>(Client);
			query.From("StorageCenters");
			query.Ids(id);
			query.HttpMethod = "GET";
			return query;
		}

		/// <summary>
		/// Patch Storage Center
		/// </summary>
		/// <example>
		/// {
		/// "ExternalAddress":"https://server/",
		/// "Version":"4.12.20",
		/// "HostName":"hostname" }
		/// </example>
		/// <param name="id"></param>
		/// <param name="sc"></param>
		/// <returns>
		/// Modified Storage Center
		/// </returns>
		public IQuery<StorageCenter> Update(string id, StorageCenter sc)
		{
			IQuery<StorageCenter> query = new IQuery<StorageCenter>(Client);
			query.From("StorageCenters");
			query.Ids(id);
			query.Body = sc;
			query.HttpMethod = "PATCH";
			return query;
		}

		/// <summary>
		/// Delete Storage Center
		/// </summary>
		/// <param name="id"></param>
		public IQuery Delete(string id)
		{
			IQuery query = new IQuery(Client);
			query.From("StorageCenters");
			query.Ids(id);
			query.HttpMethod = "DELETE";
			return query;
		}

		/// <summary>
		/// Get List of StorageCenters from Zone
		/// </summary>
		/// <remarks>
		/// Lists Storage Centers of a given Zone
		/// </remarks>
		/// <param name="id"></param>
		/// <returns>
		/// A list of Storage Centers associated with the provided zone
		/// </returns>
		public IQuery<ODataFeed<StorageCenter>> GetByZone(string id)
		{
			IQuery<ODataFeed<StorageCenter>> query = new IQuery<ODataFeed<StorageCenter>>(Client);
			query.From("Zones");
			query.Action("StorageCenters");
			query.Ids(id);
			query.HttpMethod = "GET";
			return query;
		}

		/// <summary>
		/// Create StorageCenter
		/// </summary>
		/// <example>
		/// {
		/// "ExternalAddress":"https://server/",
		/// "Version":"4.12.20",
		/// "HostName":"hostname"
		/// }
		/// </example>
		/// <remarks>
		/// Creates a new Storage Center associated with a specific zone
		/// </remarks>
		/// <param name="id"></param>
		/// <param name="storageCenter"></param>
		/// <returns>
		/// The new storage center
		/// </returns>
		public IQuery<StorageCenter> CreateByZone(string id, StorageCenter storageCenter)
		{
			IQuery<StorageCenter> query = new IQuery<StorageCenter>(Client);
			query.From("Zones");
			query.Action("StorageCenters");
			query.Ids(id);
			query.Body = storageCenter;
			query.HttpMethod = "POST";
			return query;
		}

		/// <summary>
		/// Update StorageCenter
		/// </summary>
		/// <example>
		/// {
		/// "ExternalAddress":"https://server/",
		/// "Version":"4.12.20",
		/// "HostName":"hostname"
		/// }
		/// </example>
		/// <remarks>
		/// Updates an existing Storage Center
		/// </remarks>
		/// <param name="zid"></param>
		/// <param name="scid"></param>
		/// <param name="storageCenter"></param>
		/// <returns>
		/// the modified storage center
		/// </returns>
		public IQuery<StorageCenter> UpdateByZone(string zid, string scid, StorageCenter storageCenter)
		{
			IQuery<StorageCenter> query = new IQuery<StorageCenter>(Client);
			query.From("Zones");
			query.Action("StorageCenters");
			query.Ids(zid);
			query.ActionIds(scid);
			query.Body = storageCenter;
			query.HttpMethod = "PATCH";
			return query;
		}

		/// <summary>
		/// Delete StorageCenter
		/// </summary>
		/// <remarks>
		/// Removes an existing storage center
		/// </remarks>
		/// <param name="zid"></param>
		/// <param name="scid"></param>
		public IQuery DeleteByZone(string zid, string scid)
		{
			IQuery query = new IQuery(Client);
			query.From("Zones");
			query.Action("StorageCenters");
			query.Ids(zid);
			query.ActionIds(scid);
			query.HttpMethod = "DELETE";
			return query;
		}

		/// <summary>
		/// Get StorageCenter Metadata
		/// </summary>
		/// <remarks>
		/// Gets metadata associated with the specified storage center
		/// </remarks>
		/// <param name="zid"></param>
		/// <param name="scid"></param>
		/// <returns>
		/// the storage center metadata feed
		/// </returns>
		public IQuery<ODataFeed<Metadata>> GetMetadata(string zid, string scid)
		{
			IQuery<ODataFeed<Metadata>> query = new IQuery<ODataFeed<Metadata>>(Client);
			query.From("Zones");
			query.Action("StorageCenters");
			query.Ids(zid);
			query.ActionIds(scid);
			query.SubAction("Metadata");
			query.HttpMethod = "GET";
			return query;
		}

		/// <summary>
		/// Create or update StorageCenter Metadata
		/// </summary>
		/// <example>
		/// [
		/// {"Name":"metadataName1", "Value":"metadataValue1", "IsPublic":"true"},
		/// {"Name":"metadataName2", "Value":"metadataValue2", "IsPublic":"false"},
		/// ...
		/// ]
		/// </example>
		/// <remarks>
		/// Creates or updates Metadata entries associated with the specified storage center
		/// </remarks>
		/// <param name="zid"></param>
		/// <param name="scid"></param>
		/// <param name="metadata"></param>
		/// <returns>
		/// the storage center metadata feed
		/// </returns>
		public IQuery<ODataFeed<Metadata>> CreateMetadata(string zid, string scid, IEnumerable<Metadata> metadata)
		{
			IQuery<ODataFeed<Metadata>> query = new IQuery<ODataFeed<Metadata>>(Client);
			query.From("Zones");
			query.Action("StorageCenters");
			query.Ids(zid);
			query.ActionIds(scid);
			query.SubAction("Metadata");
			query.Body = metadata;
			query.HttpMethod = "POST";
			return query;
		}

		/// <summary>
		/// Delete StorageCenter Metadata
		/// </summary>
		/// <remarks>
		/// Delete the Metadata entry associated with the specified storage center
		/// </remarks>
		/// <param name="zid"></param>
		/// <param name="scid"></param>
		/// <param name="name"></param>
		/// <returns>
		/// no data on success
		/// </returns>
		public IQuery DeleteMetadata(string zid, string scid, string name)
		{
			IQuery query = new IQuery(Client);
			query.From("Zones");
			query.Action("StorageCenters");
			query.Ids(zid);
			query.ActionIds(scid);
			query.SubAction("Metadata");
			query.QueryString("name", name);
			query.HttpMethod = "DELETE";
			return query;
		}

	}
#endif
}
