// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2015 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Net;

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using ShareFile.Api.Client.Extensions;
using ShareFile.Api.Client.Exceptions;

namespace ShareFile.Api.Models 
{
#if ShareFile
	public class EnterpriseOrder : ODataObject 
	{

		public string SapOrderNumber { get; set; }

		public string VantiveOrgId { get; set; }

		public int? Quantity { get; set; }

		public int? SkuNumber { get; set; }

		public decimal? NetPrice { get; set; }

		public DateTime? StartDate { get; set; }

		public DateTime? EndDate { get; set; }

		public DateTime? EnteredDate { get; set; }

		public User EnteredBy { get; set; }

		public DateTime? UpdatedDate { get; set; }

		public User UpdatedBy { get; set; }

		public bool? IsCancelled { get; set; }

		public string ParentId { get; set; }

		public string FullRepName { get; set; }

		public string Currency { get; set; }

		public string SkuDescription { get; set; }

		public EnterpriseReseller EnterpriseResellers { get; set; }

		public override void Copy(ODataObject source, JsonSerializer serializer)
		{
			if(source == null || serializer == null) return;
			base.Copy(source, serializer);

			var typedSource = source as EnterpriseOrder;
			if(typedSource != null)
			{
				SapOrderNumber = typedSource.SapOrderNumber;
				VantiveOrgId = typedSource.VantiveOrgId;
				Quantity = typedSource.Quantity;
				SkuNumber = typedSource.SkuNumber;
				NetPrice = typedSource.NetPrice;
				StartDate = typedSource.StartDate;
				EndDate = typedSource.EndDate;
				EnteredDate = typedSource.EnteredDate;
				EnteredBy = typedSource.EnteredBy;
				UpdatedDate = typedSource.UpdatedDate;
				UpdatedBy = typedSource.UpdatedBy;
				IsCancelled = typedSource.IsCancelled;
				ParentId = typedSource.ParentId;
				FullRepName = typedSource.FullRepName;
				Currency = typedSource.Currency;
				SkuDescription = typedSource.SkuDescription;
				EnterpriseResellers = typedSource.EnterpriseResellers;
			}
			else
			{
				JToken token;
				if(source.TryGetProperty("SapOrderNumber", out token) && token.Type != JTokenType.Null)
				{
					SapOrderNumber = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("VantiveOrgId", out token) && token.Type != JTokenType.Null)
				{
					VantiveOrgId = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("Quantity", out token) && token.Type != JTokenType.Null)
				{
					Quantity = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("SkuNumber", out token) && token.Type != JTokenType.Null)
				{
					SkuNumber = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("NetPrice", out token) && token.Type != JTokenType.Null)
				{
					NetPrice = (decimal?)serializer.Deserialize(token.CreateReader(), typeof(decimal?));
				}
				if(source.TryGetProperty("StartDate", out token) && token.Type != JTokenType.Null)
				{
					StartDate = (DateTime?)serializer.Deserialize(token.CreateReader(), typeof(DateTime?));
				}
				if(source.TryGetProperty("EndDate", out token) && token.Type != JTokenType.Null)
				{
					EndDate = (DateTime?)serializer.Deserialize(token.CreateReader(), typeof(DateTime?));
				}
				if(source.TryGetProperty("EnteredDate", out token) && token.Type != JTokenType.Null)
				{
					EnteredDate = (DateTime?)serializer.Deserialize(token.CreateReader(), typeof(DateTime?));
				}
				if(source.TryGetProperty("EnteredBy", out token) && token.Type != JTokenType.Null)
				{
					EnteredBy = (User)serializer.Deserialize(token.CreateReader(), typeof(User));
				}
				if(source.TryGetProperty("UpdatedDate", out token) && token.Type != JTokenType.Null)
				{
					UpdatedDate = (DateTime?)serializer.Deserialize(token.CreateReader(), typeof(DateTime?));
				}
				if(source.TryGetProperty("UpdatedBy", out token) && token.Type != JTokenType.Null)
				{
					UpdatedBy = (User)serializer.Deserialize(token.CreateReader(), typeof(User));
				}
				if(source.TryGetProperty("IsCancelled", out token) && token.Type != JTokenType.Null)
				{
					IsCancelled = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("ParentId", out token) && token.Type != JTokenType.Null)
				{
					ParentId = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("FullRepName", out token) && token.Type != JTokenType.Null)
				{
					FullRepName = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("Currency", out token) && token.Type != JTokenType.Null)
				{
					Currency = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("SkuDescription", out token) && token.Type != JTokenType.Null)
				{
					SkuDescription = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("EnterpriseResellers", out token) && token.Type != JTokenType.Null)
				{
					EnterpriseResellers = (EnterpriseReseller)serializer.Deserialize(token.CreateReader(), typeof(EnterpriseReseller));
				}
			}
		}
	}
#endif
}