// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2015 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using ShareFile.Api.Models;
using ShareFile.Api.Client;
using ShareFile.Api.Client.Requests;
using ShareFile.Api.Client.Extensions;

namespace ShareFile.Api.Client.Entities.Extensions
{
    public static class AccountsEntityInternalExtensions
    {
        
        /// <summary>
        /// Creates a new account
        /// </summary>
        /// <param name="account"></param>
        /// <param name="sendActivationLink"></param>
        /// <returns>
        /// The new account created by the api
        /// </returns>
        public static IQuery<FreeTrialAccount> CreateFreeTrialAccount(this IAccountsEntity entity, FreeTrialAccount account, bool sendActivationLink = false)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<FreeTrialAccount>(entity.Client);
		    sfApiQuery.From("Accounts");
		    sfApiQuery.Action("CreateFreeTrialAccount");
            account.AddProperty("sendActivationLink", sendActivationLink);
            sfApiQuery.Body = account;
            sfApiQuery.HttpMethod = "POST";	
		    return sfApiQuery;
        }
        
        /// <summary>
        /// Deletes an account
        /// </summary>
        /// <param name="url"></param>
        public static IQuery Delete(this IAccountsEntity entity, Uri url)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query(entity.Client);
            sfApiQuery.Uri(url);
            sfApiQuery.HttpMethod = "DELETE";	
		    return sfApiQuery;
        }
        
        /// <summary>
        /// Get EnsSubscriber Configuration
        /// </summary>
        /// <returns>
        /// EnsSubscriber Configuration
        /// </returns>
        public static IQuery<EnsSubscriberConfiguration> GetEnsSubscriberConfiguration(this IAccountsEntity entity)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<EnsSubscriberConfiguration>(entity.Client);
		    sfApiQuery.From("Accounts");
		    sfApiQuery.Action("GetEnsSubscriberConfiguration");
            sfApiQuery.HttpMethod = "GET";	
		    return sfApiQuery;
        }
        
        /// <summary>
        /// Get the tenants of a partner account
        /// </summary>
        /// <returns>
        /// List of tenant accounts managed by this partner account, if any
        /// </returns>
        public static IQuery<ODataFeed<Account>> GetTenants(this IAccountsEntity entity)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<ODataFeed<Account>>(entity.Client);
		    sfApiQuery.From("Accounts");
		    sfApiQuery.Action("Tenants");
            sfApiQuery.HttpMethod = "GET";	
		    return sfApiQuery;
        }
        public static IQuery<Account> GetTenants(this IAccountsEntity entity, string id)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<Account>(entity.Client);
		    sfApiQuery.From("Accounts");
		    sfApiQuery.Action("Tenants");
            sfApiQuery.ActionIds(id);
            sfApiQuery.HttpMethod = "GET";	
		    return sfApiQuery;
        }
        
        /// <summary>
        /// Get list of multi-tenant zones assigned to a tenant.
        /// </summary>
        /// <param name="parentid"></param>
        /// <returns>
        /// List of multi-tenant zones assigned to the tenant
        /// </returns>
        public static IQuery<ODataFeed<Zone>> GetZones(this IAccountsEntity entity, string parentid)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<ODataFeed<Zone>>(entity.Client);
		    sfApiQuery.From("Accounts");
		    sfApiQuery.Action("Tenants");
            sfApiQuery.ActionIds(parentid);
            sfApiQuery.SubAction("Zones");
            sfApiQuery.HttpMethod = "GET";	
		    return sfApiQuery;
        }
        
        /// <summary>
        /// Update Account Preferences
        /// </summary>
        /// <example>
        /// {
        /// "Preferences": {
        /// "LoginFailLockoutSecs": 60,
        /// }
        /// }
        /// </example>
        /// <returns>
        /// Account
        /// </returns>
        public static IQuery<Account> Update(this IAccountsEntity entity, Account account)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<Account>(entity.Client);
		    sfApiQuery.From("Accounts");
            sfApiQuery.Body = account;
            sfApiQuery.HttpMethod = "PATCH";	
		    return sfApiQuery;
        }
        
        /// <summary>
        /// Assign Subdomain to Account
        /// </summary>
        /// <example>
        /// {
        /// "subdomain":"TheSubdomain"
        /// }
        /// </example>
        /// <param name="subdomain"></param>
        public static IQuery CreateAssignSubdomain(this IAccountsEntity entity, string subdomain)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query(entity.Client);
		    sfApiQuery.From("Accounts");
		    sfApiQuery.Action("AssignSubdomain");
            sfApiQuery.QueryString("subdomain", subdomain);
            sfApiQuery.HttpMethod = "POST";	
		    return sfApiQuery;
        }
        
        /// <summary>
        /// Request Plan Changes for this account
        /// </summary>
        /// <remarks>
        /// Request Plan Changes for the account.
        /// This operation requires authentication.
        /// </remarks>
        /// <returns>
        /// Account object
        /// </returns>
        public static IQuery<Account> RequestPlanChanges(this IAccountsEntity entity, Account account)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<Account>(entity.Client);
		    sfApiQuery.From("Accounts");
		    sfApiQuery.Action("RequestPlanChanges");
            sfApiQuery.Body = account;
            sfApiQuery.HttpMethod = "POST";	
		    return sfApiQuery;
        }
        
        /// <summary>
        /// Convert Account To Paid
        /// </summary>
        /// <remarks>
        /// Convert Account To Paid.
        /// This operation requires authentication.
        /// </remarks>
        /// <returns>
        /// Account object
        /// </returns>
        public static IQuery<Account> UpgradeToPaid(this IAccountsEntity entity, Account account)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<Account>(entity.Client);
		    sfApiQuery.From("Accounts");
		    sfApiQuery.Action("UpgradeToPaid");
            sfApiQuery.Body = account;
            sfApiQuery.HttpMethod = "POST";	
		    return sfApiQuery;
        }
    }
}