// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2014 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using ShareFile.Api.Client.Extensions;

namespace ShareFile.Api.Models 
{
#if ShareFile
	public class UsagePlan : ODataObject 
	{

		public string Name { get; set; }

		public string PlanTrack { get; set; }

		public string Code { get; set; }

		public string AddonTypeCode { get; set; }

		public decimal? MonthlyPrice { get; set; }

		public decimal? QuarterlyPrice { get; set; }

		public decimal? YearlyPrice { get; set; }

		public decimal? BasePrice { get; set; }

		public int? BaseBandwidth { get; set; }

		public int? BaseDiskSpace { get; set; }

		public int? BaseUsers { get; set; }

		public decimal? AdditionalBandwidthPrice { get; set; }

		public decimal? AdditionalDiskSpacePrice { get; set; }

		public decimal? AdditionalUserPrice { get; set; }

		public AppliedPlanAddOns AppliedAddOns { get; set; }

		public IEnumerable<UsagePlanAddOn> AvailableAddOns { get; set; }

		public int? UserMax { get; set; }

		public int? BandwidthMax { get; set; }

		public int? DiskSpaceMax { get; set; }

		public decimal? BillingRate { get; set; }

		public string BillingCycle { get; set; }

		public override void Copy(ODataObject source, JsonSerializer serializer)
		{
			if(source == null || serializer == null) return;
			base.Copy(source, serializer);

			var typedSource = source as UsagePlan;
			if(typedSource != null)
			{
				Name = typedSource.Name;
				PlanTrack = typedSource.PlanTrack;
				Code = typedSource.Code;
				AddonTypeCode = typedSource.AddonTypeCode;
				MonthlyPrice = typedSource.MonthlyPrice;
				QuarterlyPrice = typedSource.QuarterlyPrice;
				YearlyPrice = typedSource.YearlyPrice;
				BasePrice = typedSource.BasePrice;
				BaseBandwidth = typedSource.BaseBandwidth;
				BaseDiskSpace = typedSource.BaseDiskSpace;
				BaseUsers = typedSource.BaseUsers;
				AdditionalBandwidthPrice = typedSource.AdditionalBandwidthPrice;
				AdditionalDiskSpacePrice = typedSource.AdditionalDiskSpacePrice;
				AdditionalUserPrice = typedSource.AdditionalUserPrice;
				AppliedAddOns = typedSource.AppliedAddOns;
				AvailableAddOns = typedSource.AvailableAddOns;
				UserMax = typedSource.UserMax;
				BandwidthMax = typedSource.BandwidthMax;
				DiskSpaceMax = typedSource.DiskSpaceMax;
				BillingRate = typedSource.BillingRate;
				BillingCycle = typedSource.BillingCycle;
			}
			else
			{
				JToken token;
				if(source.TryGetProperty("Name", out token) && token.Type != JTokenType.Null)
				{
					Name = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("PlanTrack", out token) && token.Type != JTokenType.Null)
				{
					PlanTrack = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("Code", out token) && token.Type != JTokenType.Null)
				{
					Code = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("AddonTypeCode", out token) && token.Type != JTokenType.Null)
				{
					AddonTypeCode = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("MonthlyPrice", out token) && token.Type != JTokenType.Null)
				{
					MonthlyPrice = (decimal?)serializer.Deserialize(token.CreateReader(), typeof(decimal?));
				}
				if(source.TryGetProperty("QuarterlyPrice", out token) && token.Type != JTokenType.Null)
				{
					QuarterlyPrice = (decimal?)serializer.Deserialize(token.CreateReader(), typeof(decimal?));
				}
				if(source.TryGetProperty("YearlyPrice", out token) && token.Type != JTokenType.Null)
				{
					YearlyPrice = (decimal?)serializer.Deserialize(token.CreateReader(), typeof(decimal?));
				}
				if(source.TryGetProperty("BasePrice", out token) && token.Type != JTokenType.Null)
				{
					BasePrice = (decimal?)serializer.Deserialize(token.CreateReader(), typeof(decimal?));
				}
				if(source.TryGetProperty("BaseBandwidth", out token) && token.Type != JTokenType.Null)
				{
					BaseBandwidth = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("BaseDiskSpace", out token) && token.Type != JTokenType.Null)
				{
					BaseDiskSpace = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("BaseUsers", out token) && token.Type != JTokenType.Null)
				{
					BaseUsers = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("AdditionalBandwidthPrice", out token) && token.Type != JTokenType.Null)
				{
					AdditionalBandwidthPrice = (decimal?)serializer.Deserialize(token.CreateReader(), typeof(decimal?));
				}
				if(source.TryGetProperty("AdditionalDiskSpacePrice", out token) && token.Type != JTokenType.Null)
				{
					AdditionalDiskSpacePrice = (decimal?)serializer.Deserialize(token.CreateReader(), typeof(decimal?));
				}
				if(source.TryGetProperty("AdditionalUserPrice", out token) && token.Type != JTokenType.Null)
				{
					AdditionalUserPrice = (decimal?)serializer.Deserialize(token.CreateReader(), typeof(decimal?));
				}
				if(source.TryGetProperty("AppliedAddOns", out token) && token.Type != JTokenType.Null)
				{
					AppliedAddOns = (AppliedPlanAddOns)serializer.Deserialize(token.CreateReader(), typeof(AppliedPlanAddOns));
				}
				if(source.TryGetProperty("AvailableAddOns", out token) && token.Type != JTokenType.Null)
				{
					AvailableAddOns = (IEnumerable<UsagePlanAddOn>)serializer.Deserialize(token.CreateReader(), typeof(IEnumerable<UsagePlanAddOn>));
				}
				if(source.TryGetProperty("UserMax", out token) && token.Type != JTokenType.Null)
				{
					UserMax = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("BandwidthMax", out token) && token.Type != JTokenType.Null)
				{
					BandwidthMax = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("DiskSpaceMax", out token) && token.Type != JTokenType.Null)
				{
					DiskSpaceMax = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("BillingRate", out token) && token.Type != JTokenType.Null)
				{
					BillingRate = (decimal?)serializer.Deserialize(token.CreateReader(), typeof(decimal?));
				}
				if(source.TryGetProperty("BillingCycle", out token) && token.Type != JTokenType.Null)
				{
					BillingCycle = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
			}
		}
	}
#endif
}