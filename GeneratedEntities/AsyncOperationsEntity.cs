// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2014 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using ShareFile.Api.Models;
using ShareFile.Api.Client;

namespace ShareFile.Api.Client
{
	public class AsyncOperationsEntity : ODataEntityBase
	{
		/// <summary>
		/// Get AsyncOperation by ID
		/// </summary>
		/// <remarks>
		/// Retrieve a single Async Op record by ID
		/// </remarks>
		/// <param name="id"></param>
		/// <returns>
		/// A single Async Operation record
		/// </returns>
		public IQuery<AsyncOperation> Get(string id)
		{
			IQuery<AsyncOperation> query = new IQuery<AsyncOperation>(Client);
			query.From("AsyncOperations");
			query.Ids(id);
			query.HttpMethod = "GET";
			return query;
		}

		/// <summary>
		/// Get List of AsyncOperations by Operation Batch ID
		/// </summary>
		/// <remarks>
		/// Retrieves all AsyncOperations on the specified batch
		/// </remarks>
		/// <param name="id"></param>
		/// <returns>
		/// A Feed of AsyncOperation objects, containing all items in the specified batch
		/// </returns>
		public IQuery<ODataFeed<AsyncOperation>> GetByBatch(string id)
		{
			IQuery<ODataFeed<AsyncOperation>> query = new IQuery<ODataFeed<AsyncOperation>>(Client);
			query.From("AsyncOperations");
			query.Action("GetByBatch");
			query.ActionIds(id);
			query.HttpMethod = "GET";
			return query;
		}

		/// <summary>
		/// Get List of AsyncOperations by Folder
		/// </summary>
		/// <remarks>
		/// Retrieves all AsyncOperations associated with the calling user and the Item ID
		/// </remarks>
		/// <param name="id"></param>
		/// <returns>
		/// A Feed of AsyncOperation objects, containing all pending operations in the specific folder,
		/// for the authenticated SDK user
		/// </returns>
		public IQuery<ODataFeed<AsyncOperation>> GetByFolder(string id)
		{
			IQuery<ODataFeed<AsyncOperation>> query = new IQuery<ODataFeed<AsyncOperation>>(Client);
			query.From("AsyncOperations");
			query.Action("GetByFolder");
			query.ActionIds(id);
			query.HttpMethod = "GET";
			return query;
		}

		/// <summary>
		/// Cancel AsyncOperation
		/// </summary>
		/// <remarks>
		/// Cancels a single Async operation record
		/// </remarks>
		/// <param name="id"></param>
		/// <returns>
		/// The modified Async Operation record
		/// </returns>
		public IQuery<AsyncOperation> Cancel(string id)
		{
			IQuery<AsyncOperation> query = new IQuery<AsyncOperation>(Client);
			query.From("AsyncOperations");
			query.Action("Cancel");
			query.Ids(id);
			query.HttpMethod = "POST";
			return query;
		}

		/// <summary>
		/// Delete AsyncOperation
		/// </summary>
		/// <remarks>
		/// Cancels a single Async operation record (same as /Cancel)
		/// </remarks>
		/// <param name="id"></param>
		public IQuery Delete(string id)
		{
			IQuery query = new IQuery(Client);
			query.From("AsyncOperations");
			query.Ids(id);
			query.HttpMethod = "DELETE";
			return query;
		}

		/// <summary>
		/// Cancel an Operation Batch
		/// </summary>
		/// <remarks>
		/// Cancel an Async Operation batch - all unfinished Async Operation records in that batch
		/// will be moved to Cancelled state.
		/// </remarks>
		/// <param name="id"></param>
		/// <returns>
		/// A list of the modified Async Operations in the batch
		/// </returns>
		public IQuery<ODataFeed<AsyncOperation>> CancelBatch(string id)
		{
			IQuery<ODataFeed<AsyncOperation>> query = new IQuery<ODataFeed<AsyncOperation>>(Client);
			query.From("AsyncOperations");
			query.Action("CancelBatch");
			query.ActionIds(id);
			query.HttpMethod = "POST";
			return query;
		}

		/// <summary>
		/// Changes the state of an AsyncOperation
		/// </summary>
		/// <example>
		/// { "State": "..." }
		/// </example>
		/// <remarks>
		/// Only the State parameter is updated, other fields are ignored
		/// </remarks>
		/// <param name="id"></param>
		/// <param name="newAsyncOp"></param>
		/// <returns>
		/// The modified Async Operation
		/// </returns>
		public IQuery<AsyncOperation> Update(string id, AsyncOperation newAsyncOp)
		{
			IQuery<AsyncOperation> query = new IQuery<AsyncOperation>(Client);
			query.From("AsyncOperations");
			query.Ids(id);
			query.Body = newAsyncOp;
			query.HttpMethod = "PUT";
			return query;
		}

	}
}
