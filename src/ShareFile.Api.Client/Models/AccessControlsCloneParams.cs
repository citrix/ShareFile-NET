// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2018 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Net;

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using ShareFile.Api.Client.Extensions;
using ShareFile.Api.Client.Exceptions;

namespace ShareFile.Api.Client.Models 
{
	/// <summary>
	/// Clone operation parameters
	/// </summary>
	public class AccessControlsCloneParams : ODataObject 
	{
		/// <summary>
		/// Defines whether the cloned principals should receieve a notice on the permission grant.
		/// </summary>
		public bool? NotifyUser { get; set; }
		/// <summary>
		/// Custom notification message, if any.
		/// </summary>
		public string NotifyMessage { get; set; }
		/// <summary>
		/// The source principal's permissions for this folder and all subdirectories
		/// will be copied into the cloned users.
		/// </summary>
		public string FolderId { get; set; }
		/// <summary>
		/// This principal's permissions will be used as the source for all cloned users.
		/// </summary>
		public string PrincipalId { get; set; }
		/// <summary>
		/// List of existing principals that will receive cloned permissions.
		/// </summary>
		public IEnumerable<string> ClonePrincipalIds { get; set; }

		public override void Copy(ODataObject source, JsonSerializer serializer)
		{
			if(source == null || serializer == null) return;
			base.Copy(source, serializer);

			var typedSource = source as AccessControlsCloneParams;
			if(typedSource != null)
			{
				NotifyUser = typedSource.NotifyUser;
				NotifyMessage = typedSource.NotifyMessage;
				FolderId = typedSource.FolderId;
				PrincipalId = typedSource.PrincipalId;
				ClonePrincipalIds = typedSource.ClonePrincipalIds;
			}
			else
			{
				JToken token;
				if(source.TryGetProperty("NotifyUser", out token) && token.Type != JTokenType.Null)
				{
					NotifyUser = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("NotifyMessage", out token) && token.Type != JTokenType.Null)
				{
					NotifyMessage = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("FolderId", out token) && token.Type != JTokenType.Null)
				{
					FolderId = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("PrincipalId", out token) && token.Type != JTokenType.Null)
				{
					PrincipalId = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("ClonePrincipalIds", out token) && token.Type != JTokenType.Null)
				{
					ClonePrincipalIds = (IEnumerable<string>)serializer.Deserialize(token.CreateReader(), typeof(IEnumerable<string>));
				}
			}
		}
	}
}