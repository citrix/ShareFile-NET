// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2015 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Net;

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using ShareFile.Api.Client.Extensions;
using ShareFile.Api.Client.Exceptions;

namespace ShareFile.Api.Models 
{
	public class Item : ODataObject 
	{

		public string Name { get; set; }

		public string FileName { get; set; }

		public User Creator { get; set; }

		public Item Parent { get; set; }

		public IEnumerable<AccessControl> AccessControls { get; set; }

		public Zone Zone { get; set; }

		public DateTime? CreationDate { get; set; }

		public DateTime? ProgenyEditDate { get; set; }

		public DateTime? ClientCreatedDate { get; set; }

		public DateTime? ClientModifiedDate { get; set; }

		public DateTime? ExpirationDate { get; set; }

		public string Description { get; set; }

		public int? DiskSpaceLimit { get; set; }

		public bool? IsHidden { get; set; }

		public int? BandwidthLimitInMB { get; set; }

		public User Owner { get; set; }

		public Account Account { get; set; }

		public int? FileSizeInKB { get; set; }

		public string Path { get; set; }

		public string CreatorFirstName { get; set; }

		public string CreatorLastName { get; set; }

		public int? ExpirationDays { get; set; }

		public long? FileSizeBytes { get; set; }

		public SafeEnum<PreviewStatus> PreviewStatus { get; set; }

		public IEnumerable<PreviewPlatformInfo> PreviewPlatformsSupported { get; set; }

		public int? MaxPreviewSize { get; set; }

		public bool? HasPendingDeletion { get; set; }

		public string AssociatedFolderTemplateID { get; set; }

		public bool? IsTemplateOwned { get; set; }

		public bool? HasPermissionInfo { get; set; }

		public int? State { get; set; }

		public string StreamID { get; set; }

		public string CreatorNameShort { get; set; }

		public bool? HasMultipleVersions { get; set; }

		public IEnumerable<AsyncOperation> AsyncOperations { get; set; }

		public IEnumerable<Metadata> Metadata { get; set; }

		public override void Copy(ODataObject source, JsonSerializer serializer)
		{
			if(source == null || serializer == null) return;
			base.Copy(source, serializer);

			var typedSource = source as Item;
			if(typedSource != null)
			{
				Name = typedSource.Name;
				FileName = typedSource.FileName;
				Creator = typedSource.Creator;
				Parent = typedSource.Parent;
				AccessControls = typedSource.AccessControls;
				Zone = typedSource.Zone;
				CreationDate = typedSource.CreationDate;
				ProgenyEditDate = typedSource.ProgenyEditDate;
				ClientCreatedDate = typedSource.ClientCreatedDate;
				ClientModifiedDate = typedSource.ClientModifiedDate;
				ExpirationDate = typedSource.ExpirationDate;
				Description = typedSource.Description;
				DiskSpaceLimit = typedSource.DiskSpaceLimit;
				IsHidden = typedSource.IsHidden;
				BandwidthLimitInMB = typedSource.BandwidthLimitInMB;
				Owner = typedSource.Owner;
				Account = typedSource.Account;
				FileSizeInKB = typedSource.FileSizeInKB;
				Path = typedSource.Path;
				CreatorFirstName = typedSource.CreatorFirstName;
				CreatorLastName = typedSource.CreatorLastName;
				ExpirationDays = typedSource.ExpirationDays;
				FileSizeBytes = typedSource.FileSizeBytes;
				PreviewStatus = typedSource.PreviewStatus;
				PreviewPlatformsSupported = typedSource.PreviewPlatformsSupported;
				MaxPreviewSize = typedSource.MaxPreviewSize;
				HasPendingDeletion = typedSource.HasPendingDeletion;
				AssociatedFolderTemplateID = typedSource.AssociatedFolderTemplateID;
				IsTemplateOwned = typedSource.IsTemplateOwned;
				HasPermissionInfo = typedSource.HasPermissionInfo;
				State = typedSource.State;
				StreamID = typedSource.StreamID;
				CreatorNameShort = typedSource.CreatorNameShort;
				HasMultipleVersions = typedSource.HasMultipleVersions;
				AsyncOperations = typedSource.AsyncOperations;
				Metadata = typedSource.Metadata;
			}
			else
			{
				JToken token;
				if(source.TryGetProperty("Name", out token) && token.Type != JTokenType.Null)
				{
					Name = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("FileName", out token) && token.Type != JTokenType.Null)
				{
					FileName = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("Creator", out token) && token.Type != JTokenType.Null)
				{
					Creator = (User)serializer.Deserialize(token.CreateReader(), typeof(User));
				}
				if(source.TryGetProperty("Parent", out token) && token.Type != JTokenType.Null)
				{
					Parent = (Item)serializer.Deserialize(token.CreateReader(), typeof(Item));
				}
				if(source.TryGetProperty("AccessControls", out token) && token.Type != JTokenType.Null)
				{
					AccessControls = (IEnumerable<AccessControl>)serializer.Deserialize(token.CreateReader(), typeof(IEnumerable<AccessControl>));
				}
				if(source.TryGetProperty("Zone", out token) && token.Type != JTokenType.Null)
				{
					Zone = (Zone)serializer.Deserialize(token.CreateReader(), typeof(Zone));
				}
				if(source.TryGetProperty("CreationDate", out token) && token.Type != JTokenType.Null)
				{
					CreationDate = (DateTime?)serializer.Deserialize(token.CreateReader(), typeof(DateTime?));
				}
				if(source.TryGetProperty("ProgenyEditDate", out token) && token.Type != JTokenType.Null)
				{
					ProgenyEditDate = (DateTime?)serializer.Deserialize(token.CreateReader(), typeof(DateTime?));
				}
				if(source.TryGetProperty("ClientCreatedDate", out token) && token.Type != JTokenType.Null)
				{
					ClientCreatedDate = (DateTime?)serializer.Deserialize(token.CreateReader(), typeof(DateTime?));
				}
				if(source.TryGetProperty("ClientModifiedDate", out token) && token.Type != JTokenType.Null)
				{
					ClientModifiedDate = (DateTime?)serializer.Deserialize(token.CreateReader(), typeof(DateTime?));
				}
				if(source.TryGetProperty("ExpirationDate", out token) && token.Type != JTokenType.Null)
				{
					ExpirationDate = (DateTime?)serializer.Deserialize(token.CreateReader(), typeof(DateTime?));
				}
				if(source.TryGetProperty("Description", out token) && token.Type != JTokenType.Null)
				{
					Description = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("DiskSpaceLimit", out token) && token.Type != JTokenType.Null)
				{
					DiskSpaceLimit = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("IsHidden", out token) && token.Type != JTokenType.Null)
				{
					IsHidden = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("BandwidthLimitInMB", out token) && token.Type != JTokenType.Null)
				{
					BandwidthLimitInMB = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("Owner", out token) && token.Type != JTokenType.Null)
				{
					Owner = (User)serializer.Deserialize(token.CreateReader(), typeof(User));
				}
				if(source.TryGetProperty("Account", out token) && token.Type != JTokenType.Null)
				{
					Account = (Account)serializer.Deserialize(token.CreateReader(), typeof(Account));
				}
				if(source.TryGetProperty("FileSizeInKB", out token) && token.Type != JTokenType.Null)
				{
					FileSizeInKB = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("Path", out token) && token.Type != JTokenType.Null)
				{
					Path = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("CreatorFirstName", out token) && token.Type != JTokenType.Null)
				{
					CreatorFirstName = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("CreatorLastName", out token) && token.Type != JTokenType.Null)
				{
					CreatorLastName = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("ExpirationDays", out token) && token.Type != JTokenType.Null)
				{
					ExpirationDays = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("FileSizeBytes", out token) && token.Type != JTokenType.Null)
				{
					FileSizeBytes = (long?)serializer.Deserialize(token.CreateReader(), typeof(long?));
				}
				if(source.TryGetProperty("PreviewStatus", out token) && token.Type != JTokenType.Null)
				{
					PreviewStatus = (SafeEnum<PreviewStatus>)serializer.Deserialize(token.CreateReader(), typeof(SafeEnum<PreviewStatus>));
				}
				if(source.TryGetProperty("PreviewPlatformsSupported", out token) && token.Type != JTokenType.Null)
				{
					PreviewPlatformsSupported = (IEnumerable<PreviewPlatformInfo>)serializer.Deserialize(token.CreateReader(), typeof(IEnumerable<PreviewPlatformInfo>));
				}
				if(source.TryGetProperty("MaxPreviewSize", out token) && token.Type != JTokenType.Null)
				{
					MaxPreviewSize = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("HasPendingDeletion", out token) && token.Type != JTokenType.Null)
				{
					HasPendingDeletion = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("AssociatedFolderTemplateID", out token) && token.Type != JTokenType.Null)
				{
					AssociatedFolderTemplateID = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("IsTemplateOwned", out token) && token.Type != JTokenType.Null)
				{
					IsTemplateOwned = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("HasPermissionInfo", out token) && token.Type != JTokenType.Null)
				{
					HasPermissionInfo = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("State", out token) && token.Type != JTokenType.Null)
				{
					State = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("StreamID", out token) && token.Type != JTokenType.Null)
				{
					StreamID = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("CreatorNameShort", out token) && token.Type != JTokenType.Null)
				{
					CreatorNameShort = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("HasMultipleVersions", out token) && token.Type != JTokenType.Null)
				{
					HasMultipleVersions = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("AsyncOperations", out token) && token.Type != JTokenType.Null)
				{
					AsyncOperations = (IEnumerable<AsyncOperation>)serializer.Deserialize(token.CreateReader(), typeof(IEnumerable<AsyncOperation>));
				}
				if(source.TryGetProperty("Metadata", out token) && token.Type != JTokenType.Null)
				{
					Metadata = (IEnumerable<Metadata>)serializer.Deserialize(token.CreateReader(), typeof(IEnumerable<Metadata>));
				}
			}
		}
	}
}