// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2014 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using ShareFile.Api.Models;
using ShareFile.Api.Client;

namespace ShareFile.Api.Client
{
	public class MetadataEntity : ODataEntityBase
	{
		/// <summary>
		/// Get Metadata by ID
		/// </summary>
		/// <remarks>
		/// Retrieves a single Metadata entry that has a given Name for a given Item.
		/// Note:
		/// 'GET https://account.sf-api.com/sf/v3/Items(parentid)/Metadata(id)' is unsupported.
		/// Current routing doesn't support the URI to retrieve a single Metadata enntry since it is aliased with the GetByItem feed.
		/// So for now we support only the same syntax as for AccessControls, i.e. .../Metadata(name=name,itemid=itemid)
		/// </remarks>
		/// <param name="name"></param>
		/// <param name="itemid"></param>
		/// <returns>
		/// A single Metadata object matching the query
		/// </returns>
		public IQuery<Metadata> Get(string name, string itemid)
		{
			IQuery<Metadata> query = new IQuery<Metadata>(Client);
			query.From("Metadata");
			query.Ids("name", name);
			query.Ids("itemid", itemid);
			query.HttpMethod = "GET";
			return query;
		}

		/// <summary>
		/// Get Metadata List By Item
		/// </summary>
		/// <remarks>
		/// Retrieves the Metadata List for a given Item.
		/// </remarks>
		/// <param name="id"></param>
		/// <returns>
		/// The Metadata list of the given object ID.
		/// </returns>
		public IQuery<ODataFeed<Metadata>> GetByItem(string id)
		{
			IQuery<ODataFeed<Metadata>> query = new IQuery<ODataFeed<Metadata>>(Client);
			query.From("Items");
			query.Action("Metadata");
			query.Ids(id);
			query.HttpMethod = "GET";
			return query;
		}

		/// <summary>
		/// Create Metadata
		/// </summary>
		/// <example>
		/// {
		/// "Name":"metadata name",
		/// "Value":"metadata value"
		/// }
		/// </example>
		/// <remarks>
		/// Creates a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name already exists for this Item.
		/// </remarks>
		/// <param name="id"></param>
		/// <returns>
		/// The created Metadata object
		/// </returns>
		public IQuery<Metadata> CreateByItem(string id, Metadata metadata)
		{
			IQuery<Metadata> query = new IQuery<Metadata>(Client);
			query.From("Items");
			query.Action("Metadata");
			query.Ids(id);
			query.Body = metadata;
			query.HttpMethod = "POST";
			return query;
		}

		/// <summary>
		/// Update Metadata
		/// </summary>
		/// <example>
		/// {
		/// "Value":"metadata value"
		/// }
		/// </example>
		/// <remarks>
		/// Updates a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name doesn't exist for this Item.
		/// </remarks>
		/// <param name="id"></param>
		/// <param name="metadataId"></param>
		/// <returns>
		/// The updated Metadata object
		/// </returns>
		public IQuery<Metadata> UpdateByItem(string metadataId, Metadata metadata)
		{
			IQuery<Metadata> query = new IQuery<Metadata>(Client);
			query.From("Items");
			query.Action("Metadata");
			query.Ids(metadataId);
			query.Body = metadata;
			query.HttpMethod = "PATCH";
			return query;
		}

		/// <summary>
		/// Update Metadata
		/// </summary>
		/// <example>
		/// {
		/// "Value":"metadata value"
		/// }
		/// </example>
		/// <remarks>
		/// Updates a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name doesn't exist for this Item.
		/// </remarks>
		/// <param name="name"></param>
		/// <param name="itemid"></param>
		/// <returns>
		/// The updated Metadata object
		/// </returns>
		public IQuery<Metadata> Update(string name, string itemid, Metadata metadata)
		{
			IQuery<Metadata> query = new IQuery<Metadata>(Client);
			query.From("Metadata");
			query.Ids("name", name);
			query.Ids("itemid", itemid);
			query.Body = metadata;
			query.HttpMethod = "GET";
			return query;
		}

		/// <summary>
		/// Delete Metadata
		/// </summary>
		/// <remarks>
		/// Deletes a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name doesn't exist for this Item.
		/// </remarks>
		/// <param name="id"></param>
		/// <param name="metadataId"></param>
		/// <returns>
		/// (no data)
		/// </returns>
		public IQuery DeleteByItem(string metadataId,  id = )
		{
			IQuery query = new IQuery(Client);
			query.From("Items");
			query.Action("Metadata");
			query.Ids(metadataId);
			query.ActionIds(id);
			query.HttpMethod = "DELETE";
			return query;
		}

		/// <summary>
		/// Delete Metadata
		/// </summary>
		/// <remarks>
		/// Deletes a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name doesn't exist for this Item.
		/// </remarks>
		/// <param name="name"></param>
		/// <param name="itemid"></param>
		/// <returns>
		/// (no data)
		/// </returns>
		public IQuery Delete(string name, string itemid)
		{
			IQuery query = new IQuery(Client);
			query.From("Metadata");
			query.Ids("name", name);
			query.Ids("itemid", itemid);
			query.HttpMethod = "DELETE";
			return query;
		}

	}
}
