// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2015 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using ShareFile.Api.Client.Extensions;

namespace ShareFile.Api.Models 
{
#if ShareFile
	public class EncryptedEmail : ODataObject 
	{

		public string Subject { get; set; }

		public IEnumerable<EncryptedEmailRecipient> ToRecipients { get; set; }

		public IEnumerable<EncryptedEmailRecipient> CcRecipients { get; set; }

		public IEnumerable<EncryptedEmailRecipient> BccRecipients { get; set; }

		public EncryptedEmail OriginalEncryptedEmail { get; set; }

		public EncryptedEmail InReplyTo { get; set; }

		public User Sender { get; set; }

		public Share Share { get; set; }

		public ShareAlias ShareAlias { get; set; }

		public Uri Uri { get; set; }

		public DateTime? SentDate { get; set; }

		public override void Copy(ODataObject source, JsonSerializer serializer)
		{
			if(source == null || serializer == null) return;
			base.Copy(source, serializer);

			var typedSource = source as EncryptedEmail;
			if(typedSource != null)
			{
				Subject = typedSource.Subject;
				ToRecipients = typedSource.ToRecipients;
				CcRecipients = typedSource.CcRecipients;
				BccRecipients = typedSource.BccRecipients;
				OriginalEncryptedEmail = typedSource.OriginalEncryptedEmail;
				InReplyTo = typedSource.InReplyTo;
				Sender = typedSource.Sender;
				Share = typedSource.Share;
				ShareAlias = typedSource.ShareAlias;
				Uri = typedSource.Uri;
				SentDate = typedSource.SentDate;
			}
			else
			{
				JToken token;
				if(source.TryGetProperty("Subject", out token) && token.Type != JTokenType.Null)
				{
					Subject = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("ToRecipients", out token) && token.Type != JTokenType.Null)
				{
					ToRecipients = (IEnumerable<EncryptedEmailRecipient>)serializer.Deserialize(token.CreateReader(), typeof(IEnumerable<EncryptedEmailRecipient>));
				}
				if(source.TryGetProperty("CcRecipients", out token) && token.Type != JTokenType.Null)
				{
					CcRecipients = (IEnumerable<EncryptedEmailRecipient>)serializer.Deserialize(token.CreateReader(), typeof(IEnumerable<EncryptedEmailRecipient>));
				}
				if(source.TryGetProperty("BccRecipients", out token) && token.Type != JTokenType.Null)
				{
					BccRecipients = (IEnumerable<EncryptedEmailRecipient>)serializer.Deserialize(token.CreateReader(), typeof(IEnumerable<EncryptedEmailRecipient>));
				}
				if(source.TryGetProperty("OriginalEncryptedEmail", out token) && token.Type != JTokenType.Null)
				{
					OriginalEncryptedEmail = (EncryptedEmail)serializer.Deserialize(token.CreateReader(), typeof(EncryptedEmail));
				}
				if(source.TryGetProperty("InReplyTo", out token) && token.Type != JTokenType.Null)
				{
					InReplyTo = (EncryptedEmail)serializer.Deserialize(token.CreateReader(), typeof(EncryptedEmail));
				}
				if(source.TryGetProperty("Sender", out token) && token.Type != JTokenType.Null)
				{
					Sender = (User)serializer.Deserialize(token.CreateReader(), typeof(User));
				}
				if(source.TryGetProperty("Share", out token) && token.Type != JTokenType.Null)
				{
					Share = (Share)serializer.Deserialize(token.CreateReader(), typeof(Share));
				}
				if(source.TryGetProperty("ShareAlias", out token) && token.Type != JTokenType.Null)
				{
					ShareAlias = (ShareAlias)serializer.Deserialize(token.CreateReader(), typeof(ShareAlias));
				}
				if(source.TryGetProperty("Uri", out token) && token.Type != JTokenType.Null)
				{
					Uri = (Uri)serializer.Deserialize(token.CreateReader(), typeof(Uri));
				}
				if(source.TryGetProperty("SentDate", out token) && token.Type != JTokenType.Null)
				{
					SentDate = (DateTime?)serializer.Deserialize(token.CreateReader(), typeof(DateTime?));
				}
			}
		}
	}
#endif
}