// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2014 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using ShareFile.Api.Models;
using ShareFile.Api.Client;
using ShareFile.Api.Client.Requests;
using ShareFile.Api.Client.Extensions;

namespace ShareFile.Api.Client.Entities
{
    public interface IAzureSBTopicsEntityInternal : IEntityBase
    {
        
        /// <summary>
        /// Check if Topic exists in namespace
        /// </summary>
        /// <param name="parentUrl"></param>
        IQuery<AzureSBTopicsResponse> CheckIfTopicExists(Uri parentUrl);
        
        /// <summary>
        /// Create Topic in namespace
        /// During Topic creation, it creates Manager, Send and Listen access policies
        /// Send policy will be used by Publishers and Listens policy will be used by Subscribers
        /// </summary>
        /// <param name="parentUrl"></param>
        /// <returns>
        /// True if creation successful, else returns false
        /// </returns>
        IQuery CreateTopic(Uri parentUrl);
        
        /// <summary>
        /// Get restricted end-point credentials on Topic
        /// </summary>
        /// <param name="parentUrl"></param>
        /// <param name="id"></param>
        /// <returns>
        /// Associate end-point credentials for specified policy
        /// </returns>
        IQuery<AzureSBTopicsEndPointInfo> GetTopicEndPoint(Uri parentUrl, string id);
        
        /// <summary>
        /// Regenerate Topics Access policies
        /// </summary>
        /// <param name="parentUrl"></param>
        /// <returns>
        /// Returns true if succeed, else returns false
        /// </returns>
        IQuery RegenerateTopicCredentials(Uri parentUrl);
        
        /// <summary>
        /// Delete Topic from namespace
        /// </summary>
        /// <param name="parentUrl"></param>
        IQuery DeleteTopic(Uri parentUrl);
    }

    public class AzureSBTopicsEntityInternal : EntityBase, IAzureSBTopicsEntityInternal
    {
        public AzureSBTopicsEntityInternal (IShareFileClient client)
            : base (client, "AzureSBTopics")
        { }
        
        
        /// <summary>
        /// Check if Topic exists in namespace
        /// </summary>
        /// <param name="parentUrl"></param>
        public IQuery<AzureSBTopicsResponse> CheckIfTopicExists(Uri parentUrl)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<AzureSBTopicsResponse>(Client);
		    sfApiQuery.Action("CheckIfTopicExists");
            sfApiQuery.Uri(parentUrl);
            sfApiQuery.HttpMethod = "GET";	
		    return sfApiQuery;
        }
        
        /// <summary>
        /// Create Topic in namespace
        /// During Topic creation, it creates Manager, Send and Listen access policies
        /// Send policy will be used by Publishers and Listens policy will be used by Subscribers
        /// </summary>
        /// <param name="parentUrl"></param>
        /// <returns>
        /// True if creation successful, else returns false
        /// </returns>
        public IQuery CreateTopic(Uri parentUrl)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query(Client);
		    sfApiQuery.Action("CreateTopic");
            sfApiQuery.Uri(parentUrl);
            sfApiQuery.HttpMethod = "POST";	
		    return sfApiQuery;
        }
        
        /// <summary>
        /// Get restricted end-point credentials on Topic
        /// </summary>
        /// <param name="parentUrl"></param>
        /// <param name="id"></param>
        /// <returns>
        /// Associate end-point credentials for specified policy
        /// </returns>
        public IQuery<AzureSBTopicsEndPointInfo> GetTopicEndPoint(Uri parentUrl, string id)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<AzureSBTopicsEndPointInfo>(Client);
		    sfApiQuery.Action("GetTopicEndPoint");
            sfApiQuery.Uri(parentUrl);
            sfApiQuery.ActionIds(id);
            sfApiQuery.HttpMethod = "GET";	
		    return sfApiQuery;
        }
        
        /// <summary>
        /// Regenerate Topics Access policies
        /// </summary>
        /// <param name="parentUrl"></param>
        /// <returns>
        /// Returns true if succeed, else returns false
        /// </returns>
        public IQuery RegenerateTopicCredentials(Uri parentUrl)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query(Client);
		    sfApiQuery.Action("RegenerateTopicCredentials");
            sfApiQuery.Uri(parentUrl);
            sfApiQuery.HttpMethod = "POST";	
		    return sfApiQuery;
        }
        
        /// <summary>
        /// Delete Topic from namespace
        /// </summary>
        /// <param name="parentUrl"></param>
        public IQuery DeleteTopic(Uri parentUrl)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query(Client);
		    sfApiQuery.Action("DeleteTopic");
            sfApiQuery.Uri(parentUrl);
            sfApiQuery.HttpMethod = "DELETE";	
		    return sfApiQuery;
        }
    }
}