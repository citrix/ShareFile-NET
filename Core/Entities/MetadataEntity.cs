// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2015 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using ShareFile.Api.Models;
using ShareFile.Api.Client;
using ShareFile.Api.Client.Requests;
using ShareFile.Api.Client.Extensions;

namespace ShareFile.Api.Client.Entities
{
    public interface IMetadataEntity : IEntityBase
    {
        
        /// <summary>
        /// Get Metadata by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a single Metadata entry that has a given Name for a given Item.
        /// Note:
        /// 'GET https://account.sf-api.com/sf/v3/Items(parentid)/Metadata(id)' is unsupported.
        /// Current routing doesn't support the URI to retrieve a single Metadata enntry since it is aliased with the GetByItem feed.
        /// So for now we support only the same syntax as for AccessControls, i.e. .../Metadata(name=name,itemid=itemid)
        /// </remarks>
        /// <returns>
        /// A single Metadata object matching the query
        /// </returns>
        IQuery<Metadata> Get(Uri url);
        
        /// <summary>
        /// Get Metadata List By Item
        /// </summary>
        /// <remarks>
        /// Retrieves the Metadata List for a given Item.
        /// </remarks>
        /// <param name="url"></param>
        /// <returns>
        /// The Metadata list of the given object ID.
        /// </returns>
        IQuery<ODataFeed<Metadata>> GetByItem(Uri url);
        
        /// <summary>
        /// Create Metadata
        /// </summary>
        /// <example>
        /// {
        /// "Name":"metadata name",
        /// "Value":"metadata value"
        /// }
        /// </example>
        /// <remarks>
        /// Creates a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name already exists for this Item.
        /// </remarks>
        /// <param name="url"></param>
        /// <returns>
        /// The created Metadata object
        /// </returns>
        IQuery<Metadata> CreateByItem(Uri url, Metadata metadata);
        
        /// <summary>
        /// Update Metadata
        /// </summary>
        /// <example>
        /// {
        /// "Value":"metadata value"
        /// }
        /// </example>
        /// <remarks>
        /// Updates a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name doesn't exist for this Item.
        /// </remarks>
        /// <param name="url"></param>
        /// <param name="metadataId"></param>
        /// <returns>
        /// The updated Metadata object
        /// </returns>
        IQuery<Metadata> UpdateByItem(Uri url, string metadataId, Metadata metadata);
        
        /// <summary>
        /// Update Metadata
        /// </summary>
        /// <example>
        /// {
        /// "Value":"metadata value"
        /// }
        /// </example>
        /// <remarks>
        /// Updates a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name doesn't exist for this Item.
        /// </remarks>
        /// <returns>
        /// The updated Metadata object
        /// </returns>
        IQuery<Metadata> Update(Uri url, Metadata metadata);
        
        /// <summary>
        /// Delete Metadata
        /// </summary>
        /// <remarks>
        /// Deletes a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name doesn't exist for this Item.
        /// </remarks>
        /// <param name="url"></param>
        /// <param name="metadataId"></param>
        /// <returns>
        /// (no data)
        /// </returns>
        IQuery DeleteByItem(Uri url, string metadataId);
        
        /// <summary>
        /// Delete Metadata
        /// </summary>
        /// <remarks>
        /// Deletes a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name doesn't exist for this Item.
        /// </remarks>
        /// <returns>
        /// (no data)
        /// </returns>
        IQuery Delete(Uri url);
    }

    public class MetadataEntity : EntityBase, IMetadataEntity
    {
        public MetadataEntity (IShareFileClient client)
            : base (client, "Metadata")
        { }
        
        
        /// <summary>
        /// Get Metadata by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a single Metadata entry that has a given Name for a given Item.
        /// Note:
        /// 'GET https://account.sf-api.com/sf/v3/Items(parentid)/Metadata(id)' is unsupported.
        /// Current routing doesn't support the URI to retrieve a single Metadata enntry since it is aliased with the GetByItem feed.
        /// So for now we support only the same syntax as for AccessControls, i.e. .../Metadata(name=name,itemid=itemid)
        /// </remarks>
        /// <returns>
        /// A single Metadata object matching the query
        /// </returns>
        public IQuery<Metadata> Get(Uri url)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<Metadata>(Client);
            sfApiQuery.Uri(url);
            sfApiQuery.HttpMethod = "GET";	
		    return sfApiQuery;
        }
        
        /// <summary>
        /// Get Metadata List By Item
        /// </summary>
        /// <remarks>
        /// Retrieves the Metadata List for a given Item.
        /// </remarks>
        /// <param name="url"></param>
        /// <returns>
        /// The Metadata list of the given object ID.
        /// </returns>
        public IQuery<ODataFeed<Metadata>> GetByItem(Uri url)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<ODataFeed<Metadata>>(Client);
		    sfApiQuery.Action("Metadata");
            sfApiQuery.Uri(url);
            sfApiQuery.HttpMethod = "GET";	
		    return sfApiQuery;
        }
        
        /// <summary>
        /// Create Metadata
        /// </summary>
        /// <example>
        /// {
        /// "Name":"metadata name",
        /// "Value":"metadata value"
        /// }
        /// </example>
        /// <remarks>
        /// Creates a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name already exists for this Item.
        /// </remarks>
        /// <param name="url"></param>
        /// <returns>
        /// The created Metadata object
        /// </returns>
        public IQuery<Metadata> CreateByItem(Uri url, Metadata metadata)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<Metadata>(Client);
		    sfApiQuery.Action("Metadata");
            sfApiQuery.Uri(url);
            sfApiQuery.Body = metadata;
            sfApiQuery.HttpMethod = "POST";	
		    return sfApiQuery;
        }
        
        /// <summary>
        /// Update Metadata
        /// </summary>
        /// <example>
        /// {
        /// "Value":"metadata value"
        /// }
        /// </example>
        /// <remarks>
        /// Updates a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name doesn't exist for this Item.
        /// </remarks>
        /// <param name="url"></param>
        /// <param name="metadataId"></param>
        /// <returns>
        /// The updated Metadata object
        /// </returns>
        public IQuery<Metadata> UpdateByItem(Uri url, string metadataId, Metadata metadata)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<Metadata>(Client);
		    sfApiQuery.Action("Metadata");
            sfApiQuery.Uri(url);
            sfApiQuery.ActionIds(metadataId);
            sfApiQuery.Body = metadata;
            sfApiQuery.HttpMethod = "PATCH";	
		    return sfApiQuery;
        }
        
        /// <summary>
        /// Update Metadata
        /// </summary>
        /// <example>
        /// {
        /// "Value":"metadata value"
        /// }
        /// </example>
        /// <remarks>
        /// Updates a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name doesn't exist for this Item.
        /// </remarks>
        /// <returns>
        /// The updated Metadata object
        /// </returns>
        public IQuery<Metadata> Update(Uri url, Metadata metadata)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<Metadata>(Client);
            sfApiQuery.Uri(url);
            sfApiQuery.Body = metadata;
            sfApiQuery.HttpMethod = "GET";	
		    return sfApiQuery;
        }
        
        /// <summary>
        /// Delete Metadata
        /// </summary>
        /// <remarks>
        /// Deletes a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name doesn't exist for this Item.
        /// </remarks>
        /// <param name="url"></param>
        /// <param name="metadataId"></param>
        /// <returns>
        /// (no data)
        /// </returns>
        public IQuery DeleteByItem(Uri url, string metadataId)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query(Client);
		    sfApiQuery.Action("Metadata");
            sfApiQuery.Uri(url);
            sfApiQuery.ActionIds(metadataId);
            sfApiQuery.HttpMethod = "DELETE";	
		    return sfApiQuery;
        }
        
        /// <summary>
        /// Delete Metadata
        /// </summary>
        /// <remarks>
        /// Deletes a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name doesn't exist for this Item.
        /// </remarks>
        /// <returns>
        /// (no data)
        /// </returns>
        public IQuery Delete(Uri url)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query(Client);
            sfApiQuery.Uri(url);
            sfApiQuery.HttpMethod = "DELETE";	
		    return sfApiQuery;
        }
    }
}