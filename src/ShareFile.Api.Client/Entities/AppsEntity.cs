// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2018 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using ShareFile.Api.Client;
using ShareFile.Api.Client.Extensions;
using ShareFile.Api.Client.Models;
using ShareFile.Api.Client.Requests;


namespace ShareFile.Api.Client.Entities
{
    public interface IAppsEntity : IEntityBase
    {
        
        /// <summary>
        /// Get Apps for Current User
        /// </summary>
        /// <returns>
        /// A feed of ConnectedApp objects
        /// </returns>
        IQuery<ODataFeed<ConnectedApp>> Get();
        
        /// <summary>
        /// Get Apps for given User
        /// </summary>
        /// <param name="userUrl"></param>
        /// <returns>
        /// A feed of ConnectedApp objects
        /// </returns>
        IQuery<ODataFeed<ConnectedApp>> GetByUser(Uri userUrl);
        IQuery<ConnectedApp> Get(Uri url);
        
        /// <summary>
        /// Get App by ID
        /// </summary>
        /// <param name="userUrl"></param>
        /// <param name="appid"></param>
        /// <returns>
        /// ConnectedApp
        /// </returns>
        IQuery<ConnectedApp> GetByUser(Uri userUrl, string appid);
        
        /// <summary>
        /// Revoke App access for Current User
        /// </summary>
        /// <param name="userid"></param>
        /// <param name="appUrl"></param>
        /// <returns>
        /// no data on success
        /// </returns>
        IQuery Delete(Uri appUrl);
        
        /// <summary>
        /// Revoke App access for a given User
        /// </summary>
        /// <param name="userUrl"></param>
        /// <param name="appid"></param>
        /// <returns>
        /// no data on success
        /// </returns>
        IQuery DeleteByUser(Uri userUrl, string appid);
        
        /// <summary>
        /// Get all Two Factor Authentication Apps for the Current User
        /// </summary>
        /// <returns>
        /// A feed of TwoFactorAuthApp objects
        /// </returns>
        IQuery<ODataFeed<TwoFactorAuthApp>> TFA();
        IQuery<ODataFeed<TwoFactorAuthApp>> GetTFAByUser(Uri url);
        
        /// <summary>
        /// Get Two Factor Authentication App by ID for the Current User
        /// </summary>
        /// <param name="appid"></param>
        /// <returns>
        /// TwoFactorAuthApp
        /// </returns>
        IQuery<TwoFactorAuthApp> TFA(string appid);
        IQuery<TwoFactorAuthApp> GetTFAByUser(Uri url, string tfaAppId);
        
        /// <summary>
        /// Revoke Two Factor Auth App by ID
        /// </summary>
        /// <param name="tfaAppId"></param>
        /// <returns>
        /// no data on success
        /// </returns>
        IQuery DeleteTFA(string tfaAppId);
        
        /// <summary>
        /// Revoke Two Factor Auth App by ID
        /// </summary>
        /// <param name="userUrl"></param>
        /// <param name="tfaAppId"></param>
        /// <returns>
        /// no data on success
        /// </returns>
        IQuery DeleteTFA(Uri userUrl, string tfaAppId);
    }

    public class AppsEntity : EntityBase, IAppsEntity
    {
        public AppsEntity (IShareFileClient client)
            : base (client, "Apps")
        { }
        
        
        /// <summary>
        /// Get Apps for Current User
        /// </summary>
        /// <returns>
        /// A feed of ConnectedApp objects
        /// </returns>
        public IQuery<ODataFeed<ConnectedApp>> Get()
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<ODataFeed<ConnectedApp>>(Client);
            sfApiQuery.From("Apps");
            sfApiQuery.HttpMethod = "GET";	
            return sfApiQuery;
        }
        
        /// <summary>
        /// Get Apps for given User
        /// </summary>
        /// <param name="userUrl"></param>
        /// <returns>
        /// A feed of ConnectedApp objects
        /// </returns>
        public IQuery<ODataFeed<ConnectedApp>> GetByUser(Uri userUrl)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<ODataFeed<ConnectedApp>>(Client);
            sfApiQuery.Action("Apps");
            sfApiQuery.Uri(userUrl);
            sfApiQuery.HttpMethod = "GET";	
            return sfApiQuery;
        }
        public IQuery<ConnectedApp> Get(Uri url)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<ConnectedApp>(Client);
            sfApiQuery.Uri(url);
            sfApiQuery.HttpMethod = "GET";	
            return sfApiQuery;
        }
        
        /// <summary>
        /// Get App by ID
        /// </summary>
        /// <param name="userUrl"></param>
        /// <param name="appid"></param>
        /// <returns>
        /// ConnectedApp
        /// </returns>
        public IQuery<ConnectedApp> GetByUser(Uri userUrl, string appid)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<ConnectedApp>(Client);
            sfApiQuery.Action("Apps");
            sfApiQuery.Uri(userUrl);
            sfApiQuery.ActionIds(appid);
            sfApiQuery.HttpMethod = "GET";	
            return sfApiQuery;
        }
        
        /// <summary>
        /// Revoke App access for Current User
        /// </summary>
        /// <param name="userid"></param>
        /// <param name="appUrl"></param>
        /// <returns>
        /// no data on success
        /// </returns>
        public IQuery Delete(Uri appUrl)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query(Client);
            sfApiQuery.Uri(appUrl);
            sfApiQuery.HttpMethod = "DELETE";	
            return sfApiQuery;
        }
        
        /// <summary>
        /// Revoke App access for a given User
        /// </summary>
        /// <param name="userUrl"></param>
        /// <param name="appid"></param>
        /// <returns>
        /// no data on success
        /// </returns>
        public IQuery DeleteByUser(Uri userUrl, string appid)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query(Client);
            sfApiQuery.Action("Apps");
            sfApiQuery.Uri(userUrl);
            sfApiQuery.ActionIds(appid);
            sfApiQuery.HttpMethod = "DELETE";	
            return sfApiQuery;
        }
        
        /// <summary>
        /// Get all Two Factor Authentication Apps for the Current User
        /// </summary>
        /// <returns>
        /// A feed of TwoFactorAuthApp objects
        /// </returns>
        public IQuery<ODataFeed<TwoFactorAuthApp>> TFA()
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<ODataFeed<TwoFactorAuthApp>>(Client);
            sfApiQuery.From("Apps");
            sfApiQuery.Action("TFA");
            sfApiQuery.HttpMethod = "GET";	
            return sfApiQuery;
        }
        public IQuery<ODataFeed<TwoFactorAuthApp>> GetTFAByUser(Uri url)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<ODataFeed<TwoFactorAuthApp>>(Client);
            sfApiQuery.Action("TFA");
            sfApiQuery.Uri(url);
            sfApiQuery.HttpMethod = "GET";	
            return sfApiQuery;
        }
        
        /// <summary>
        /// Get Two Factor Authentication App by ID for the Current User
        /// </summary>
        /// <param name="appid"></param>
        /// <returns>
        /// TwoFactorAuthApp
        /// </returns>
        public IQuery<TwoFactorAuthApp> TFA(string appid)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<TwoFactorAuthApp>(Client);
            sfApiQuery.From("Apps");
            sfApiQuery.Action("TFA");
            sfApiQuery.ActionIds(appid);
            sfApiQuery.HttpMethod = "GET";	
            return sfApiQuery;
        }
        public IQuery<TwoFactorAuthApp> GetTFAByUser(Uri url, string tfaAppId)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<TwoFactorAuthApp>(Client);
            sfApiQuery.Action("TFA");
            sfApiQuery.Uri(url);
            sfApiQuery.ActionIds(tfaAppId);
            sfApiQuery.HttpMethod = "GET";	
            return sfApiQuery;
        }
        
        /// <summary>
        /// Revoke Two Factor Auth App by ID
        /// </summary>
        /// <param name="tfaAppId"></param>
        /// <returns>
        /// no data on success
        /// </returns>
        public IQuery DeleteTFA(string tfaAppId)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query(Client);
            sfApiQuery.From("Apps");
            sfApiQuery.Action("TFA");
            sfApiQuery.ActionIds(tfaAppId);
            sfApiQuery.HttpMethod = "DELETE";	
            return sfApiQuery;
        }
        
        /// <summary>
        /// Revoke Two Factor Auth App by ID
        /// </summary>
        /// <param name="userUrl"></param>
        /// <param name="tfaAppId"></param>
        /// <returns>
        /// no data on success
        /// </returns>
        public IQuery DeleteTFA(Uri userUrl, string tfaAppId)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query(Client);
            sfApiQuery.Action("TFA");
            sfApiQuery.Uri(userUrl);
            sfApiQuery.ActionIds(tfaAppId);
            sfApiQuery.HttpMethod = "DELETE";	
            return sfApiQuery;
        }
    }
}
