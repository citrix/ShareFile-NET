// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2014 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Newtonsoft.Json;

namespace ShareFile.Api.Models 
{
	public class AsyncOperation : ODataObject 
	{
		/// <summary>
		/// Operation type
		/// </summary>
		public SafeEnum<AsyncOperationType> Operation { get; set; }

		/// <summary>
		/// ShareFile Account
		/// </summary>
		public Account Account { get; set; }

		/// <summary>
		/// Represents the Zone that is driving the asynchronous operation process. It
		/// may be null if the operation is driven by the control plane.
		/// </summary>
		public Zone AuthorityZone { get; set; }

		/// <summary>
		/// Source Item for the operation.
		/// </summary>
		public Item Source { get; set; }

		/// <summary>
		/// User that initiated the operation
		/// </summary>
		public User User { get; set; }

		/// <summary>
		/// Operation creation date
		/// </summary>
		public DateTime? CreationDate { get; set; }

		/// <summary>
		/// Operation state. States 'Created' and 'Scheduled' indicate the operation is
		/// in progress; States 'Success' and 'Failure' indicate the operatoin is finalized
		/// </summary>
		public SafeEnum<AsyncOperationState> State { get; set; }

		/// <summary>
		/// Last time the operation state was modified
		/// </summary>
		public DateTime? UpdateDate { get; set; }

		/// <summary>
		/// Target Item for the operation.
		/// </summary>
		public Item Target { get; set; }

		/// <summary>
		/// Batch Identifier for an asynchronous operation that includes multiple Items - for
		/// example, a recursive Copy will create a single AsyncOp instance per file, all sharing
		/// the same BatchID
		/// </summary>
		public string BatchID { get; set; }

		/// <summary>
		/// Item ID used as source for the Batch operation
		/// </summary>
		public string BatchSourceID { get; set; }

		/// <summary>
		/// Item ID used as target for the Batch operation
		/// </summary>
		public string BatchTargetID { get; set; }

	}
}