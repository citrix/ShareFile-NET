// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2018 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Net;

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using ShareFile.Api.Client.Extensions;
using ShareFile.Api.Client.Exceptions;

namespace ShareFile.Api.Client.Models 
{
	/// <summary>
	/// Represents a user's application that has been connected to the Account
	/// </summary>
	public class ConnectedApp : ODataObject 
	{
		/// <summary>
		/// Name of the application
		/// </summary>
		public string Name { get; set; }
		/// <summary>
		/// Used to determine which official ShareFile App this is, if any
		/// </summary>
		public SafeEnum<AppCodes> AppCode { get; set; }
		/// <summary>
		/// The last time this client was used to login to the account
		/// </summary>
		public DateTime? LastLoginDate { get; set; }
		/// <summary>
		/// The user this app mapping is for
		/// </summary>
		public string UserId { get; set; }
		/// <summary>
		/// Whether or not this App can still be used
		/// </summary>
		public bool Active { get; set; }
		/// <summary>
		/// Devices associated with this App
		/// </summary>
		public IEnumerable<DeviceUser> Devices { get; set; }

		public override void Copy(ODataObject source, JsonSerializer serializer)
		{
			if(source == null || serializer == null) return;
			base.Copy(source, serializer);

			var typedSource = source as ConnectedApp;
			if(typedSource != null)
			{
				Name = typedSource.Name;
				AppCode = typedSource.AppCode;
				LastLoginDate = typedSource.LastLoginDate;
				UserId = typedSource.UserId;
				Active = typedSource.Active;
				Devices = typedSource.Devices;
			}
			else
			{
				JToken token;
				if(source.TryGetProperty("Name", out token) && token.Type != JTokenType.Null)
				{
					Name = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("AppCode", out token) && token.Type != JTokenType.Null)
				{
					AppCode = (SafeEnum<AppCodes>)serializer.Deserialize(token.CreateReader(), typeof(SafeEnum<AppCodes>));
				}
				if(source.TryGetProperty("LastLoginDate", out token) && token.Type != JTokenType.Null)
				{
					LastLoginDate = (DateTime?)serializer.Deserialize(token.CreateReader(), typeof(DateTime?));
				}
				if(source.TryGetProperty("UserId", out token) && token.Type != JTokenType.Null)
				{
					UserId = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("Active", out token) && token.Type != JTokenType.Null)
				{
					Active = (bool)serializer.Deserialize(token.CreateReader(), typeof(bool));
				}
				if(source.TryGetProperty("Devices", out token) && token.Type != JTokenType.Null)
				{
					Devices = (IEnumerable<DeviceUser>)serializer.Deserialize(token.CreateReader(), typeof(IEnumerable<DeviceUser>));
				}
			}
		}
	}
}