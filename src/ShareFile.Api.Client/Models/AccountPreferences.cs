// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2018 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Net;

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using ShareFile.Api.Client.Extensions;
using ShareFile.Api.Client.Exceptions;

namespace ShareFile.Api.Client.Models 
{
#if !ShareFile
	/// <summary>
	/// The preferences an admin can set for a ShareFile Account.
	/// </summary>
	public class AccountPreferences : ODataObject 
	{
		public bool? EnableViewOnly { get; set; }
		public bool? EnableWatermarkOnViewOnly { get; set; }
		public bool? AllowProactiveNotifications { get; set; }
		public bool? ShowUserListToClients { get; set; }
		/// <summary>
		/// Enforce RequireLogin requirement for all Send Shares
		/// </summary>
		public bool? RequireLoginOnDownload { get; set; }
		/// <summary>
		/// Enforce RequireLogin requirement for all Request Shares
		/// </summary>
		public bool? RequireLoginOnUpload { get; set; }
		public bool? RequireLoginByDefault { get; set; }
		public bool? EnableClientSend { get; set; }
		public bool? EnableThumbnails { get; set; }
		public bool? EnableSSO { get; set; }
		public int? VirusStrictness { get; set; }
		public bool? EnableSfAdi { get; set; }
		public bool? EnableMultipleZones { get; set; }
		public Zone DefaultZone { get; set; }
		public bool? EnableVersioning { get; set; }
		public string SystemType { get; set; }
		public bool? EnableSync { get; set; }
		public bool? EnableSyncAutoUpdate { get; set; }
		public string SystemName { get; set; }
		public string HomeScreenName { get; set; }
		public bool? ShowTermsCheckbox { get; set; }
		public string TermsCheckboxText { get; set; }
		public int? TermsCheckboxStrictness { get; set; }
		public bool? RequireCompanyNameWithUserInfo { get; set; }
		public bool? EnableEditor { get; set; }
		public int? ShareIDMaxExpirationDays { get; set; }
		public bool? AdminIsSuperUser { get; set; }
		public bool? ShowFolderAccessList { get; set; }
		public bool? FromEmailIsShareFile { get; set; }
		public bool? UseAlternateSMTP { get; set; }
		public bool? ShowPasswordInEmail { get; set; }
		public string EmailPasswordText { get; set; }
		public bool? EnableSelfNotificationsUpload { get; set; }
		public bool? EnableSelfNotificationsDownload { get; set; }
		public bool? EnableUploadShareIDReceipt { get; set; }
		public int? DefaultConsolidatedNotificationInterval { get; set; }
		public int? ExpirationDays { get; set; }
		/// <summary>
		/// Valid Values: string.Empty, Name, CreatorNameShort, FileSize, CreationDate
		/// </summary>
		public string DefaultSortField { get; set; }
		/// <summary>
		/// Valid Values: string.Empty, asc, desc
		/// </summary>
		public string DefaultSortOrder { get; set; }
		public bool? DefaultIsVersioned { get; set; }
		public int? DefaultMaxVersions { get; set; }
		public string ViewOnlyWatermarkText { get; set; }
		public bool? EnableDocViewerPrinting { get; set; }
		public bool? EnableWatermarkedDownloads { get; set; }
		public bool? EnableTwoFactorAuth { get; set; }
		public int? LoginFailMaxAttempts { get; set; }
		public int? LoginFailLockoutSecs { get; set; }
		public string IPRestrictions { get; set; }
		public int? InactiveTimeoutMins { get; set; }
		public int? OAuth2RefreshTokenLifetimeMinutes { get; set; }
		public string PasswordRegEx { get; set; }
		public string PasswordRegExFormula { get; set; }
		public string PasswordRegExDescription { get; set; }
		public bool? EnableActivationLinks { get; set; }
		public bool? IsFINRA { get; set; }
		public bool? EnableOAuth { get; set; }
		public bool EnableQandA { get; set; }
		public bool? EnableQandATextInNotifications { get; set; }
		public SafeEnum<UXMode> UXMode { get; set; }
		public int? IndustryCode { get; set; }
		[Obsolete("Please use the MaxAgeDays field in PasswordPolicy field below.", false)] 
		public int PasswordMaxAgeDays { get; set; }
		[Obsolete("Please use the HistoryCount field in PasswordPolicy field below.", false)] 
		public int PasswordHistoryCount { get; set; }
		[Obsolete("Please use the MinimumLength field in PasswordPolicy field below.", false)] 
		public int MinimumLength { get; set; }
		[Obsolete("Please use the MinimumSpecialCharacters field in PasswordPolicy field below.", false)] 
		public int MinimumSpecialCharacters { get; set; }
		[Obsolete("Please use the MinimumNumeric field in PasswordPolicy field below.", false)] 
		public int MinimumNumeric { get; set; }
		[Obsolete("Please use the AllowedSpecialCharacters field in PasswordPolicy field below.", false)] 
		public string AllowedSpecialCharacters { get; set; }
		/// <summary>
		/// The password policy for the Account, specifying password strength, age, and reuse policies.
		/// </summary>
		public PasswordPolicy PasswordPolicy { get; set; }
		public bool? EnableWebDAV { get; set; }
		/// <summary>
		/// ShareFile allows users on certain plans to connect with your ShareFile account through WebDAV to various clients.
		/// ShareFile WebDAV is not available for Enterprise accounts. This tool is not compatible with on-premise storage and cannot be used with company credentials.
		/// This property describes WebDAV server information. It cannot be modified.
		/// </summary>
		public string WebDAVServerName { get; set; }
		public bool? EnableFTP { get; set; }
		public bool? EnableSFTP { get; set; }
		/// <summary>
		/// ShareFile is compatible with most well-known FTP clients, enabling you to connect to your ShareFile account directly from an FTP program.
		/// This property describes FTP server information. It cannot be modified.
		/// </summary>
		public string FtpServerName { get; set; }
		public bool? DisableMarketing { get; set; }
		public string VDRDocViewerURL { get; set; }
		public bool? EnableSMBConnectorForAccount { get; set; }
		public bool? EnablePersonalCloudConnectors { get; set; }
		public string AccountID { get; set; }
		public bool? EnableStorageZoneConnector { get; set; }
		public bool? HasAnyConnectorZones { get; set; }
		public bool? EnableENSForAccount { get; set; }
		public string ENSRecommendedPollingSyncInterval { get; set; }
		public string ENSRecommendedNotificationSyncInterval { get; set; }
		public int? ENSNotificationConfigurationCount { get; set; }
		public int? ENSFailSafePollingCount { get; set; }
		public int? ENSMaxNotificationSyncWaitCount { get; set; }
		public string TrustedDomains { get; set; }
		public bool? UseWebPopAsWebAppLogin { get; set; }
		public bool? EnableReportingV3 { get; set; }
		public bool? EnableEncryptedEmailForOutlookPlugin { get; set; }
		public bool? EnableDocPreviews { get; set; }
		public bool? DisablePasswordAutocompleteInWebApp { get; set; }
		public bool? EnableDesktopEditorForAccount { get; set; }
		public bool? UseStrictEmployeeDefinition { get; set; }
		public string EmployeeEmailDomains { get; set; }
		public bool? IsPremier { get; set; }
		public bool? DisableShareConnectForAccount { get; set; }
		public bool? DisablePrintToShareFile { get; set; }
		public bool? EnableWebAppConnectorBrowsing { get; set; }
		public bool? EnableStrictCrossdomainPolicy { get; set; }
		public bool? DisableScanSnap { get; set; }
		public bool? EnableFileCount { get; set; }
		public bool? EnableAntiVirus { get; set; }
		public bool? EnableFileLocking { get; set; }
		public bool? DisableWebAppAccess { get; set; }
		public bool? EnableCWC { get; set; }
		public bool? EnableEnterpriseArchive { get; set; }
		public DateTime? EnterpriseArchiveActivationDate { get; set; }
		public bool? EnableIntegrations { get; set; }
		public IEnumerable<SafeEnum<IntegrationProvider>> IntegrationProviders { get; set; }
		public bool? EnableBouncedEmailNotifications { get; set; }
		public bool? ShowDownloadLinkInUploadNotification { get; set; }
		public bool? AllowDownloadNotificationsWithoutAdmin { get; set; }
		public bool? EnableUserInvitations { get; set; }
		public bool? EnableClickTrails { get; set; }
		public bool? EnableFolderTemplates { get; set; }
		public bool? EnableFileDrops { get; set; }
		public int? SpamEmailThreshold { get; set; }
		public bool? EnableExternalEmailArchiving { get; set; }
		public bool? CreatorCanDelete { get; set; }
		/// <summary>
		/// Whether the account can store items in the ShareFile control plane (as opposed to
		/// Connectors). Driven by the EnableCloudStorage and EnablePrivateZones account preferences.
		/// </summary>
		public bool? CanStoreItemsInShareFile { get; set; }
		public bool? EnableHomeFolders { get; set; }
		public bool? EnableCustomBrandingUsesS3 { get; set; }
		public bool? EnablePromotions { get; set; }
		public bool? CanCreateMultiTenantZones { get; set; }
		public bool? EnableDLP { get; set; }
		public bool? EnableIRM { get; set; }
		public bool? EnableECMConnectors { get; set; }
		public bool? EnableOfficeOnlinePreviews { get; set; }
		public bool? EnableOfficeOnlineEditing { get; set; }
		/// <summary>
		/// Retention period of items in the recycle bin.
		/// </summary>
		public int? RecycleBinDays { get; set; }
		/// <summary>
		/// Maximum number of concurrent uploads and downloads a Sync client should be creating, at any one time.
		/// </summary>
		public int? SyncConcurrentTransferThreadsLimit { get; set; }
		public bool? HasPHI { get; set; }
		public bool? EnableCitrixManagedStorageZones { get; set; }
		public string PrimaryStorageBasePath { get; set; }
		public bool? EnableSharingConnectorItems { get; set; }
		public AccountMessageCode AccountMessageCode { get; set; }
		/// <summary>
		/// Enable use of Single Identity authentication service for this account
		/// </summary>
		public bool? EnableSingleIdentity { get; set; }
		/// <summary>
		/// Enable the use of the Drive Mapper utility for this account
		/// </summary>
		public bool? EnableDriveMapping { get; set; }
		/// <summary>
		/// Email notification locale. Values: Invariant, English, German, Spanish, French, Dutch, Chinese, Russian, Japanese, Korean, or Portuguese
		/// </summary>
		public SafeEnum<NotificationLocale> NotificationLocale { get; set; }
		/// <summary>
		/// If true, only Account Admins can update a folder's retention policy
		/// </summary>
		public bool? RetentionPolicySysAdminOnly { get; set; }
		public bool? EnableDocumentApprovalWorkflow { get; set; }
		/// <summary>
		/// Enable localization
		/// </summary>
		public bool? EnableLocalization { get; set; }
		public bool? EnableSecondaryDbContacts { get; set; }
		/// <summary>
		/// Can Account enable/disable quota limit feature
		/// </summary>
		public bool? IsQuotaLimitAvailable { get; set; }
		/// <summary>
		/// Has the account enabled the quota limit
		/// </summary>
		public bool? EnableQuotaLimit { get; set; }
		/// <summary>
		/// Quota Limit in gigabytes
		/// </summary>
		public int? QuotaLimitInGB { get; set; }
		/// <summary>
		/// Enables getting thumbnails from Renderer X service
		/// </summary>
		public bool? EnableRenderLibXThumbnails { get; set; }
		/// <summary>
		/// Enables getting thumbnails from RenderAPI service
		/// </summary>
		public bool? EnableRenderAPIThumbnails { get; set; }
		/// <summary>
		/// Enables Provided By Client Request List feature
		/// </summary>
		public bool? EnableRequestList { get; set; }
		public bool? IsArchiveAccount { get; set; }

		public override void Copy(ODataObject source, JsonSerializer serializer)
		{
			if(source == null || serializer == null) return;
			base.Copy(source, serializer);

			var typedSource = source as AccountPreferences;
			if(typedSource != null)
			{
				EnableViewOnly = typedSource.EnableViewOnly;
				EnableWatermarkOnViewOnly = typedSource.EnableWatermarkOnViewOnly;
				AllowProactiveNotifications = typedSource.AllowProactiveNotifications;
				ShowUserListToClients = typedSource.ShowUserListToClients;
				RequireLoginOnDownload = typedSource.RequireLoginOnDownload;
				RequireLoginOnUpload = typedSource.RequireLoginOnUpload;
				RequireLoginByDefault = typedSource.RequireLoginByDefault;
				EnableClientSend = typedSource.EnableClientSend;
				EnableThumbnails = typedSource.EnableThumbnails;
				EnableSSO = typedSource.EnableSSO;
				VirusStrictness = typedSource.VirusStrictness;
				EnableSfAdi = typedSource.EnableSfAdi;
				EnableMultipleZones = typedSource.EnableMultipleZones;
				DefaultZone = typedSource.DefaultZone;
				EnableVersioning = typedSource.EnableVersioning;
				SystemType = typedSource.SystemType;
				EnableSync = typedSource.EnableSync;
				EnableSyncAutoUpdate = typedSource.EnableSyncAutoUpdate;
				SystemName = typedSource.SystemName;
				HomeScreenName = typedSource.HomeScreenName;
				ShowTermsCheckbox = typedSource.ShowTermsCheckbox;
				TermsCheckboxText = typedSource.TermsCheckboxText;
				TermsCheckboxStrictness = typedSource.TermsCheckboxStrictness;
				RequireCompanyNameWithUserInfo = typedSource.RequireCompanyNameWithUserInfo;
				EnableEditor = typedSource.EnableEditor;
				ShareIDMaxExpirationDays = typedSource.ShareIDMaxExpirationDays;
				AdminIsSuperUser = typedSource.AdminIsSuperUser;
				ShowFolderAccessList = typedSource.ShowFolderAccessList;
				FromEmailIsShareFile = typedSource.FromEmailIsShareFile;
				UseAlternateSMTP = typedSource.UseAlternateSMTP;
				ShowPasswordInEmail = typedSource.ShowPasswordInEmail;
				EmailPasswordText = typedSource.EmailPasswordText;
				EnableSelfNotificationsUpload = typedSource.EnableSelfNotificationsUpload;
				EnableSelfNotificationsDownload = typedSource.EnableSelfNotificationsDownload;
				EnableUploadShareIDReceipt = typedSource.EnableUploadShareIDReceipt;
				DefaultConsolidatedNotificationInterval = typedSource.DefaultConsolidatedNotificationInterval;
				ExpirationDays = typedSource.ExpirationDays;
				DefaultSortField = typedSource.DefaultSortField;
				DefaultSortOrder = typedSource.DefaultSortOrder;
				DefaultIsVersioned = typedSource.DefaultIsVersioned;
				DefaultMaxVersions = typedSource.DefaultMaxVersions;
				ViewOnlyWatermarkText = typedSource.ViewOnlyWatermarkText;
				EnableDocViewerPrinting = typedSource.EnableDocViewerPrinting;
				EnableWatermarkedDownloads = typedSource.EnableWatermarkedDownloads;
				EnableTwoFactorAuth = typedSource.EnableTwoFactorAuth;
				LoginFailMaxAttempts = typedSource.LoginFailMaxAttempts;
				LoginFailLockoutSecs = typedSource.LoginFailLockoutSecs;
				IPRestrictions = typedSource.IPRestrictions;
				InactiveTimeoutMins = typedSource.InactiveTimeoutMins;
				OAuth2RefreshTokenLifetimeMinutes = typedSource.OAuth2RefreshTokenLifetimeMinutes;
				PasswordRegEx = typedSource.PasswordRegEx;
				PasswordRegExFormula = typedSource.PasswordRegExFormula;
				PasswordRegExDescription = typedSource.PasswordRegExDescription;
				EnableActivationLinks = typedSource.EnableActivationLinks;
				IsFINRA = typedSource.IsFINRA;
				EnableOAuth = typedSource.EnableOAuth;
				EnableQandA = typedSource.EnableQandA;
				EnableQandATextInNotifications = typedSource.EnableQandATextInNotifications;
				UXMode = typedSource.UXMode;
				IndustryCode = typedSource.IndustryCode;
				PasswordMaxAgeDays = typedSource.PasswordMaxAgeDays;
				PasswordHistoryCount = typedSource.PasswordHistoryCount;
				MinimumLength = typedSource.MinimumLength;
				MinimumSpecialCharacters = typedSource.MinimumSpecialCharacters;
				MinimumNumeric = typedSource.MinimumNumeric;
				AllowedSpecialCharacters = typedSource.AllowedSpecialCharacters;
				PasswordPolicy = typedSource.PasswordPolicy;
				EnableWebDAV = typedSource.EnableWebDAV;
				WebDAVServerName = typedSource.WebDAVServerName;
				EnableFTP = typedSource.EnableFTP;
				EnableSFTP = typedSource.EnableSFTP;
				FtpServerName = typedSource.FtpServerName;
				DisableMarketing = typedSource.DisableMarketing;
				VDRDocViewerURL = typedSource.VDRDocViewerURL;
				EnableSMBConnectorForAccount = typedSource.EnableSMBConnectorForAccount;
				EnablePersonalCloudConnectors = typedSource.EnablePersonalCloudConnectors;
				AccountID = typedSource.AccountID;
				EnableStorageZoneConnector = typedSource.EnableStorageZoneConnector;
				HasAnyConnectorZones = typedSource.HasAnyConnectorZones;
				EnableENSForAccount = typedSource.EnableENSForAccount;
				ENSRecommendedPollingSyncInterval = typedSource.ENSRecommendedPollingSyncInterval;
				ENSRecommendedNotificationSyncInterval = typedSource.ENSRecommendedNotificationSyncInterval;
				ENSNotificationConfigurationCount = typedSource.ENSNotificationConfigurationCount;
				ENSFailSafePollingCount = typedSource.ENSFailSafePollingCount;
				ENSMaxNotificationSyncWaitCount = typedSource.ENSMaxNotificationSyncWaitCount;
				TrustedDomains = typedSource.TrustedDomains;
				UseWebPopAsWebAppLogin = typedSource.UseWebPopAsWebAppLogin;
				EnableReportingV3 = typedSource.EnableReportingV3;
				EnableEncryptedEmailForOutlookPlugin = typedSource.EnableEncryptedEmailForOutlookPlugin;
				EnableDocPreviews = typedSource.EnableDocPreviews;
				DisablePasswordAutocompleteInWebApp = typedSource.DisablePasswordAutocompleteInWebApp;
				EnableDesktopEditorForAccount = typedSource.EnableDesktopEditorForAccount;
				UseStrictEmployeeDefinition = typedSource.UseStrictEmployeeDefinition;
				EmployeeEmailDomains = typedSource.EmployeeEmailDomains;
				IsPremier = typedSource.IsPremier;
				DisableShareConnectForAccount = typedSource.DisableShareConnectForAccount;
				DisablePrintToShareFile = typedSource.DisablePrintToShareFile;
				EnableWebAppConnectorBrowsing = typedSource.EnableWebAppConnectorBrowsing;
				EnableStrictCrossdomainPolicy = typedSource.EnableStrictCrossdomainPolicy;
				DisableScanSnap = typedSource.DisableScanSnap;
				EnableFileCount = typedSource.EnableFileCount;
				EnableAntiVirus = typedSource.EnableAntiVirus;
				EnableFileLocking = typedSource.EnableFileLocking;
				DisableWebAppAccess = typedSource.DisableWebAppAccess;
				EnableCWC = typedSource.EnableCWC;
				EnableEnterpriseArchive = typedSource.EnableEnterpriseArchive;
				EnterpriseArchiveActivationDate = typedSource.EnterpriseArchiveActivationDate;
				EnableIntegrations = typedSource.EnableIntegrations;
				IntegrationProviders = typedSource.IntegrationProviders;
				EnableBouncedEmailNotifications = typedSource.EnableBouncedEmailNotifications;
				ShowDownloadLinkInUploadNotification = typedSource.ShowDownloadLinkInUploadNotification;
				AllowDownloadNotificationsWithoutAdmin = typedSource.AllowDownloadNotificationsWithoutAdmin;
				EnableUserInvitations = typedSource.EnableUserInvitations;
				EnableClickTrails = typedSource.EnableClickTrails;
				EnableFolderTemplates = typedSource.EnableFolderTemplates;
				EnableFileDrops = typedSource.EnableFileDrops;
				SpamEmailThreshold = typedSource.SpamEmailThreshold;
				EnableExternalEmailArchiving = typedSource.EnableExternalEmailArchiving;
				CreatorCanDelete = typedSource.CreatorCanDelete;
				CanStoreItemsInShareFile = typedSource.CanStoreItemsInShareFile;
				EnableHomeFolders = typedSource.EnableHomeFolders;
				EnableCustomBrandingUsesS3 = typedSource.EnableCustomBrandingUsesS3;
				EnablePromotions = typedSource.EnablePromotions;
				CanCreateMultiTenantZones = typedSource.CanCreateMultiTenantZones;
				EnableDLP = typedSource.EnableDLP;
				EnableIRM = typedSource.EnableIRM;
				EnableECMConnectors = typedSource.EnableECMConnectors;
				EnableOfficeOnlinePreviews = typedSource.EnableOfficeOnlinePreviews;
				EnableOfficeOnlineEditing = typedSource.EnableOfficeOnlineEditing;
				RecycleBinDays = typedSource.RecycleBinDays;
				SyncConcurrentTransferThreadsLimit = typedSource.SyncConcurrentTransferThreadsLimit;
				HasPHI = typedSource.HasPHI;
				EnableCitrixManagedStorageZones = typedSource.EnableCitrixManagedStorageZones;
				PrimaryStorageBasePath = typedSource.PrimaryStorageBasePath;
				EnableSharingConnectorItems = typedSource.EnableSharingConnectorItems;
				AccountMessageCode = typedSource.AccountMessageCode;
				EnableSingleIdentity = typedSource.EnableSingleIdentity;
				EnableDriveMapping = typedSource.EnableDriveMapping;
				NotificationLocale = typedSource.NotificationLocale;
				RetentionPolicySysAdminOnly = typedSource.RetentionPolicySysAdminOnly;
				EnableDocumentApprovalWorkflow = typedSource.EnableDocumentApprovalWorkflow;
				EnableLocalization = typedSource.EnableLocalization;
				EnableSecondaryDbContacts = typedSource.EnableSecondaryDbContacts;
				IsQuotaLimitAvailable = typedSource.IsQuotaLimitAvailable;
				EnableQuotaLimit = typedSource.EnableQuotaLimit;
				QuotaLimitInGB = typedSource.QuotaLimitInGB;
				EnableRenderLibXThumbnails = typedSource.EnableRenderLibXThumbnails;
				EnableRenderAPIThumbnails = typedSource.EnableRenderAPIThumbnails;
				EnableRequestList = typedSource.EnableRequestList;
				IsArchiveAccount = typedSource.IsArchiveAccount;
			}
			else
			{
				JToken token;
				if(source.TryGetProperty("EnableViewOnly", out token) && token.Type != JTokenType.Null)
				{
					EnableViewOnly = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableWatermarkOnViewOnly", out token) && token.Type != JTokenType.Null)
				{
					EnableWatermarkOnViewOnly = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("AllowProactiveNotifications", out token) && token.Type != JTokenType.Null)
				{
					AllowProactiveNotifications = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("ShowUserListToClients", out token) && token.Type != JTokenType.Null)
				{
					ShowUserListToClients = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("RequireLoginOnDownload", out token) && token.Type != JTokenType.Null)
				{
					RequireLoginOnDownload = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("RequireLoginOnUpload", out token) && token.Type != JTokenType.Null)
				{
					RequireLoginOnUpload = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("RequireLoginByDefault", out token) && token.Type != JTokenType.Null)
				{
					RequireLoginByDefault = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableClientSend", out token) && token.Type != JTokenType.Null)
				{
					EnableClientSend = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableThumbnails", out token) && token.Type != JTokenType.Null)
				{
					EnableThumbnails = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableSSO", out token) && token.Type != JTokenType.Null)
				{
					EnableSSO = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("VirusStrictness", out token) && token.Type != JTokenType.Null)
				{
					VirusStrictness = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("EnableSfAdi", out token) && token.Type != JTokenType.Null)
				{
					EnableSfAdi = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableMultipleZones", out token) && token.Type != JTokenType.Null)
				{
					EnableMultipleZones = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("DefaultZone", out token) && token.Type != JTokenType.Null)
				{
					DefaultZone = (Zone)serializer.Deserialize(token.CreateReader(), typeof(Zone));
				}
				if(source.TryGetProperty("EnableVersioning", out token) && token.Type != JTokenType.Null)
				{
					EnableVersioning = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("SystemType", out token) && token.Type != JTokenType.Null)
				{
					SystemType = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("EnableSync", out token) && token.Type != JTokenType.Null)
				{
					EnableSync = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableSyncAutoUpdate", out token) && token.Type != JTokenType.Null)
				{
					EnableSyncAutoUpdate = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("SystemName", out token) && token.Type != JTokenType.Null)
				{
					SystemName = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("HomeScreenName", out token) && token.Type != JTokenType.Null)
				{
					HomeScreenName = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("ShowTermsCheckbox", out token) && token.Type != JTokenType.Null)
				{
					ShowTermsCheckbox = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("TermsCheckboxText", out token) && token.Type != JTokenType.Null)
				{
					TermsCheckboxText = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("TermsCheckboxStrictness", out token) && token.Type != JTokenType.Null)
				{
					TermsCheckboxStrictness = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("RequireCompanyNameWithUserInfo", out token) && token.Type != JTokenType.Null)
				{
					RequireCompanyNameWithUserInfo = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableEditor", out token) && token.Type != JTokenType.Null)
				{
					EnableEditor = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("ShareIDMaxExpirationDays", out token) && token.Type != JTokenType.Null)
				{
					ShareIDMaxExpirationDays = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("AdminIsSuperUser", out token) && token.Type != JTokenType.Null)
				{
					AdminIsSuperUser = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("ShowFolderAccessList", out token) && token.Type != JTokenType.Null)
				{
					ShowFolderAccessList = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("FromEmailIsShareFile", out token) && token.Type != JTokenType.Null)
				{
					FromEmailIsShareFile = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("UseAlternateSMTP", out token) && token.Type != JTokenType.Null)
				{
					UseAlternateSMTP = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("ShowPasswordInEmail", out token) && token.Type != JTokenType.Null)
				{
					ShowPasswordInEmail = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EmailPasswordText", out token) && token.Type != JTokenType.Null)
				{
					EmailPasswordText = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("EnableSelfNotificationsUpload", out token) && token.Type != JTokenType.Null)
				{
					EnableSelfNotificationsUpload = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableSelfNotificationsDownload", out token) && token.Type != JTokenType.Null)
				{
					EnableSelfNotificationsDownload = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableUploadShareIDReceipt", out token) && token.Type != JTokenType.Null)
				{
					EnableUploadShareIDReceipt = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("DefaultConsolidatedNotificationInterval", out token) && token.Type != JTokenType.Null)
				{
					DefaultConsolidatedNotificationInterval = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("ExpirationDays", out token) && token.Type != JTokenType.Null)
				{
					ExpirationDays = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("DefaultSortField", out token) && token.Type != JTokenType.Null)
				{
					DefaultSortField = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("DefaultSortOrder", out token) && token.Type != JTokenType.Null)
				{
					DefaultSortOrder = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("DefaultIsVersioned", out token) && token.Type != JTokenType.Null)
				{
					DefaultIsVersioned = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("DefaultMaxVersions", out token) && token.Type != JTokenType.Null)
				{
					DefaultMaxVersions = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("ViewOnlyWatermarkText", out token) && token.Type != JTokenType.Null)
				{
					ViewOnlyWatermarkText = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("EnableDocViewerPrinting", out token) && token.Type != JTokenType.Null)
				{
					EnableDocViewerPrinting = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableWatermarkedDownloads", out token) && token.Type != JTokenType.Null)
				{
					EnableWatermarkedDownloads = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableTwoFactorAuth", out token) && token.Type != JTokenType.Null)
				{
					EnableTwoFactorAuth = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("LoginFailMaxAttempts", out token) && token.Type != JTokenType.Null)
				{
					LoginFailMaxAttempts = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("LoginFailLockoutSecs", out token) && token.Type != JTokenType.Null)
				{
					LoginFailLockoutSecs = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("IPRestrictions", out token) && token.Type != JTokenType.Null)
				{
					IPRestrictions = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("InactiveTimeoutMins", out token) && token.Type != JTokenType.Null)
				{
					InactiveTimeoutMins = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("OAuth2RefreshTokenLifetimeMinutes", out token) && token.Type != JTokenType.Null)
				{
					OAuth2RefreshTokenLifetimeMinutes = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("PasswordRegEx", out token) && token.Type != JTokenType.Null)
				{
					PasswordRegEx = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("PasswordRegExFormula", out token) && token.Type != JTokenType.Null)
				{
					PasswordRegExFormula = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("PasswordRegExDescription", out token) && token.Type != JTokenType.Null)
				{
					PasswordRegExDescription = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("EnableActivationLinks", out token) && token.Type != JTokenType.Null)
				{
					EnableActivationLinks = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("IsFINRA", out token) && token.Type != JTokenType.Null)
				{
					IsFINRA = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableOAuth", out token) && token.Type != JTokenType.Null)
				{
					EnableOAuth = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableQandA", out token) && token.Type != JTokenType.Null)
				{
					EnableQandA = (bool)serializer.Deserialize(token.CreateReader(), typeof(bool));
				}
				if(source.TryGetProperty("EnableQandATextInNotifications", out token) && token.Type != JTokenType.Null)
				{
					EnableQandATextInNotifications = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("UXMode", out token) && token.Type != JTokenType.Null)
				{
					UXMode = (SafeEnum<UXMode>)serializer.Deserialize(token.CreateReader(), typeof(SafeEnum<UXMode>));
				}
				if(source.TryGetProperty("IndustryCode", out token) && token.Type != JTokenType.Null)
				{
					IndustryCode = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("PasswordMaxAgeDays", out token) && token.Type != JTokenType.Null)
				{
					PasswordMaxAgeDays = (int)serializer.Deserialize(token.CreateReader(), typeof(int));
				}
				if(source.TryGetProperty("PasswordHistoryCount", out token) && token.Type != JTokenType.Null)
				{
					PasswordHistoryCount = (int)serializer.Deserialize(token.CreateReader(), typeof(int));
				}
				if(source.TryGetProperty("MinimumLength", out token) && token.Type != JTokenType.Null)
				{
					MinimumLength = (int)serializer.Deserialize(token.CreateReader(), typeof(int));
				}
				if(source.TryGetProperty("MinimumSpecialCharacters", out token) && token.Type != JTokenType.Null)
				{
					MinimumSpecialCharacters = (int)serializer.Deserialize(token.CreateReader(), typeof(int));
				}
				if(source.TryGetProperty("MinimumNumeric", out token) && token.Type != JTokenType.Null)
				{
					MinimumNumeric = (int)serializer.Deserialize(token.CreateReader(), typeof(int));
				}
				if(source.TryGetProperty("AllowedSpecialCharacters", out token) && token.Type != JTokenType.Null)
				{
					AllowedSpecialCharacters = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("PasswordPolicy", out token) && token.Type != JTokenType.Null)
				{
					PasswordPolicy = (PasswordPolicy)serializer.Deserialize(token.CreateReader(), typeof(PasswordPolicy));
				}
				if(source.TryGetProperty("EnableWebDAV", out token) && token.Type != JTokenType.Null)
				{
					EnableWebDAV = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("WebDAVServerName", out token) && token.Type != JTokenType.Null)
				{
					WebDAVServerName = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("EnableFTP", out token) && token.Type != JTokenType.Null)
				{
					EnableFTP = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableSFTP", out token) && token.Type != JTokenType.Null)
				{
					EnableSFTP = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("FtpServerName", out token) && token.Type != JTokenType.Null)
				{
					FtpServerName = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("DisableMarketing", out token) && token.Type != JTokenType.Null)
				{
					DisableMarketing = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("VDRDocViewerURL", out token) && token.Type != JTokenType.Null)
				{
					VDRDocViewerURL = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("EnableSMBConnectorForAccount", out token) && token.Type != JTokenType.Null)
				{
					EnableSMBConnectorForAccount = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnablePersonalCloudConnectors", out token) && token.Type != JTokenType.Null)
				{
					EnablePersonalCloudConnectors = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("AccountID", out token) && token.Type != JTokenType.Null)
				{
					AccountID = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("EnableStorageZoneConnector", out token) && token.Type != JTokenType.Null)
				{
					EnableStorageZoneConnector = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("HasAnyConnectorZones", out token) && token.Type != JTokenType.Null)
				{
					HasAnyConnectorZones = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableENSForAccount", out token) && token.Type != JTokenType.Null)
				{
					EnableENSForAccount = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("ENSRecommendedPollingSyncInterval", out token) && token.Type != JTokenType.Null)
				{
					ENSRecommendedPollingSyncInterval = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("ENSRecommendedNotificationSyncInterval", out token) && token.Type != JTokenType.Null)
				{
					ENSRecommendedNotificationSyncInterval = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("ENSNotificationConfigurationCount", out token) && token.Type != JTokenType.Null)
				{
					ENSNotificationConfigurationCount = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("ENSFailSafePollingCount", out token) && token.Type != JTokenType.Null)
				{
					ENSFailSafePollingCount = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("ENSMaxNotificationSyncWaitCount", out token) && token.Type != JTokenType.Null)
				{
					ENSMaxNotificationSyncWaitCount = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("TrustedDomains", out token) && token.Type != JTokenType.Null)
				{
					TrustedDomains = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("UseWebPopAsWebAppLogin", out token) && token.Type != JTokenType.Null)
				{
					UseWebPopAsWebAppLogin = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableReportingV3", out token) && token.Type != JTokenType.Null)
				{
					EnableReportingV3 = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableEncryptedEmailForOutlookPlugin", out token) && token.Type != JTokenType.Null)
				{
					EnableEncryptedEmailForOutlookPlugin = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableDocPreviews", out token) && token.Type != JTokenType.Null)
				{
					EnableDocPreviews = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("DisablePasswordAutocompleteInWebApp", out token) && token.Type != JTokenType.Null)
				{
					DisablePasswordAutocompleteInWebApp = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableDesktopEditorForAccount", out token) && token.Type != JTokenType.Null)
				{
					EnableDesktopEditorForAccount = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("UseStrictEmployeeDefinition", out token) && token.Type != JTokenType.Null)
				{
					UseStrictEmployeeDefinition = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EmployeeEmailDomains", out token) && token.Type != JTokenType.Null)
				{
					EmployeeEmailDomains = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("IsPremier", out token) && token.Type != JTokenType.Null)
				{
					IsPremier = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("DisableShareConnectForAccount", out token) && token.Type != JTokenType.Null)
				{
					DisableShareConnectForAccount = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("DisablePrintToShareFile", out token) && token.Type != JTokenType.Null)
				{
					DisablePrintToShareFile = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableWebAppConnectorBrowsing", out token) && token.Type != JTokenType.Null)
				{
					EnableWebAppConnectorBrowsing = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableStrictCrossdomainPolicy", out token) && token.Type != JTokenType.Null)
				{
					EnableStrictCrossdomainPolicy = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("DisableScanSnap", out token) && token.Type != JTokenType.Null)
				{
					DisableScanSnap = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableFileCount", out token) && token.Type != JTokenType.Null)
				{
					EnableFileCount = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableAntiVirus", out token) && token.Type != JTokenType.Null)
				{
					EnableAntiVirus = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableFileLocking", out token) && token.Type != JTokenType.Null)
				{
					EnableFileLocking = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("DisableWebAppAccess", out token) && token.Type != JTokenType.Null)
				{
					DisableWebAppAccess = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableCWC", out token) && token.Type != JTokenType.Null)
				{
					EnableCWC = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableEnterpriseArchive", out token) && token.Type != JTokenType.Null)
				{
					EnableEnterpriseArchive = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnterpriseArchiveActivationDate", out token) && token.Type != JTokenType.Null)
				{
					EnterpriseArchiveActivationDate = (DateTime?)serializer.Deserialize(token.CreateReader(), typeof(DateTime?));
				}
				if(source.TryGetProperty("EnableIntegrations", out token) && token.Type != JTokenType.Null)
				{
					EnableIntegrations = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("IntegrationProviders", out token) && token.Type != JTokenType.Null)
				{
					IntegrationProviders = (IEnumerable<SafeEnum<IntegrationProvider>>)serializer.Deserialize(token.CreateReader(), typeof(IEnumerable<SafeEnum<IntegrationProvider>>));
				}
				if(source.TryGetProperty("EnableBouncedEmailNotifications", out token) && token.Type != JTokenType.Null)
				{
					EnableBouncedEmailNotifications = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("ShowDownloadLinkInUploadNotification", out token) && token.Type != JTokenType.Null)
				{
					ShowDownloadLinkInUploadNotification = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("AllowDownloadNotificationsWithoutAdmin", out token) && token.Type != JTokenType.Null)
				{
					AllowDownloadNotificationsWithoutAdmin = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableUserInvitations", out token) && token.Type != JTokenType.Null)
				{
					EnableUserInvitations = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableClickTrails", out token) && token.Type != JTokenType.Null)
				{
					EnableClickTrails = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableFolderTemplates", out token) && token.Type != JTokenType.Null)
				{
					EnableFolderTemplates = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableFileDrops", out token) && token.Type != JTokenType.Null)
				{
					EnableFileDrops = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("SpamEmailThreshold", out token) && token.Type != JTokenType.Null)
				{
					SpamEmailThreshold = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("EnableExternalEmailArchiving", out token) && token.Type != JTokenType.Null)
				{
					EnableExternalEmailArchiving = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("CreatorCanDelete", out token) && token.Type != JTokenType.Null)
				{
					CreatorCanDelete = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("CanStoreItemsInShareFile", out token) && token.Type != JTokenType.Null)
				{
					CanStoreItemsInShareFile = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableHomeFolders", out token) && token.Type != JTokenType.Null)
				{
					EnableHomeFolders = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableCustomBrandingUsesS3", out token) && token.Type != JTokenType.Null)
				{
					EnableCustomBrandingUsesS3 = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnablePromotions", out token) && token.Type != JTokenType.Null)
				{
					EnablePromotions = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("CanCreateMultiTenantZones", out token) && token.Type != JTokenType.Null)
				{
					CanCreateMultiTenantZones = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableDLP", out token) && token.Type != JTokenType.Null)
				{
					EnableDLP = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableIRM", out token) && token.Type != JTokenType.Null)
				{
					EnableIRM = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableECMConnectors", out token) && token.Type != JTokenType.Null)
				{
					EnableECMConnectors = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableOfficeOnlinePreviews", out token) && token.Type != JTokenType.Null)
				{
					EnableOfficeOnlinePreviews = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableOfficeOnlineEditing", out token) && token.Type != JTokenType.Null)
				{
					EnableOfficeOnlineEditing = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("RecycleBinDays", out token) && token.Type != JTokenType.Null)
				{
					RecycleBinDays = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("SyncConcurrentTransferThreadsLimit", out token) && token.Type != JTokenType.Null)
				{
					SyncConcurrentTransferThreadsLimit = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("HasPHI", out token) && token.Type != JTokenType.Null)
				{
					HasPHI = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableCitrixManagedStorageZones", out token) && token.Type != JTokenType.Null)
				{
					EnableCitrixManagedStorageZones = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("PrimaryStorageBasePath", out token) && token.Type != JTokenType.Null)
				{
					PrimaryStorageBasePath = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("EnableSharingConnectorItems", out token) && token.Type != JTokenType.Null)
				{
					EnableSharingConnectorItems = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("AccountMessageCode", out token) && token.Type != JTokenType.Null)
				{
					AccountMessageCode = (AccountMessageCode)serializer.Deserialize(token.CreateReader(), typeof(AccountMessageCode));
				}
				if(source.TryGetProperty("EnableSingleIdentity", out token) && token.Type != JTokenType.Null)
				{
					EnableSingleIdentity = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableDriveMapping", out token) && token.Type != JTokenType.Null)
				{
					EnableDriveMapping = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("NotificationLocale", out token) && token.Type != JTokenType.Null)
				{
					NotificationLocale = (SafeEnum<NotificationLocale>)serializer.Deserialize(token.CreateReader(), typeof(SafeEnum<NotificationLocale>));
				}
				if(source.TryGetProperty("RetentionPolicySysAdminOnly", out token) && token.Type != JTokenType.Null)
				{
					RetentionPolicySysAdminOnly = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableDocumentApprovalWorkflow", out token) && token.Type != JTokenType.Null)
				{
					EnableDocumentApprovalWorkflow = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableLocalization", out token) && token.Type != JTokenType.Null)
				{
					EnableLocalization = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableSecondaryDbContacts", out token) && token.Type != JTokenType.Null)
				{
					EnableSecondaryDbContacts = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("IsQuotaLimitAvailable", out token) && token.Type != JTokenType.Null)
				{
					IsQuotaLimitAvailable = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableQuotaLimit", out token) && token.Type != JTokenType.Null)
				{
					EnableQuotaLimit = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("QuotaLimitInGB", out token) && token.Type != JTokenType.Null)
				{
					QuotaLimitInGB = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("EnableRenderLibXThumbnails", out token) && token.Type != JTokenType.Null)
				{
					EnableRenderLibXThumbnails = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableRenderAPIThumbnails", out token) && token.Type != JTokenType.Null)
				{
					EnableRenderAPIThumbnails = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EnableRequestList", out token) && token.Type != JTokenType.Null)
				{
					EnableRequestList = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("IsArchiveAccount", out token) && token.Type != JTokenType.Null)
				{
					IsArchiveAccount = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
			}
		}
	}
#endif
}