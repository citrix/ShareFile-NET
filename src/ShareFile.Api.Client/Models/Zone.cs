// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2018 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Net;

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using ShareFile.Api.Client.Extensions;
using ShareFile.Api.Client.Exceptions;

namespace ShareFile.Api.Client.Models 
{
	/// <summary>
	/// Zones represent sites that can hold ShareFile data. Zones can be either
	/// Private - installed at customer's premisses - or Public - managed by
	/// ShareFile. ShareFile Items are always associated with a given Zone.
	/// 
	/// Zones have multiple StorageCenters - each represents a physical server
	/// in that zone.
	/// </summary>
	public class Zone : Principal 
	{
		/// <summary>
		/// Zone secret used for securing communications.
		/// </summary>
		public string Secret { get; set; }
		/// <summary>
		/// Zone type
		/// </summary>
		public SafeEnum<ZoneType> ZoneType { get; set; }
		/// <summary>
		/// Zone account - only set on Private zones
		/// </summary>
		public Account Account { get; set; }
		/// <summary>
		/// Specifies how much time between heartbeats before sharefile.com will remove
		/// a Storage Center from load balancing
		/// </summary>
		public int? HeartBeatTolerance { get; set; }
		/// <summary>
		/// Specifies how often sharefile.com will attempt to connect back to the Zone
		/// and determine if the zone is healthy.
		/// </summary>
		public int? PingBackInterval { get; set; }
		/// <summary>
		/// Zone version - this parameter cannot be set, it is determined from the version
		/// of its storage centers. A zone version is the lowest version of a storage center
		/// in that zone
		/// </summary>
		public string Version { get; set; }
		/// <summary>
		/// Comma-delimited list of services enabled in this zone.
		/// </summary>
		public SafeEnum<ZoneService> ZoneServices { get; set; }
		/// <summary>
		/// Specifies if the zone is a HIPAA zone
		/// </summary>
		public bool? IsHIPAAZone { get; set; }
		/// <summary>
		/// Specifies if the zone is a multi-tenant zone
		/// </summary>
		public bool? IsMultiTenant { get; set; }
		/// <summary>
		/// List of Storage Centers created on this zone. A Storage Center is a stateless
		/// server that performs the zone services. Operations to this zone will be
		/// redirected to one of the storage centers - using the configured external
		/// address.
		/// </summary>
		public IEnumerable<StorageCenter> StorageCenters { get; set; }
		/// <summary>
		/// List of metadata objects associated with this zone
		/// </summary>
		public IEnumerable<Metadata> Metadata { get; set; }

		public override void Copy(ODataObject source, JsonSerializer serializer)
		{
			if(source == null || serializer == null) return;
			base.Copy(source, serializer);

			var typedSource = source as Zone;
			if(typedSource != null)
			{
				Secret = typedSource.Secret;
				ZoneType = typedSource.ZoneType;
				Account = typedSource.Account;
				HeartBeatTolerance = typedSource.HeartBeatTolerance;
				PingBackInterval = typedSource.PingBackInterval;
				Version = typedSource.Version;
				ZoneServices = typedSource.ZoneServices;
				IsHIPAAZone = typedSource.IsHIPAAZone;
				IsMultiTenant = typedSource.IsMultiTenant;
				StorageCenters = typedSource.StorageCenters;
				Metadata = typedSource.Metadata;
			}
			else
			{
				JToken token;
				if(source.TryGetProperty("Secret", out token) && token.Type != JTokenType.Null)
				{
					Secret = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("ZoneType", out token) && token.Type != JTokenType.Null)
				{
					ZoneType = (SafeEnum<ZoneType>)serializer.Deserialize(token.CreateReader(), typeof(SafeEnum<ZoneType>));
				}
				if(source.TryGetProperty("Account", out token) && token.Type != JTokenType.Null)
				{
					Account = (Account)serializer.Deserialize(token.CreateReader(), typeof(Account));
				}
				if(source.TryGetProperty("HeartBeatTolerance", out token) && token.Type != JTokenType.Null)
				{
					HeartBeatTolerance = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("PingBackInterval", out token) && token.Type != JTokenType.Null)
				{
					PingBackInterval = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("Version", out token) && token.Type != JTokenType.Null)
				{
					Version = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("ZoneServices", out token) && token.Type != JTokenType.Null)
				{
					ZoneServices = (SafeEnum<ZoneService>)serializer.Deserialize(token.CreateReader(), typeof(SafeEnum<ZoneService>));
				}
				if(source.TryGetProperty("IsHIPAAZone", out token) && token.Type != JTokenType.Null)
				{
					IsHIPAAZone = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("IsMultiTenant", out token) && token.Type != JTokenType.Null)
				{
					IsMultiTenant = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("StorageCenters", out token) && token.Type != JTokenType.Null)
				{
					StorageCenters = (IEnumerable<StorageCenter>)serializer.Deserialize(token.CreateReader(), typeof(IEnumerable<StorageCenter>));
				}
				if(source.TryGetProperty("Metadata", out token) && token.Type != JTokenType.Null)
				{
					Metadata = (IEnumerable<Metadata>)serializer.Deserialize(token.CreateReader(), typeof(IEnumerable<Metadata>));
				}
			}
		}
	}
}