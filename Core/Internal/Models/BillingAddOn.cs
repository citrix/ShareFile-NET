// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2015 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Net;

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using ShareFile.Api.Client.Extensions;
using ShareFile.Api.Client.Exceptions;

namespace ShareFile.Api.Models 
{
#if ShareFile
	public class BillingAddOn : ODataObject 
	{

		public Account Account { get; set; }

		public string PlanAddOnsTypeCode { get; set; }

		public string PlanAddOnsCode { get; set; }

		public string UnitPrice { get; set; }

		public string LimitingFactor { get; set; }

		public int? LowerLimit { get; set; }

		public int? UpperLimit { get; set; }

		public string AddonField { get; set; }

		public int? IncreaseInterval { get; set; }

		public User CreatedBy { get; set; }

		public DateTime? CreationDate { get; set; }

		public User UpdatedBy { get; set; }

		public DateTime? UpdatedDate { get; set; }

		public DateTime? PurchaseDate { get; set; }

		public DateTime? ExpirationDate { get; set; }

		public bool? IsActive { get; set; }

		public override void Copy(ODataObject source, JsonSerializer serializer)
		{
			if(source == null || serializer == null) return;
			base.Copy(source, serializer);

			var typedSource = source as BillingAddOn;
			if(typedSource != null)
			{
				Account = typedSource.Account;
				PlanAddOnsTypeCode = typedSource.PlanAddOnsTypeCode;
				PlanAddOnsCode = typedSource.PlanAddOnsCode;
				UnitPrice = typedSource.UnitPrice;
				LimitingFactor = typedSource.LimitingFactor;
				LowerLimit = typedSource.LowerLimit;
				UpperLimit = typedSource.UpperLimit;
				AddonField = typedSource.AddonField;
				IncreaseInterval = typedSource.IncreaseInterval;
				CreatedBy = typedSource.CreatedBy;
				CreationDate = typedSource.CreationDate;
				UpdatedBy = typedSource.UpdatedBy;
				UpdatedDate = typedSource.UpdatedDate;
				PurchaseDate = typedSource.PurchaseDate;
				ExpirationDate = typedSource.ExpirationDate;
				IsActive = typedSource.IsActive;
			}
			else
			{
				JToken token;
				if(source.TryGetProperty("Account", out token) && token.Type != JTokenType.Null)
				{
					Account = (Account)serializer.Deserialize(token.CreateReader(), typeof(Account));
				}
				if(source.TryGetProperty("PlanAddOnsTypeCode", out token) && token.Type != JTokenType.Null)
				{
					PlanAddOnsTypeCode = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("PlanAddOnsCode", out token) && token.Type != JTokenType.Null)
				{
					PlanAddOnsCode = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("UnitPrice", out token) && token.Type != JTokenType.Null)
				{
					UnitPrice = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("LimitingFactor", out token) && token.Type != JTokenType.Null)
				{
					LimitingFactor = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("LowerLimit", out token) && token.Type != JTokenType.Null)
				{
					LowerLimit = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("UpperLimit", out token) && token.Type != JTokenType.Null)
				{
					UpperLimit = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("AddonField", out token) && token.Type != JTokenType.Null)
				{
					AddonField = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("IncreaseInterval", out token) && token.Type != JTokenType.Null)
				{
					IncreaseInterval = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("CreatedBy", out token) && token.Type != JTokenType.Null)
				{
					CreatedBy = (User)serializer.Deserialize(token.CreateReader(), typeof(User));
				}
				if(source.TryGetProperty("CreationDate", out token) && token.Type != JTokenType.Null)
				{
					CreationDate = (DateTime?)serializer.Deserialize(token.CreateReader(), typeof(DateTime?));
				}
				if(source.TryGetProperty("UpdatedBy", out token) && token.Type != JTokenType.Null)
				{
					UpdatedBy = (User)serializer.Deserialize(token.CreateReader(), typeof(User));
				}
				if(source.TryGetProperty("UpdatedDate", out token) && token.Type != JTokenType.Null)
				{
					UpdatedDate = (DateTime?)serializer.Deserialize(token.CreateReader(), typeof(DateTime?));
				}
				if(source.TryGetProperty("PurchaseDate", out token) && token.Type != JTokenType.Null)
				{
					PurchaseDate = (DateTime?)serializer.Deserialize(token.CreateReader(), typeof(DateTime?));
				}
				if(source.TryGetProperty("ExpirationDate", out token) && token.Type != JTokenType.Null)
				{
					ExpirationDate = (DateTime?)serializer.Deserialize(token.CreateReader(), typeof(DateTime?));
				}
				if(source.TryGetProperty("IsActive", out token) && token.Type != JTokenType.Null)
				{
					IsActive = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
			}
		}
	}
#endif
}