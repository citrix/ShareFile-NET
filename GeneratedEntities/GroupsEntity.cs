// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2014 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using ShareFile.Api.Models;
using ShareFile.Api.Client;

namespace ShareFile.Api.Client
{
	public class GroupsEntity : ODataEntityBase
	{
		/// <summary>
		/// Get Group List
		/// </summary>
		/// <remarks>
		/// Retrieves all Distribution Groups this user has permissions to View in this account
		/// </remarks>
		/// <returns>
		/// a list of Groups this user has access to
		/// </returns>
		public IQuery<ODataFeed<Group>> Get()
		{
			IQuery<ODataFeed<Group>> query = new IQuery<ODataFeed<Group>>(Client);
			query.From("Groups");
			query.HttpMethod = "GET";
			return query;
		}

		/// <summary>
		/// Get Group List
		/// </summary>
		/// <remarks>
		/// Retrieves all Distribution Groups this user has permissions to View in this account
		/// </remarks>
		/// <returns>
		/// a list of Groups this user has access to
		/// </returns>
		public IQuery<Group> Get(string id)
		{
			IQuery<Group> query = new IQuery<Group>(Client);
			query.From("Groups");
			query.Ids(id);
			query.HttpMethod = "GET";
			return query;
		}

		/// <summary>
		/// Delete Group
		/// </summary>
		/// <remarks>
		/// Removes a single Group by id
		/// </remarks>
		/// <param name="id"></param>
		public IQuery Delete(string id)
		{
			IQuery query = new IQuery(Client);
			query.From("Groups");
			query.Ids(id);
			query.HttpMethod = "DELETE";
			return query;
		}

		/// <summary>
		/// Create Group
		/// </summary>
		/// <example>
		/// {
		/// "Name":"Name",
		/// "IsShared":true,
		/// "Contacts":[{"Email":"user.one@domain.com"},{"Email":"user.two@domain.com"}]
		/// }
		/// </example>
		/// <remarks>
		/// Creates a new group. The Post body must include the specification of the group.
		/// </remarks>
		/// <param name="group"></param>
		/// <returns>
		/// the new group instance
		/// </returns>
		public IQuery<Group> Create( id = , Group group)
		{
			IQuery<Group> query = new IQuery<Group>(Client);
			query.From("Groups");
			query.Ids(id);
			query.Body = group;
			query.HttpMethod = "POST";
			return query;
		}

		/// <summary>
		/// Update Group
		/// </summary>
		/// <example>
		/// {
		/// "Name":"Name",
		/// "IsShared":true,
		/// }
		/// </example>
		/// <remarks>
		/// Updates an existing group.
		/// This operation will ignore the provided clients list. Use the \Contacts navigation link to
		/// add/remove elements from a group
		/// </remarks>
		/// <param name="id"></param>
		/// <param name="group"></param>
		/// <returns>
		/// the modified group object
		/// </returns>
		public IQuery<Group> Update(string id, Group group)
		{
			IQuery<Group> query = new IQuery<Group>(Client);
			query.From("Groups");
			query.Ids(id);
			query.Body = group;
			query.HttpMethod = "PATCH";
			return query;
		}

		/// <summary>
		/// Get Group Contacts
		/// </summary>
		/// <remarks>
		/// Retrieves the Contacts navigation property of a Group
		/// </remarks>
		/// <param name="id"></param>
		/// <returns>
		/// A feed of Contacts representing the members of the Group
		/// </returns>
		public IQuery<ODataFeed<Contact>> GetContacts(string id)
		{
			IQuery<ODataFeed<Contact>> query = new IQuery<ODataFeed<Contact>>(Client);
			query.From("Groups");
			query.Action("Contacts");
			query.Ids(id);
			query.HttpMethod = "GET";
			return query;
		}

		/// <summary>
		/// Add Contacts to Group
		/// </summary>
		/// <example>
		/// [{"Email":"user.one@domain.com"},{"Id":"abcd"}]
		/// </example>
		/// <remarks>
		/// Adds a list of contacts to a group
		/// The contact list may contain either contact ID (same as User ID) or Email.
		/// </remarks>
		/// <param name="id"></param>
		/// <param name="contacts"></param>
		/// <returns>
		/// The updated list of contacts for this group
		/// </returns>
		public IQuery<ODataFeed<Contact>> CreateContacts(string id, IEnumerable<Contact> contacts)
		{
			IQuery<ODataFeed<Contact>> query = new IQuery<ODataFeed<Contact>>(Client);
			query.From("Groups");
			query.Action("Contacts");
			query.Ids(id);
			query.Body = contacts;
			query.HttpMethod = "POST";
			return query;
		}

		/// <summary>
		/// Remove Contacts from Group
		/// </summary>
		/// <example>
		/// [{"Email":"user.one@domain.com"},{"Id":"abcd"}]
		/// </example>
		/// <remarks>
		/// Removes contacts from a group
		/// The contact list may contain either contact ID (same as User ID) or Email.
		/// This method will ignore missing references in the provided list - i.e., if an email in the contacts
		/// list is not present in the group, it will be ignored.
		/// The method will not enforce that ID and Email match inside a single Contact instance: Id will be
		/// looked up first, then Email.
		/// </remarks>
		/// <param name="id"></param>
		/// <param name="contacts"></param>
		/// <returns>
		/// The updated list of contacts for this group
		/// </returns>
		public IQuery<ODataFeed<Contact>> DeleteContacts(string id, IEnumerable<Contact> contacts)
		{
			IQuery<ODataFeed<Contact>> query = new IQuery<ODataFeed<Contact>>(Client);
			query.From("Groups");
			query.Action("Contacts");
			query.Ids(id);
			query.Body = contacts;
			query.HttpMethod = "DELETE";
			return query;
		}

	}
}
