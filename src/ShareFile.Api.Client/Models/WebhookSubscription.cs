// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2018 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Net;

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using ShareFile.Api.Client.Extensions;
using ShareFile.Api.Client.Exceptions;

namespace ShareFile.Api.Client.Models 
{
#if !ShareFile
	/// <summary>
	/// Webhook Subscription
	/// </summary>
	public class WebhookSubscription : ODataObject 
	{
		/// <summary>
		/// Url where the Event payload will be posted to.
		/// </summary>
		public string WebhookUrl { get; set; }
		/// <summary>
		/// The Context of the Events to trigger upon
		/// </summary>
		public SubscriptionContext SubscriptionContext { get; set; }
		/// <summary>
		/// List of events to trigger upon
		/// </summary>
		public IEnumerable<SubscribedResourceEvent> Events { get; set; }

		public override void Copy(ODataObject source, JsonSerializer serializer)
		{
			if(source == null || serializer == null) return;
			base.Copy(source, serializer);

			var typedSource = source as WebhookSubscription;
			if(typedSource != null)
			{
				WebhookUrl = typedSource.WebhookUrl;
				SubscriptionContext = typedSource.SubscriptionContext;
				Events = typedSource.Events;
			}
			else
			{
				JToken token;
				if(source.TryGetProperty("WebhookUrl", out token) && token.Type != JTokenType.Null)
				{
					WebhookUrl = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("SubscriptionContext", out token) && token.Type != JTokenType.Null)
				{
					SubscriptionContext = (SubscriptionContext)serializer.Deserialize(token.CreateReader(), typeof(SubscriptionContext));
				}
				if(source.TryGetProperty("Events", out token) && token.Type != JTokenType.Null)
				{
					Events = (IEnumerable<SubscribedResourceEvent>)serializer.Deserialize(token.CreateReader(), typeof(IEnumerable<SubscribedResourceEvent>));
				}
			}
		}
	}
#endif
}