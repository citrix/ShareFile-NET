// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2018 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using ShareFile.Api.Client;
using ShareFile.Api.Client.Extensions;
using ShareFile.Api.Client.Models;
using ShareFile.Api.Client.Requests;


namespace ShareFile.Api.Client.Entities
{
    public interface IEncryptedEmailsEntity : IEntityBase
    {
        
        /// <summary>
        /// Get EncryptedEmail
        /// </summary>
        /// <remarks>
        /// Get EncryptedEmail by Id. If EncryptedEmail.RequireUserInfo is true, the user info query parameters are required.
        /// </remarks>
        /// <returns>
        /// EncryptedEmail with corresponding Id
        /// </returns>
        IQuery<EncryptedEmail> Get(Uri url, string firstName = null, string lastName = null, string email = null, string company = null);
        
        /// <summary>
        /// Get EncryptedEmail Message Thread
        /// </summary>
        /// <remarks>
        /// Get list of EncryptedEmail objects in a single email thread.Only messages to which the current logged in User has access are returned.If EncryptedEmail.RequireUserInfo is true, the user info query parameters are required.
        /// </remarks>
        /// <returns>
        /// Feed of EncryptedEmail objects
        /// </returns>
        IQuery<ODataFeed<EncryptedEmail>> Thread(Uri url, string firstName = null, string lastName = null, string email = null, string company = null);
        
        /// <summary>
        /// Get EncryptedEmail by Share Id
        /// </summary>
        /// <remarks>
        /// Gets the EncryptedEmail associated with the Share.
        /// </remarks>
        /// <param name="shareUrl"></param>
        /// <returns>
        /// Associated EncryptedEmail
        /// </returns>
        IQuery<EncryptedEmail> GetEncryptedEmailByShare(Uri shareUrl);
        
        /// <summary>
        /// Get Received EncryptedEmails
        /// GET https://account.sf-api.com/sf/v3/EncryptedEmails/Received
        /// </summary>
        /// <remarks>
        /// Get list of EncryptedEmails received by the current User.
        /// </remarks>
        /// <returns>
        /// Feed of EncryptedEmails
        /// </returns>
        IQuery<ODataFeed<EncryptedEmail>> Received();
        
        /// <summary>
        /// Get Sent EncryptedEmails
        /// GET https://account.sf-api.com/sf/v3/EncryptedEmails/Sent
        /// </summary>
        /// <remarks>
        /// Get list of EncryptedEmails sent by the current User.
        /// </remarks>
        /// <returns>
        /// Feed of EncryptedEmails
        /// </returns>
        IQuery<ODataFeed<EncryptedEmail>> Sent();
        
        /// <summary>
        /// Create EncryptedEmail
        /// </summary>
        /// <example>
        /// {
        /// "ToRecipients":[{"Email":"email@domain.com"}, {"Email":"email2@domain.com"}],
        /// "CcRecipients":[{"Email":"email@domain.com"}, {"Email":"email2@domain.com"}],
        /// "Subject": "Email Subject",
        /// "NotifyOnUse": true,
        /// "ExpirationDays":180,
        /// "RequireUserInfo": false,
        /// "RequireLogin": true
        /// }
        /// </example>
        /// <remarks>
        /// Create a new empty EncryptedEmail without a body or attachments. This request does not Send the EncryptedEmail,
        /// see the "Send EncryptedEmail" endpoint for steps to send a new EncryptedEmail
        /// </remarks>
        /// <param name="encryptedEmailParams"></param>
        /// <returns>
        /// EncryptedEmail
        /// </returns>
        IQuery<EncryptedEmail> Create(EncryptedEmailCreateParams encryptedEmailParams);
        
        /// <summary>
        /// Reply to an EncryptedEmail
        /// </summary>
        /// <example>
        /// {
        /// "ToRecipients":[{"Email":"email@domain.com"}, {"Email":"email2@domain.com"}],
        /// "CcRecipients":[{"Email":"email@domain.com"}, {"Email":"email2@domain.com"}],
        /// "Subject": "Email Subject",
        /// "NotifyOnUse": true,
        /// "ExpirationDays":180
        /// }
        /// </example>
        /// <remarks>
        /// Create a new EncryptedEmail in reply to another EncryptedEmail. This request does not Send the EncryptedEmail,
        /// see the "Send EncryptedEmail" endpoint for steps to send a new EncryptedEmail
        /// </remarks>
        /// <param name="url"></param>
        /// <param name="encryptedEmailParams"></param>
        /// <returns>
        /// Created EncryptedEmail
        /// </returns>
        IQuery<EncryptedEmail> Reply(Uri url, EncryptedEmailReplyParams encryptedEmailParams);
        
        /// <summary>
        /// Reply to all EncryptedEmail Recipients
        /// </summary>
        /// <example>
        /// {
        /// "Subject":"subject",
        /// "ExpirationDays":180
        /// }
        /// </example>
        /// <remarks>
        /// Create EncryptedEmail in Reply to all recipients in the EncryptedEmail identified by the provided Id, including
        /// ToRecipients, CcRecipients, and BccRecipients. This request does not Send the EncryptedEmail,
        /// see the "Send EncryptedEmail" endpoint for steps to send a new EncryptedEmail
        /// </remarks>
        /// <param name="url"></param>
        /// <param name="encryptedEmailParams"></param>
        /// <returns>
        /// Create EncryptedEmail
        /// </returns>
        IQuery<EncryptedEmail> ReplyAll(Uri url, EncryptedEmailParams encryptedEmailParams);
        
        /// <summary>
        /// Send EncryptedEmail
        /// </summary>
        /// <example>
        /// {
        /// "Message": {"Id": "messageFileId"},
        /// "Attachments": [{"Id": "id1"}, {"Id": "id2"}],
        /// }
        /// </example>
        /// <remarks>
        /// Sending an EncryptedEmail is a multi-step process:1. Create an empty EncryptedEmail using the "Create EncryptedEmail" or "Reply to EncryptedEmail" endpoints 2. Upload the message body as raw text or a text file using the "Upload EncryptedEmail Message" endpoint 3. Send the EncryptedEmail using the "Send EncryptedEmail" endpoint, providing the fileId uploaded in step 2 as
        /// the "Message" Item parameter. Provide a list of optional Item attachments during this step as well
        /// </remarks>
        /// <param name="url"></param>
        /// <param name="encryptedEmailSendParams"></param>
        IQuery Send(Uri url, EncryptedEmailSendParams encryptedEmailSendParams);
        
        /// <summary>
        /// Upload EncryptedEmail Message
        /// </summary>
        /// <example>
        /// {
        /// "Method":"Standard",
        /// "Raw": true,
        /// "FileName":"message.txt",
        /// "FileSize": 0
        /// }
        /// </example>
        /// <remarks>
        /// Upload EncryptedEmail message. For simplicity, it is recommended to send the request with the body parameter
        /// "Raw": true. The Api endpoint will respond with an UploadSpecification object with a ChunkUri value, which is the url
        /// to which the message body can be POSTed as a file. The "Raw" flag allows you to POST the EncryptedEmail body as a text
        /// string in the Http request, instead of the traditional multi-part file approach, which is preferable for a simple text file.
        /// This endpoint behaves the same way as Items(id)/Upload2, which can be referenced for more details
        /// </remarks>
        /// <param name="parentUrl"></param>
        /// <param name="uploadParams"></param>
        /// <param name="expirationDays"></param>
        /// <returns>
        /// UploadSpecification object
        /// </returns>
        IQuery<UploadSpecification> Upload2(Uri parentUrl, UploadRequestParams uploadParams, int? expirationDays = null);
        
        /// <summary>
        /// Download EncryptedEmail Message
        /// </summary>
        /// <param name="url"></param>
        /// <param name="aliasId"></param>
        /// <param name="redirect"></param>
        /// <returns>
        /// File if redirect=true, DownloadSpecification object otherwise
        /// </returns>
        IQuery<System.IO.Stream> Message(Uri url, string aliasId = null, bool redirect = true);
        
        /// <summary>
        /// Delete EncryptedEmail
        /// </summary>
        /// <remarks>
        /// Access to message and attachments via created ShareAliases will be revoked as well.
        /// </remarks>
        /// <param name="url"></param>
        IQuery Delete(Uri url);
    }

    public class EncryptedEmailsEntity : EntityBase, IEncryptedEmailsEntity
    {
        public EncryptedEmailsEntity (IShareFileClient client)
            : base (client, "EncryptedEmails")
        { }
        
        
        /// <summary>
        /// Get EncryptedEmail
        /// </summary>
        /// <remarks>
        /// Get EncryptedEmail by Id. If EncryptedEmail.RequireUserInfo is true, the user info query parameters are required.
        /// </remarks>
        /// <returns>
        /// EncryptedEmail with corresponding Id
        /// </returns>
        public IQuery<EncryptedEmail> Get(Uri url, string firstName = null, string lastName = null, string email = null, string company = null)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<EncryptedEmail>(Client);
            sfApiQuery.Uri(url);
            sfApiQuery.QueryString("firstName", firstName);
            sfApiQuery.QueryString("lastName", lastName);
            sfApiQuery.QueryString("email", email);
            sfApiQuery.QueryString("company", company);
            sfApiQuery.HttpMethod = "GET";	
            return sfApiQuery;
        }
        
        /// <summary>
        /// Get EncryptedEmail Message Thread
        /// </summary>
        /// <remarks>
        /// Get list of EncryptedEmail objects in a single email thread.Only messages to which the current logged in User has access are returned.If EncryptedEmail.RequireUserInfo is true, the user info query parameters are required.
        /// </remarks>
        /// <returns>
        /// Feed of EncryptedEmail objects
        /// </returns>
        public IQuery<ODataFeed<EncryptedEmail>> Thread(Uri url, string firstName = null, string lastName = null, string email = null, string company = null)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<ODataFeed<EncryptedEmail>>(Client);
            sfApiQuery.Action("Thread");
            sfApiQuery.Uri(url);
            sfApiQuery.QueryString("firstName", firstName);
            sfApiQuery.QueryString("lastName", lastName);
            sfApiQuery.QueryString("email", email);
            sfApiQuery.QueryString("company", company);
            sfApiQuery.HttpMethod = "GET";	
            return sfApiQuery;
        }
        
        /// <summary>
        /// Get EncryptedEmail by Share Id
        /// </summary>
        /// <remarks>
        /// Gets the EncryptedEmail associated with the Share.
        /// </remarks>
        /// <param name="shareUrl"></param>
        /// <returns>
        /// Associated EncryptedEmail
        /// </returns>
        public IQuery<EncryptedEmail> GetEncryptedEmailByShare(Uri shareUrl)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<EncryptedEmail>(Client);
            sfApiQuery.Action("EncryptedEmail");
            sfApiQuery.Uri(shareUrl);
            sfApiQuery.HttpMethod = "GET";	
            return sfApiQuery;
        }
        
        /// <summary>
        /// Get Received EncryptedEmails
        /// GET https://account.sf-api.com/sf/v3/EncryptedEmails/Received
        /// </summary>
        /// <remarks>
        /// Get list of EncryptedEmails received by the current User.
        /// </remarks>
        /// <returns>
        /// Feed of EncryptedEmails
        /// </returns>
        public IQuery<ODataFeed<EncryptedEmail>> Received()
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<ODataFeed<EncryptedEmail>>(Client);
            sfApiQuery.From("EncryptedEmails");
            sfApiQuery.Action("Received");
            sfApiQuery.HttpMethod = "GET";	
            return sfApiQuery;
        }
        
        /// <summary>
        /// Get Sent EncryptedEmails
        /// GET https://account.sf-api.com/sf/v3/EncryptedEmails/Sent
        /// </summary>
        /// <remarks>
        /// Get list of EncryptedEmails sent by the current User.
        /// </remarks>
        /// <returns>
        /// Feed of EncryptedEmails
        /// </returns>
        public IQuery<ODataFeed<EncryptedEmail>> Sent()
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<ODataFeed<EncryptedEmail>>(Client);
            sfApiQuery.From("EncryptedEmails");
            sfApiQuery.Action("Sent");
            sfApiQuery.HttpMethod = "GET";	
            return sfApiQuery;
        }
        
        /// <summary>
        /// Create EncryptedEmail
        /// </summary>
        /// <example>
        /// {
        /// "ToRecipients":[{"Email":"email@domain.com"}, {"Email":"email2@domain.com"}],
        /// "CcRecipients":[{"Email":"email@domain.com"}, {"Email":"email2@domain.com"}],
        /// "Subject": "Email Subject",
        /// "NotifyOnUse": true,
        /// "ExpirationDays":180,
        /// "RequireUserInfo": false,
        /// "RequireLogin": true
        /// }
        /// </example>
        /// <remarks>
        /// Create a new empty EncryptedEmail without a body or attachments. This request does not Send the EncryptedEmail,
        /// see the "Send EncryptedEmail" endpoint for steps to send a new EncryptedEmail
        /// </remarks>
        /// <param name="encryptedEmailParams"></param>
        /// <returns>
        /// EncryptedEmail
        /// </returns>
        public IQuery<EncryptedEmail> Create(EncryptedEmailCreateParams encryptedEmailParams)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<EncryptedEmail>(Client);
            sfApiQuery.From("EncryptedEmails");
            sfApiQuery.Body = encryptedEmailParams;
            sfApiQuery.HttpMethod = "POST";	
            return sfApiQuery;
        }
        
        /// <summary>
        /// Reply to an EncryptedEmail
        /// </summary>
        /// <example>
        /// {
        /// "ToRecipients":[{"Email":"email@domain.com"}, {"Email":"email2@domain.com"}],
        /// "CcRecipients":[{"Email":"email@domain.com"}, {"Email":"email2@domain.com"}],
        /// "Subject": "Email Subject",
        /// "NotifyOnUse": true,
        /// "ExpirationDays":180
        /// }
        /// </example>
        /// <remarks>
        /// Create a new EncryptedEmail in reply to another EncryptedEmail. This request does not Send the EncryptedEmail,
        /// see the "Send EncryptedEmail" endpoint for steps to send a new EncryptedEmail
        /// </remarks>
        /// <param name="url"></param>
        /// <param name="encryptedEmailParams"></param>
        /// <returns>
        /// Created EncryptedEmail
        /// </returns>
        public IQuery<EncryptedEmail> Reply(Uri url, EncryptedEmailReplyParams encryptedEmailParams)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<EncryptedEmail>(Client);
            sfApiQuery.Action("Reply");
            sfApiQuery.Uri(url);
            sfApiQuery.Body = encryptedEmailParams;
            sfApiQuery.HttpMethod = "POST";	
            return sfApiQuery;
        }
        
        /// <summary>
        /// Reply to all EncryptedEmail Recipients
        /// </summary>
        /// <example>
        /// {
        /// "Subject":"subject",
        /// "ExpirationDays":180
        /// }
        /// </example>
        /// <remarks>
        /// Create EncryptedEmail in Reply to all recipients in the EncryptedEmail identified by the provided Id, including
        /// ToRecipients, CcRecipients, and BccRecipients. This request does not Send the EncryptedEmail,
        /// see the "Send EncryptedEmail" endpoint for steps to send a new EncryptedEmail
        /// </remarks>
        /// <param name="url"></param>
        /// <param name="encryptedEmailParams"></param>
        /// <returns>
        /// Create EncryptedEmail
        /// </returns>
        public IQuery<EncryptedEmail> ReplyAll(Uri url, EncryptedEmailParams encryptedEmailParams)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<EncryptedEmail>(Client);
            sfApiQuery.Action("ReplyAll");
            sfApiQuery.Uri(url);
            sfApiQuery.Body = encryptedEmailParams;
            sfApiQuery.HttpMethod = "POST";	
            return sfApiQuery;
        }
        
        /// <summary>
        /// Send EncryptedEmail
        /// </summary>
        /// <example>
        /// {
        /// "Message": {"Id": "messageFileId"},
        /// "Attachments": [{"Id": "id1"}, {"Id": "id2"}],
        /// }
        /// </example>
        /// <remarks>
        /// Sending an EncryptedEmail is a multi-step process:1. Create an empty EncryptedEmail using the "Create EncryptedEmail" or "Reply to EncryptedEmail" endpoints 2. Upload the message body as raw text or a text file using the "Upload EncryptedEmail Message" endpoint 3. Send the EncryptedEmail using the "Send EncryptedEmail" endpoint, providing the fileId uploaded in step 2 as
        /// the "Message" Item parameter. Provide a list of optional Item attachments during this step as well
        /// </remarks>
        /// <param name="url"></param>
        /// <param name="encryptedEmailSendParams"></param>
        public IQuery Send(Uri url, EncryptedEmailSendParams encryptedEmailSendParams)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query(Client);
            sfApiQuery.Action("Send");
            sfApiQuery.Uri(url);
            sfApiQuery.Body = encryptedEmailSendParams;
            sfApiQuery.HttpMethod = "POST";	
            return sfApiQuery;
        }
        
        /// <summary>
        /// Upload EncryptedEmail Message
        /// </summary>
        /// <example>
        /// {
        /// "Method":"Standard",
        /// "Raw": true,
        /// "FileName":"message.txt",
        /// "FileSize": 0
        /// }
        /// </example>
        /// <remarks>
        /// Upload EncryptedEmail message. For simplicity, it is recommended to send the request with the body parameter
        /// "Raw": true. The Api endpoint will respond with an UploadSpecification object with a ChunkUri value, which is the url
        /// to which the message body can be POSTed as a file. The "Raw" flag allows you to POST the EncryptedEmail body as a text
        /// string in the Http request, instead of the traditional multi-part file approach, which is preferable for a simple text file.
        /// This endpoint behaves the same way as Items(id)/Upload2, which can be referenced for more details
        /// </remarks>
        /// <param name="parentUrl"></param>
        /// <param name="uploadParams"></param>
        /// <param name="expirationDays"></param>
        /// <returns>
        /// UploadSpecification object
        /// </returns>
        public IQuery<UploadSpecification> Upload2(Uri parentUrl, UploadRequestParams uploadParams, int? expirationDays = null)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<UploadSpecification>(Client);
            sfApiQuery.Action("Upload2");
            sfApiQuery.Uri(parentUrl);
            sfApiQuery.QueryString("expirationDays", expirationDays);
            sfApiQuery.Body = uploadParams;
            sfApiQuery.HttpMethod = "POST";	
            return sfApiQuery;
        }
        
        /// <summary>
        /// Download EncryptedEmail Message
        /// </summary>
        /// <param name="url"></param>
        /// <param name="aliasId"></param>
        /// <param name="redirect"></param>
        /// <returns>
        /// File if redirect=true, DownloadSpecification object otherwise
        /// </returns>
        public IQuery<System.IO.Stream> Message(Uri url, string aliasId = null, bool redirect = true)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<System.IO.Stream>(Client);
            sfApiQuery.Action("Message");
            sfApiQuery.Uri(url);
            sfApiQuery.QueryString("aliasId", aliasId);
            sfApiQuery.QueryString("redirect", redirect);
            sfApiQuery.HttpMethod = "GET";	
            return sfApiQuery;
        }
        
        /// <summary>
        /// Delete EncryptedEmail
        /// </summary>
        /// <remarks>
        /// Access to message and attachments via created ShareAliases will be revoked as well.
        /// </remarks>
        /// <param name="url"></param>
        public IQuery Delete(Uri url)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query(Client);
            sfApiQuery.Uri(url);
            sfApiQuery.HttpMethod = "DELETE";	
            return sfApiQuery;
        }
    }
}
