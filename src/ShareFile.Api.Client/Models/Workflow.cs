// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2018 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Net;

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using ShareFile.Api.Client.Extensions;
using ShareFile.Api.Client.Exceptions;

namespace ShareFile.Api.Client.Models 
{
	/// <summary>
	/// Represents a ShareFile Workflow
	/// </summary>
	public class Workflow : ODataObject 
	{
		public DateTime? Created { get; set; }
		public DateTime? Due { get; set; }
		public DateTime? LastComment { get; set; }
		public string StreamId { get; set; }
		public string FileName { get; set; }
		public string DisplayName { get; set; }
		public Item Item { get; set; }
		public SafeEnum<WorkflowStatus> Status { get; set; }
		public DateTime? LastStatusUpdate { get; set; }
		public IEnumerable<WorkflowParticipant> Participants { get; set; }
		public SafeEnum<WorkflowType> WorkflowType { get; set; }
		public Uri ShareableLinkUrl { get; set; }
		public int Version { get; set; }

		public override void Copy(ODataObject source, JsonSerializer serializer)
		{
			if(source == null || serializer == null) return;
			base.Copy(source, serializer);

			var typedSource = source as Workflow;
			if(typedSource != null)
			{
				Created = typedSource.Created;
				Due = typedSource.Due;
				LastComment = typedSource.LastComment;
				StreamId = typedSource.StreamId;
				FileName = typedSource.FileName;
				DisplayName = typedSource.DisplayName;
				Item = typedSource.Item;
				Status = typedSource.Status;
				LastStatusUpdate = typedSource.LastStatusUpdate;
				Participants = typedSource.Participants;
				WorkflowType = typedSource.WorkflowType;
				ShareableLinkUrl = typedSource.ShareableLinkUrl;
				Version = typedSource.Version;
			}
			else
			{
				JToken token;
				if(source.TryGetProperty("Created", out token) && token.Type != JTokenType.Null)
				{
					Created = (DateTime?)serializer.Deserialize(token.CreateReader(), typeof(DateTime?));
				}
				if(source.TryGetProperty("Due", out token) && token.Type != JTokenType.Null)
				{
					Due = (DateTime?)serializer.Deserialize(token.CreateReader(), typeof(DateTime?));
				}
				if(source.TryGetProperty("LastComment", out token) && token.Type != JTokenType.Null)
				{
					LastComment = (DateTime?)serializer.Deserialize(token.CreateReader(), typeof(DateTime?));
				}
				if(source.TryGetProperty("StreamId", out token) && token.Type != JTokenType.Null)
				{
					StreamId = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("FileName", out token) && token.Type != JTokenType.Null)
				{
					FileName = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("DisplayName", out token) && token.Type != JTokenType.Null)
				{
					DisplayName = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("Item", out token) && token.Type != JTokenType.Null)
				{
					Item = (Item)serializer.Deserialize(token.CreateReader(), typeof(Item));
				}
				if(source.TryGetProperty("Status", out token) && token.Type != JTokenType.Null)
				{
					Status = (SafeEnum<WorkflowStatus>)serializer.Deserialize(token.CreateReader(), typeof(SafeEnum<WorkflowStatus>));
				}
				if(source.TryGetProperty("LastStatusUpdate", out token) && token.Type != JTokenType.Null)
				{
					LastStatusUpdate = (DateTime?)serializer.Deserialize(token.CreateReader(), typeof(DateTime?));
				}
				if(source.TryGetProperty("Participants", out token) && token.Type != JTokenType.Null)
				{
					Participants = (IEnumerable<WorkflowParticipant>)serializer.Deserialize(token.CreateReader(), typeof(IEnumerable<WorkflowParticipant>));
				}
				if(source.TryGetProperty("WorkflowType", out token) && token.Type != JTokenType.Null)
				{
					WorkflowType = (SafeEnum<WorkflowType>)serializer.Deserialize(token.CreateReader(), typeof(SafeEnum<WorkflowType>));
				}
				if(source.TryGetProperty("ShareableLinkUrl", out token) && token.Type != JTokenType.Null)
				{
					ShareableLinkUrl = (Uri)serializer.Deserialize(token.CreateReader(), typeof(Uri));
				}
				if(source.TryGetProperty("Version", out token) && token.Type != JTokenType.Null)
				{
					Version = (int)serializer.Deserialize(token.CreateReader(), typeof(int));
				}
			}
		}
	}
}