// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2015 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using ShareFile.Api.Models;
using ShareFile.Api.Client;
using ShareFile.Api.Client.Requests;
using ShareFile.Api.Client.Extensions;

namespace ShareFile.Api.Client.Entities
{
    public interface IOAuthClientsEntityInternal : IEntityBase
    {
        
        /// <summary>
        /// Get List of OAuthClients for the Current Account
        /// </summary>
        /// <returns>
        /// List of OAuthClients
        /// </returns>
        IQuery<ODataFeed<OAuthClient>> Get();
        
        /// <summary>
        /// Get OAuthClient
        /// </summary>
        /// <param name="url"></param>
        /// <returns>
        /// a single OAuthClient
        /// </returns>
        IQuery<OAuthClient> Get(Uri url);
        
        /// <summary>
        /// Get List of OAuthClients for the Specified Account
        /// </summary>
        /// <param name="accountId"></param>
        /// <returns>
        /// List of OAuthClients
        /// </returns>
        IQuery<ODataFeed<OAuthClient>> ByAccount(string accountId);
        
        /// <summary>
        /// Create OAuthClient
        /// </summary>
        /// <example>
        /// {
        /// "Name":"App Name",
        /// "RedirectUrls":["https:///redirectUrl1", "https:///redirectUrl2"],
        /// "ToolUrl":"https:///toolUrl"
        /// }
        /// </example>
        /// <param name="oauthClient"></param>
        /// <returns>
        /// created OAuthClient
        /// </returns>
        IQuery<OAuthClient> Create(OAuthClient oauthClient, bool singlePlane = false);
        
        /// <summary>
        /// Update OAuthClient
        /// </summary>
        /// <example>
        /// {
        /// "State":"Revoked",
        /// "Name":"Updated App Name",
        /// "RedirectUrls":["https:///redirectUrl1", "https:///redirectUrl2"],
        /// "ToolUrl":"https:///toolUrl"
        /// }
        /// </example>
        /// <param name="url"></param>
        /// <returns>
        /// updated OAuthClient
        /// </returns>
        IQuery<OAuthClient> Update(Uri url, OAuthClient oauthClient, bool singlePlane = false);
        
        /// <summary>
        /// Delete OAuthClient
        /// </summary>
        /// <returns>
        /// no data
        /// </returns>
        IQuery Delete(Uri url, bool singlePlane = false);
        
        /// <summary>
        /// get an OAuth code to be used to exchange for a OAuth token
        /// </summary>
        /// <param name="appCode"></param>
        /// <returns>
        /// OAuth code
        /// </returns>
        IQuery<OAuthCode> GetOAuthCode(AppCodes appCode);
    }

    public class OAuthClientsEntityInternal : EntityBase, IOAuthClientsEntityInternal
    {
        public OAuthClientsEntityInternal (IShareFileClient client)
            : base (client, "OAuthClients")
        { }
        
        
        /// <summary>
        /// Get List of OAuthClients for the Current Account
        /// </summary>
        /// <returns>
        /// List of OAuthClients
        /// </returns>
        public IQuery<ODataFeed<OAuthClient>> Get()
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<ODataFeed<OAuthClient>>(Client);
		    sfApiQuery.From("OAuthClients");
            sfApiQuery.HttpMethod = "GET";	
		    return sfApiQuery;
        }
        
        /// <summary>
        /// Get OAuthClient
        /// </summary>
        /// <param name="url"></param>
        /// <returns>
        /// a single OAuthClient
        /// </returns>
        public IQuery<OAuthClient> Get(Uri url)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<OAuthClient>(Client);
            sfApiQuery.Uri(url);
            sfApiQuery.HttpMethod = "GET";	
		    return sfApiQuery;
        }
        
        /// <summary>
        /// Get List of OAuthClients for the Specified Account
        /// </summary>
        /// <param name="accountId"></param>
        /// <returns>
        /// List of OAuthClients
        /// </returns>
        public IQuery<ODataFeed<OAuthClient>> ByAccount(string accountId)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<ODataFeed<OAuthClient>>(Client);
		    sfApiQuery.From("OAuthClients");
		    sfApiQuery.Action("ByAccount");
            sfApiQuery.QueryString("accountId", accountId);
            sfApiQuery.HttpMethod = "GET";	
		    return sfApiQuery;
        }
        
        /// <summary>
        /// Create OAuthClient
        /// </summary>
        /// <example>
        /// {
        /// "Name":"App Name",
        /// "RedirectUrls":["https:///redirectUrl1", "https:///redirectUrl2"],
        /// "ToolUrl":"https:///toolUrl"
        /// }
        /// </example>
        /// <param name="oauthClient"></param>
        /// <returns>
        /// created OAuthClient
        /// </returns>
        public IQuery<OAuthClient> Create(OAuthClient oauthClient, bool singlePlane = false)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<OAuthClient>(Client);
		    sfApiQuery.From("OAuthClients");
            sfApiQuery.QueryString("singlePlane", singlePlane);
            sfApiQuery.Body = oauthClient;
            sfApiQuery.HttpMethod = "POST";	
		    return sfApiQuery;
        }
        
        /// <summary>
        /// Update OAuthClient
        /// </summary>
        /// <example>
        /// {
        /// "State":"Revoked",
        /// "Name":"Updated App Name",
        /// "RedirectUrls":["https:///redirectUrl1", "https:///redirectUrl2"],
        /// "ToolUrl":"https:///toolUrl"
        /// }
        /// </example>
        /// <param name="url"></param>
        /// <returns>
        /// updated OAuthClient
        /// </returns>
        public IQuery<OAuthClient> Update(Uri url, OAuthClient oauthClient, bool singlePlane = false)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<OAuthClient>(Client);
            sfApiQuery.Uri(url);
            sfApiQuery.QueryString("singlePlane", singlePlane);
            sfApiQuery.Body = oauthClient;
            sfApiQuery.HttpMethod = "GET";	
		    return sfApiQuery;
        }
        
        /// <summary>
        /// Delete OAuthClient
        /// </summary>
        /// <returns>
        /// no data
        /// </returns>
        public IQuery Delete(Uri url, bool singlePlane = false)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query(Client);
            sfApiQuery.Uri(url);
            sfApiQuery.QueryString("singlePlane", singlePlane);
            sfApiQuery.HttpMethod = "GET";	
		    return sfApiQuery;
        }
        
        /// <summary>
        /// get an OAuth code to be used to exchange for a OAuth token
        /// </summary>
        /// <param name="appCode"></param>
        /// <returns>
        /// OAuth code
        /// </returns>
        public IQuery<OAuthCode> GetOAuthCode(AppCodes appCode)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<OAuthCode>(Client);
		    sfApiQuery.From("OAuthClients");
		    sfApiQuery.Action("GetOAuthCode");
            sfApiQuery.QueryString("appCode", appCode);
            sfApiQuery.HttpMethod = "POST";	
		    return sfApiQuery;
        }
    }
}