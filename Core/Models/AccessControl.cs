// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2014 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using ShareFile.Api.Client.Extensions;

namespace ShareFile.Api.Models 
{
	public class AccessControl : ODataObject 
	{

		/// <summary>
		/// Item that was given permission through this rule
		/// </summary>
		public Item Item { get; set; }

		public Principal Principal { get; set; }

		/// <summary>
		/// Defines whether the principal can add files (upload) into the Item
		/// </summary>
		public bool? CanUpload { get; set; }

		/// <summary>
		/// Defines whether the principal can read file content (download) from this Item
		/// </summary>
		public bool? CanDownload { get; set; }

		/// <summary>
		/// Defines whether the principal can view items (browse) from this Item
		/// </summary>
		public bool? CanView { get; set; }

		/// <summary>
		/// Defines whether the principal can remove items from this Item
		/// </summary>
		public bool? CanDelete { get; set; }

		/// <summary>
		/// Defines whether the principal can configure Access Controls in this Item
		/// </summary>
		public bool? CanManagePermissions { get; set; }

		/// <summary>
		/// Defines the notification preference for upload events. If set, the principal will receive
		/// notifications when new files are uploaded into this Item
		/// </summary>
		public bool? NotifyOnUpload { get; set; }

		/// <summary>
		/// Defines the notification preference for download events. If set, the principal will receive
		/// notifiation when items are downloaded from this Item.
		/// </summary>
		public bool? NotifyOnDownload { get; set; }

		/// <summary>
		/// Defines whether the principal is the owner of this Item
		/// </summary>
		public bool? IsOwner { get; set; }

		public override void Copy(ODataObject source, JsonSerializer serializer)
		{
			if(source == null || serializer == null) return;
			base.Copy(source, serializer);

			var typedSource = source as AccessControl;
			if(typedSource != null)
			{
				Item = typedSource.Item;
				Principal = typedSource.Principal;
				CanUpload = typedSource.CanUpload;
				CanDownload = typedSource.CanDownload;
				CanView = typedSource.CanView;
				CanDelete = typedSource.CanDelete;
				CanManagePermissions = typedSource.CanManagePermissions;
				NotifyOnUpload = typedSource.NotifyOnUpload;
				NotifyOnDownload = typedSource.NotifyOnDownload;
				IsOwner = typedSource.IsOwner;
			}
			else
			{
				JToken token;
				if(source.TryGetProperty("Item", out token) && token.Type != JTokenType.Null)
				{
					Item = (Item)serializer.Deserialize(token.CreateReader(), typeof(Item));
				}
				if(source.TryGetProperty("Principal", out token) && token.Type != JTokenType.Null)
				{
					Principal = (Principal)serializer.Deserialize(token.CreateReader(), typeof(Principal));
				}
				if(source.TryGetProperty("CanUpload", out token) && token.Type != JTokenType.Null)
				{
					CanUpload = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("CanDownload", out token) && token.Type != JTokenType.Null)
				{
					CanDownload = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("CanView", out token) && token.Type != JTokenType.Null)
				{
					CanView = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("CanDelete", out token) && token.Type != JTokenType.Null)
				{
					CanDelete = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("CanManagePermissions", out token) && token.Type != JTokenType.Null)
				{
					CanManagePermissions = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("NotifyOnUpload", out token) && token.Type != JTokenType.Null)
				{
					NotifyOnUpload = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("NotifyOnDownload", out token) && token.Type != JTokenType.Null)
				{
					NotifyOnDownload = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("IsOwner", out token) && token.Type != JTokenType.Null)
				{
					IsOwner = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
			}
		}
	}
}