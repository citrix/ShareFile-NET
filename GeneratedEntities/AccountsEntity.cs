// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2014 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using ShareFile.Api.Models;
using ShareFile.Api.Client;

namespace ShareFile.Api.Client
{
	public class AccountsEntity : ODataEntityBase
	{
		/// <summary>
		/// Get current Account
		/// </summary>
		/// <remarks>
		/// Retrieves information about the Account defined in the call subdomain
		/// </remarks>
		/// <returns>
		/// The subdomain account information
		/// </returns>
		public IQuery<Account> Get()
		{
			IQuery<Account> query = new IQuery<Account>(Client);
			query.From("Accounts");
			query.HttpMethod = "GET";
			return query;
		}

		/// <summary>
		/// Get current Account branding
		/// </summary>
		/// <remarks>
		/// Retrievs Branding information about the subdomain account.
		/// This operation does not require authentication.
		/// </remarks>
		/// <returns>
		/// Branding information for a given sharefile account
		/// </returns>
		public IQuery<Account> GetBranding()
		{
			IQuery<Account> query = new IQuery<Account>(Client);
			query.From("Accounts");
			query.Action("Branding");
			query.HttpMethod = "GET";
			return query;
		}

		/// <summary>
		/// Get List of current Account Employees
		/// </summary>
		/// <remarks>
		/// Retrives the list of Employees in the Account
		/// Employees are named users in the Account.
		/// </remarks>
		/// <returns>
		/// A Feed containing all Employees Contacts in the account
		/// </returns>
		public IQuery<ODataFeed<Contact>> GetEmployees()
		{
			IQuery<ODataFeed<Contact>> query = new IQuery<ODataFeed<Contact>>(Client);
			query.From("Accounts");
			query.Action("Employees");
			query.HttpMethod = "GET";
			return query;
		}

		/// <summary>
		/// Get List of current Account Clients
		/// </summary>
		/// <remarks>
		/// Retrieves the list of Clients in the Account.
		/// Clients are restricted users of an Account, that can receive and send files
		/// to Employees, but have no other permissions besides basic sharing with Employees.
		/// </remarks>
		/// <returns>
		/// A Feed containing all Clients in the account
		/// </returns>
		public IQuery<ODataFeed<Contact>> GetClients()
		{
			IQuery<ODataFeed<Contact>> query = new IQuery<ODataFeed<Contact>>(Client);
			query.From("Accounts");
			query.Action("Clients");
			query.HttpMethod = "GET";
			return query;
		}

		/// <summary>
		/// Get Account AddressBooks
		/// </summary>
		/// <remarks>
		/// Retrieves an address book from the account.
		/// Address Books are the contacts of Eployees and Clients, maintained on a personal or
		/// account-wide basis (shared).
		/// </remarks>
		/// <param name="type"></param>
		/// <param name="searchTerm"></param>
		/// <returns>
		/// A Feed of Contact objects representing the Address Book retrieved
		/// </returns>
		public IQuery<ODataFeed<Contact>> GetAddressBook(string type = "personal", string searchTerm = "")
		{
			IQuery<ODataFeed<Contact>> query = new IQuery<ODataFeed<Contact>>(Client);
			query.From("Accounts");
			query.Action("AddressBook");
			query.QueryString("type", type);
			query.QueryString("searchTerm", searchTerm);
			query.HttpMethod = "GET";
			return query;
		}

		/// <summary>
		/// Get Account Mobile Security Settings
		/// </summary>
		/// <remarks>
		/// Returns the Mobile device configuration settings for this account
		/// </remarks>
		/// <returns>
		/// The current mobile security configuration for this account
		/// </returns>
		public IQuery<MobileSecuritySettings> GetMobileSecuritySettings()
		{
			IQuery<MobileSecuritySettings> query = new IQuery<MobileSecuritySettings>(Client);
			query.From("Accounts");
			query.Action("MobileSecuritySettings");
			query.HttpMethod = "GET";
			return query;
		}

		public IQuery<ProductDefaults> GetProductDefaults()
		{
			IQuery<ProductDefaults> query = new IQuery<ProductDefaults>(Client);
			query.From("Accounts");
			query.Action("ProductDefaults");
			query.HttpMethod = "GET";
			return query;
		}

		public IQuery<AccountPreferences> GetPreferences()
		{
			IQuery<AccountPreferences> query = new IQuery<AccountPreferences>(Client);
			query.From("Accounts");
			query.Action("Preferences");
			query.HttpMethod = "GET";
			return query;
		}

		/// <summary>
		/// Get Account Single Sign-On Configuration
		/// </summary>
		/// <remarks>
		/// Retrieve the Single Sign-on configuration for the Account
		/// </remarks>
		/// <param name="provider"></param>
		public IQuery<SSOAccountProvider> GetSSO(string provider = "saml")
		{
			IQuery<SSOAccountProvider> query = new IQuery<SSOAccountProvider>(Client);
			query.From("Accounts");
			query.Action("SSO");
			query.QueryString("provider", provider);
			query.HttpMethod = "GET";
			return query;
		}

		/// <summary>
		/// Update Account Single Sign-On Configuration
		/// </summary>
		/// <example>
		/// {
		/// "LogoutUrl":"",
		/// "LoginUrl":"https://idp.com/signin",
		/// "IPRestrictions":"+all",
		/// "ForceSSO":true,
		/// "EntityID":"http://account.sf-api.com/saml/info",
		/// "SFEntityID":"http://idp.com/saml/info",
		/// "SPInitatedAuthContext":"exact",
		/// "SPInitatedAuthMethod":"urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport"
		/// }
		/// </example>
		/// <remarks>
		/// Modifies the Single Sign-on Configuration for this account.
		/// </remarks>
		/// <param name="sso"></param>
		/// <param name="provider"></param>
		public IQuery<SSOAccountProvider> UpdateSSO(SSOAccountProvider sso, string provider = "saml")
		{
			IQuery<SSOAccountProvider> query = new IQuery<SSOAccountProvider>(Client);
			query.From("Accounts");
			query.Action("SSO");
			query.QueryString("provider", provider);
			query.Body = sso;
			query.HttpMethod = "PATCH";
			return query;
		}

		/// <summary>
		/// Email List of Accounts to User
		/// </summary>
		/// <example>
		/// {
		/// "password":"password"
		/// }
		/// </example>
		/// <remarks>
		/// Retrieve the list of Accounts associated with a given user
		/// All parameters to this call may be passed in the Post body as root JSON parameters, or in the URI -
		/// with the exception of password that must be provided in the POST body.
		/// This operation does not require authentication
		/// </remarks>
		/// <param name="username"></param>
		/// <param name="password"></param>
		/// <param name="employeesonly"></param>
		/// <param name="requirehomefolders"></param>
		/// <returns>
		/// The list of Accounts associated with this username/password.
		/// </returns>
		public IQuery<ODataFeed<Account>> GetByUser(ODataObject parameters, string username, bool employeesonly = false, bool requirehomefolders = false)
		{
			IQuery<ODataFeed<Account>> query = new IQuery<ODataFeed<Account>>(Client);
			query.From("Accounts");
			query.Action("GetByUser");
			parameters.Properties["username"] = username;
			parameters.Properties["employeesonly"] = employeesonly;
			parameters.Properties["requirehomefolders"] = requirehomefolders;
			query.Body = parameters;
			query.HttpMethod = "GET";
			return query;
		}

		/// <summary>
		/// Email List of Accounts to User
		/// </summary>
		/// <remarks>
		/// Sends the list of accounts to the specified email address
		/// This operation does not require authentication
		/// </remarks>
		/// <param name="email"></param>
		public IQuery SendToEmail(string email)
		{
			IQuery query = new IQuery(Client);
			query.From("Accounts");
			query.Action("SendToEmail");
			query.QueryString("email", email);
			query.HttpMethod = "POST";
			return query;
		}

		/// <summary>
		/// Get the Login Access Control List of domains
		/// </summary>
		/// <remarks>
		/// Retrieve the list of domains that are allowed or disallowed to login.
		/// Whether the list is an allow or disallow list
		/// is configured by the AccessControlType property. The domain names are checked against the domains of all the
		/// email addresses of the user that attempts to log in to the Account.
		/// </remarks>
		/// <returns>
		/// The Login Access Control List of domains for the Account.
		/// </returns>
		public IQuery<AccessControlDomains> GetLoginAccessControlDomains()
		{
			IQuery<AccessControlDomains> query = new IQuery<AccessControlDomains>(Client);
			query.From("Accounts");
			query.Action("LoginAccessControlDomains");
			query.HttpMethod = "GET";
			return query;
		}

		/// <summary>
		/// Get the Folder Access Control List of domains
		/// </summary>
		/// <remarks>
		/// Retrieve the list of domains that are allowed or disallowed to have access to folders. Whether the list is an allow or disallow list
		/// is configured by the AccessControlType property.
		/// 
		/// The list blocks user access to folders by preventing adding a user to distribution groups or folders.
		/// The domain names are checked against the domains of all the email addresses of the user.
		/// This is an account-wide setting.
		/// </remarks>
		/// <returns>
		/// The Folder Access Control List of domains for the Account, e.g.
		/// 
		/// {
		/// "AccessControlType" : "AllowedDomains",
		/// "Domains": ["domainA", "domainB", ...]
		/// }
		/// </returns>
		public IQuery<AccessControlDomains> GetFolderAccessControlDomains()
		{
			IQuery<AccessControlDomains> query = new IQuery<AccessControlDomains>(Client);
			query.From("Accounts");
			query.Action("FolderAccessControlDomains");
			query.HttpMethod = "GET";
			return query;
		}

		/// <summary>
		/// Create or replace the Login Access Control List of domains
		/// </summary>
		/// <example>
		/// {
		/// "AccessControlType" : "AllowedDomains",
		/// "Domains": ["domainA", "domainB", ...]
		/// }
		/// </example>
		/// <param name="AccessControlType"></param>
		/// <param name="Domains"></param>
		/// <returns>
		/// The new Login Access Control List of domains for the Account
		/// </returns>
		public IQuery<AccessControlDomains> CreateLoginAccessControlDomains(AccessControlDomains accessControlDomains)
		{
			IQuery<AccessControlDomains> query = new IQuery<AccessControlDomains>(Client);
			query.From("Accounts");
			query.Action("LoginAccessControlDomains");
			query.Body = accessControlDomains;
			query.HttpMethod = "POST";
			return query;
		}

		/// <summary>
		/// Create or replace the Folder Access Control List of domains
		/// </summary>
		/// <example>
		/// {
		/// "AccessControlType" : "AllowedDomains",
		/// "Domains": ["domainA", "domainB", ...]
		/// }
		/// </example>
		/// <param name="AccessControlType"></param>
		/// <param name="Domains"></param>
		/// <returns>
		/// The new Folder Access Control List of domains for the Account
		/// </returns>
		public IQuery<AccessControlDomains> CreateFolderAccessControlDomains(AccessControlDomains accessControlDomains)
		{
			IQuery<AccessControlDomains> query = new IQuery<AccessControlDomains>(Client);
			query.From("Accounts");
			query.Action("FolderAccessControlDomains");
			query.Body = accessControlDomains;
			query.HttpMethod = "POST";
			return query;
		}

		/// <summary>
		/// Update the Login Access Control List of domains
		/// </summary>
		/// <example>
		/// {
		/// "AccessControlType" : "AllowedDomains",
		/// "Domains": ["domainA", "domainB", ...]
		/// }
		/// </example>
		/// <remarks>
		/// Merges the specified domains with existing domains in the list, and/or updates the AccessControlType. One of the parameters needs to be specified.
		/// </remarks>
		/// <param name="AccessControlType"></param>
		/// <param name="Domains"></param>
		/// <returns>
		/// The updated Login Access Control List of domains for the Account
		/// </returns>
		public IQuery<AccessControlDomains> UpdateLoginAccessControlDomains(AccessControlDomains accessControlDomains)
		{
			IQuery<AccessControlDomains> query = new IQuery<AccessControlDomains>(Client);
			query.From("Accounts");
			query.Action("LoginAccessControlDomains");
			query.Body = accessControlDomains;
			query.HttpMethod = "PATCH";
			return query;
		}

		/// <summary>
		/// Update the Folder Access Control List of domains
		/// </summary>
		/// <example>
		/// {
		/// "AccessControlType" : "AllowedDomains",
		/// "Domains": ["domainA", "domainB", ...]
		/// }
		/// </example>
		/// <remarks>
		/// Merges the specified domains with existing domains in the list, and/or updates the AccessControlType. One of the parameters needs to be specified. It
		/// allows to add new domains to the list.
		/// </remarks>
		/// <param name="AccessControlType"></param>
		/// <param name="Domains"></param>
		/// <returns>
		/// The updated Folder Access Control List of domains for the Account
		/// </returns>
		public IQuery<AccessControlDomains> UpdateFolderAccessControlDomains(AccessControlDomains accessControlDomains)
		{
			IQuery<AccessControlDomains> query = new IQuery<AccessControlDomains>(Client);
			query.From("Accounts");
			query.Action("FolderAccessControlDomains");
			query.Body = accessControlDomains;
			query.HttpMethod = "PATCH";
			return query;
		}

		/// <summary>
		/// Delete domains from the Logins Access Control List of domains
		/// </summary>
		/// <example>
		/// {
		/// "AccessControlType" : "AllowedDomains",
		/// "Domains": ["domainA", "domainB", ...]
		/// }
		/// </example>
		/// <remarks>
		/// Deletes the specified domains from the list.
		/// </remarks>
		/// <param name="AccessControlType"></param>
		/// <param name="Domains"></param>
		/// <returns>
		/// No content
		/// </returns>
		public IQuery DeleteLoginAccessControlDomains(AccessControlDomains accessControlDomains)
		{
			IQuery query = new IQuery(Client);
			query.From("Accounts");
			query.Action("LoginAccessControlDomains");
			query.Body = accessControlDomains;
			query.HttpMethod = "DELETE";
			return query;
		}

		/// <summary>
		/// Delete domains from the Folder Access Control List of domains
		/// </summary>
		/// <example>
		/// {
		/// "AccessControlType" : "AllowedDomains",
		/// "Domains": ["domainA", "domainB", ...]
		/// }
		/// </example>
		/// <remarks>
		/// Deletes the specified domains from the list.
		/// </remarks>
		/// <param name="AccessControlType"></param>
		/// <param name="Domains"></param>
		/// <returns>
		/// No content
		/// </returns>
		public IQuery DeleteFolderAccessControlDomains(AccessControlDomains accessControlDomains)
		{
			IQuery query = new IQuery(Client);
			query.From("Accounts");
			query.Action("FolderAccessControlDomains");
			query.Body = accessControlDomains;
			query.HttpMethod = "DELETE";
			return query;
		}

		/// <summary>
		/// Check if WebPop is required
		/// </summary>
		/// <param name="subdomain"></param>
		/// <param name="username"></param>
		/// <param name="singlePlane"></param>
		/// <returns>
		/// RequireWebPopResult
		/// </returns>
		public IQuery<RequireWebPopResult> RequireWebPop(string subdomain, string username, bool singlePlane = false)
		{
			IQuery<RequireWebPopResult> query = new IQuery<RequireWebPopResult>(Client);
			query.From("Accounts");
			query.Action("RequireWebPop");
			query.QueryString("subdomain", subdomain);
			query.QueryString("username", username);
			query.QueryString("singlePlane", singlePlane);
			query.HttpMethod = "GET";
			return query;
		}

		/// <summary>
		/// Check if subdomain is required
		/// </summary>
		/// <param name="username"></param>
		/// <param name="singlePlane"></param>
		/// <returns>
		/// RequireSubdomainResult
		/// </returns>
		public IQuery<RequireSubdomainResult> RequireSubdomain(string username, bool singlePlane = false)
		{
			IQuery<RequireSubdomainResult> query = new IQuery<RequireSubdomainResult>(Client);
			query.From("Accounts");
			query.Action("RequireSubdomain");
			query.QueryString("username", username);
			query.QueryString("singlePlane", singlePlane);
			query.HttpMethod = "GET";
			return query;
		}

		/// <summary>
		/// Find Subdomain
		/// </summary>
		/// <example>
		/// {
		/// "UsernameShort":"usernameShort",
		/// "Password":"pass",
		/// "EmployeeOnly":false
		/// }
		/// </example>
		/// <remarks>
		/// Find the user account information based on the short username
		/// </remarks>
		/// <param name="findSubdomainParams"></param>
		/// <param name="singlePlane"></param>
		/// <returns>
		/// FindSubdomainResult
		/// </returns>
		public IQuery<FindSubdomainResult> FindSubdomain(FindSubdomainParams findSubdomainParams, bool singlePlane = false)
		{
			IQuery<FindSubdomainResult> query = new IQuery<FindSubdomainResult>(Client);
			query.From("Accounts");
			query.Action("FindSubdomain");
			query.QueryString("singlePlane", singlePlane);
			query.Body = findSubdomainParams;
			query.HttpMethod = "POST";
			return query;
		}

		/// <summary>
		/// Get SSO Info
		/// </summary>
		/// <param name="subdomain"></param>
		/// <returns>
		/// SSOInfo
		/// </returns>
		public IQuery<SSOInfo> GetSSOInfo(string subdomain)
		{
			IQuery<SSOInfo> query = new IQuery<SSOInfo>(Client);
			query.From("Accounts");
			query.Action("SSOInfo");
			query.QueryString("subdomain", subdomain);
			query.HttpMethod = "GET";
			return query;
		}

	}
}
