// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2015 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using ShareFile.Api.Models;
using ShareFile.Api.Client;
using ShareFile.Api.Client.Requests;
using ShareFile.Api.Client.Extensions;

namespace ShareFile.Api.Client.Entities
{
    public interface IQueuesEntityInternal : IEntityBase
    {
        
        /// <summary>
        /// Get List of Queues
        /// </summary>
        /// <remarks>
        /// Retrieve list of system Queues associated with the authenticated Zone.
        /// </remarks>
        /// <returns>
        /// the list of system Queues for the authenticated Zone
        /// </returns>
        IQuery<ODataFeed<Queue>> Get();
        
        /// <summary>
        /// Get single Queue
        /// </summary>
        /// <param name="url"></param>
        /// <returns>
        /// A single Queue represented by the ID
        /// </returns>
        IQuery<Queue> Get(Uri url);
        
        /// <summary>
        /// Get Queue Entry
        /// </summary>
        /// <param name="qUrl"></param>
        /// <param name="eid"></param>
        /// <returns>
        /// A single queue entry element
        /// </returns>
        IQuery<QueueEntry> GetEntries(Uri qUrl, string eid);
        
        /// <summary>
        /// Add Queue Entry
        /// </summary>
        /// <remarks>
        /// Adds a new queue entry, referencing an existing Work Item.
        /// The return (void) is not standard, this method should not be used directly.
        /// </remarks>
        /// <param name="url"></param>
        /// <param name="entry"></param>
        IQuery CreateEntries(Uri url, QueueEntry entry);
        
        /// <summary>
        /// Receive Queue Entries
        /// </summary>
        /// <remarks>
        /// Retrieve the $top elements of the queue - default is 1. Elements returned
        /// are locked; therefore the caller must process the element.
        /// </remarks>
        /// <param name="url"></param>
        /// <returns>
        /// List of queue entries, in creation order (FIFO). Elements are automatically locekd and
        /// won't be retrieved by other workers.
        /// </returns>
        IQuery<ODataFeed<QueueEntry>> Receive(Uri url);
        
        /// <summary>
        /// Complete Queue Operation
        /// </summary>
        /// <example>
        /// { "key": "value" }
        /// </example>
        /// <remarks>
        /// Indicate the worker has completed the work item. The queue entry is removed. Workers
        /// may pass additional completion parameters that trigger other metadata changes. For eSignature
        /// queue, the completion parameter SignedItemId indicates the new item containing the signed
        /// document.
        /// </remarks>
        /// <param name="url"></param>
        /// <param name="result"></param>
        IQuery Complete(Uri url, ODataObject result, string grandparentid);
        
        /// <summary>
        /// Modifies a Queue Entry
        /// </summary>
        /// <remarks>
        /// Limited patching for queue entry metadata. Currently supports the SignedItem
        /// attribute for esignature queue
        /// </remarks>
        /// <param name="qUrl"></param>
        /// <param name="eid"></param>
        /// <param name="entry"></param>
        IQuery Update(Uri qUrl, string eid, QueueEntry entry);
        
        /// <summary>
        /// Delete Queue Entry
        /// </summary>
        /// <remarks>
        /// Removes the queue entry
        /// </remarks>
        /// <param name="qUrl"></param>
        /// <param name="eid"></param>
        IQuery Delete(Uri qUrl, string eid);
    }

    public class QueuesEntityInternal : EntityBase, IQueuesEntityInternal
    {
        public QueuesEntityInternal (IShareFileClient client)
            : base (client, "Queues")
        { }
        
        
        /// <summary>
        /// Get List of Queues
        /// </summary>
        /// <remarks>
        /// Retrieve list of system Queues associated with the authenticated Zone.
        /// </remarks>
        /// <returns>
        /// the list of system Queues for the authenticated Zone
        /// </returns>
        public IQuery<ODataFeed<Queue>> Get()
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<ODataFeed<Queue>>(Client);
		    sfApiQuery.From("Queues");
            sfApiQuery.HttpMethod = "GET";	
		    return sfApiQuery;
        }
        
        /// <summary>
        /// Get single Queue
        /// </summary>
        /// <param name="url"></param>
        /// <returns>
        /// A single Queue represented by the ID
        /// </returns>
        public IQuery<Queue> Get(Uri url)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<Queue>(Client);
            sfApiQuery.Uri(url);
            sfApiQuery.HttpMethod = "GET";	
		    return sfApiQuery;
        }
        
        /// <summary>
        /// Get Queue Entry
        /// </summary>
        /// <param name="qUrl"></param>
        /// <param name="eid"></param>
        /// <returns>
        /// A single queue entry element
        /// </returns>
        public IQuery<QueueEntry> GetEntries(Uri qUrl, string eid)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<QueueEntry>(Client);
		    sfApiQuery.Action("Entries");
            sfApiQuery.Uri(qUrl);
            sfApiQuery.ActionIds(eid);
            sfApiQuery.HttpMethod = "GET";	
		    return sfApiQuery;
        }
        
        /// <summary>
        /// Add Queue Entry
        /// </summary>
        /// <remarks>
        /// Adds a new queue entry, referencing an existing Work Item.
        /// The return (void) is not standard, this method should not be used directly.
        /// </remarks>
        /// <param name="url"></param>
        /// <param name="entry"></param>
        public IQuery CreateEntries(Uri url, QueueEntry entry)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query(Client);
		    sfApiQuery.Action("Entries");
            sfApiQuery.Uri(url);
            sfApiQuery.Body = entry;
            sfApiQuery.HttpMethod = "POST";	
		    return sfApiQuery;
        }
        
        /// <summary>
        /// Receive Queue Entries
        /// </summary>
        /// <remarks>
        /// Retrieve the $top elements of the queue - default is 1. Elements returned
        /// are locked; therefore the caller must process the element.
        /// </remarks>
        /// <param name="url"></param>
        /// <returns>
        /// List of queue entries, in creation order (FIFO). Elements are automatically locekd and
        /// won't be retrieved by other workers.
        /// </returns>
        public IQuery<ODataFeed<QueueEntry>> Receive(Uri url)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<ODataFeed<QueueEntry>>(Client);
		    sfApiQuery.Action("Receive");
            sfApiQuery.Uri(url);
            sfApiQuery.HttpMethod = "POST";	
		    return sfApiQuery;
        }
        
        /// <summary>
        /// Complete Queue Operation
        /// </summary>
        /// <example>
        /// { "key": "value" }
        /// </example>
        /// <remarks>
        /// Indicate the worker has completed the work item. The queue entry is removed. Workers
        /// may pass additional completion parameters that trigger other metadata changes. For eSignature
        /// queue, the completion parameter SignedItemId indicates the new item containing the signed
        /// document.
        /// </remarks>
        /// <param name="url"></param>
        /// <param name="result"></param>
        public IQuery Complete(Uri url, ODataObject result, string grandparentid)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query(Client);
		    sfApiQuery.Action("Complete");
            sfApiQuery.Uri(url);
            sfApiQuery.QueryString("grandparentid", grandparentid);
            sfApiQuery.Body = result;
            sfApiQuery.HttpMethod = "POST";	
		    return sfApiQuery;
        }
        
        /// <summary>
        /// Modifies a Queue Entry
        /// </summary>
        /// <remarks>
        /// Limited patching for queue entry metadata. Currently supports the SignedItem
        /// attribute for esignature queue
        /// </remarks>
        /// <param name="qUrl"></param>
        /// <param name="eid"></param>
        /// <param name="entry"></param>
        public IQuery Update(Uri qUrl, string eid, QueueEntry entry)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query(Client);
		    sfApiQuery.Action("Entries");
            sfApiQuery.Uri(qUrl);
            sfApiQuery.ActionIds(eid);
            sfApiQuery.Body = entry;
            sfApiQuery.HttpMethod = "PATCH";	
		    return sfApiQuery;
        }
        
        /// <summary>
        /// Delete Queue Entry
        /// </summary>
        /// <remarks>
        /// Removes the queue entry
        /// </remarks>
        /// <param name="qUrl"></param>
        /// <param name="eid"></param>
        public IQuery Delete(Uri qUrl, string eid)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query(Client);
		    sfApiQuery.Action("Entries");
            sfApiQuery.Uri(qUrl);
            sfApiQuery.ActionIds(eid);
            sfApiQuery.HttpMethod = "DELETE";	
		    return sfApiQuery;
        }
    }
}