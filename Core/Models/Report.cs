// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2015 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Net;

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using ShareFile.Api.Client.Extensions;
using ShareFile.Api.Client.Exceptions;

namespace ShareFile.Api.Models 
{
	public class Report : ODataObject 
	{

		public string AccountId { get; set; }

		public string Title { get; set; }

		public SafeEnum<ReportType> ReportType { get; set; }

		public SafeEnum<ReportObjectType> ObjectType { get; set; }

		public string ObjectId { get; set; }

		public SafeEnum<ReportDateOption> DateOption { get; set; }

		public string ActivityTypes { get; set; }

		/// <summary>
		/// The Start Date of the range the ReportRecord will be run against
		/// </summary>
		public DateTime? StartDate { get; set; }

		/// <summary>
		/// The End Date of the range the ReportRecord will be run against
		/// </summary>
		public DateTime? EndDate { get; set; }

		public DateTime? LastRunDate { get; set; }

		public bool? IsRecurring { get; set; }

		public bool? IsScheduled { get; set; }

		public bool? IncludeSubFolders { get; set; }

		public bool? SaveToFolder { get; set; }

		public string SaveFormat { get; set; }

		public string SaveFolderId { get; set; }

		public Item SaveFolder { get; set; }

		public User Creator { get; set; }

		public string CreatorId { get; set; }

		public IEnumerable<ReportRecord> Records { get; set; }

		public DateTime? CreateDate { get; set; }

		public SafeEnum<ReportRunFrequency> Frequency { get; set; }

		public int? DayOfWeek { get; set; }

		public int? DayOfMonth { get; set; }

		public bool? EmailNotice { get; set; }

		public string EmailToNotify { get; set; }

		public override void Copy(ODataObject source, JsonSerializer serializer)
		{
			if(source == null || serializer == null) return;
			base.Copy(source, serializer);

			var typedSource = source as Report;
			if(typedSource != null)
			{
				AccountId = typedSource.AccountId;
				Title = typedSource.Title;
				ReportType = typedSource.ReportType;
				ObjectType = typedSource.ObjectType;
				ObjectId = typedSource.ObjectId;
				DateOption = typedSource.DateOption;
				ActivityTypes = typedSource.ActivityTypes;
				StartDate = typedSource.StartDate;
				EndDate = typedSource.EndDate;
				LastRunDate = typedSource.LastRunDate;
				IsRecurring = typedSource.IsRecurring;
				IsScheduled = typedSource.IsScheduled;
				IncludeSubFolders = typedSource.IncludeSubFolders;
				SaveToFolder = typedSource.SaveToFolder;
				SaveFormat = typedSource.SaveFormat;
				SaveFolderId = typedSource.SaveFolderId;
				SaveFolder = typedSource.SaveFolder;
				Creator = typedSource.Creator;
				CreatorId = typedSource.CreatorId;
				Records = typedSource.Records;
				CreateDate = typedSource.CreateDate;
				Frequency = typedSource.Frequency;
				DayOfWeek = typedSource.DayOfWeek;
				DayOfMonth = typedSource.DayOfMonth;
				EmailNotice = typedSource.EmailNotice;
				EmailToNotify = typedSource.EmailToNotify;
			}
			else
			{
				JToken token;
				if(source.TryGetProperty("AccountId", out token) && token.Type != JTokenType.Null)
				{
					AccountId = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("Title", out token) && token.Type != JTokenType.Null)
				{
					Title = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("ReportType", out token) && token.Type != JTokenType.Null)
				{
					ReportType = (SafeEnum<ReportType>)serializer.Deserialize(token.CreateReader(), typeof(SafeEnum<ReportType>));
				}
				if(source.TryGetProperty("ObjectType", out token) && token.Type != JTokenType.Null)
				{
					ObjectType = (SafeEnum<ReportObjectType>)serializer.Deserialize(token.CreateReader(), typeof(SafeEnum<ReportObjectType>));
				}
				if(source.TryGetProperty("ObjectId", out token) && token.Type != JTokenType.Null)
				{
					ObjectId = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("DateOption", out token) && token.Type != JTokenType.Null)
				{
					DateOption = (SafeEnum<ReportDateOption>)serializer.Deserialize(token.CreateReader(), typeof(SafeEnum<ReportDateOption>));
				}
				if(source.TryGetProperty("ActivityTypes", out token) && token.Type != JTokenType.Null)
				{
					ActivityTypes = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("StartDate", out token) && token.Type != JTokenType.Null)
				{
					StartDate = (DateTime?)serializer.Deserialize(token.CreateReader(), typeof(DateTime?));
				}
				if(source.TryGetProperty("EndDate", out token) && token.Type != JTokenType.Null)
				{
					EndDate = (DateTime?)serializer.Deserialize(token.CreateReader(), typeof(DateTime?));
				}
				if(source.TryGetProperty("LastRunDate", out token) && token.Type != JTokenType.Null)
				{
					LastRunDate = (DateTime?)serializer.Deserialize(token.CreateReader(), typeof(DateTime?));
				}
				if(source.TryGetProperty("IsRecurring", out token) && token.Type != JTokenType.Null)
				{
					IsRecurring = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("IsScheduled", out token) && token.Type != JTokenType.Null)
				{
					IsScheduled = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("IncludeSubFolders", out token) && token.Type != JTokenType.Null)
				{
					IncludeSubFolders = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("SaveToFolder", out token) && token.Type != JTokenType.Null)
				{
					SaveToFolder = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("SaveFormat", out token) && token.Type != JTokenType.Null)
				{
					SaveFormat = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("SaveFolderId", out token) && token.Type != JTokenType.Null)
				{
					SaveFolderId = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("SaveFolder", out token) && token.Type != JTokenType.Null)
				{
					SaveFolder = (Item)serializer.Deserialize(token.CreateReader(), typeof(Item));
				}
				if(source.TryGetProperty("Creator", out token) && token.Type != JTokenType.Null)
				{
					Creator = (User)serializer.Deserialize(token.CreateReader(), typeof(User));
				}
				if(source.TryGetProperty("CreatorId", out token) && token.Type != JTokenType.Null)
				{
					CreatorId = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("Records", out token) && token.Type != JTokenType.Null)
				{
					Records = (IEnumerable<ReportRecord>)serializer.Deserialize(token.CreateReader(), typeof(IEnumerable<ReportRecord>));
				}
				if(source.TryGetProperty("CreateDate", out token) && token.Type != JTokenType.Null)
				{
					CreateDate = (DateTime?)serializer.Deserialize(token.CreateReader(), typeof(DateTime?));
				}
				if(source.TryGetProperty("Frequency", out token) && token.Type != JTokenType.Null)
				{
					Frequency = (SafeEnum<ReportRunFrequency>)serializer.Deserialize(token.CreateReader(), typeof(SafeEnum<ReportRunFrequency>));
				}
				if(source.TryGetProperty("DayOfWeek", out token) && token.Type != JTokenType.Null)
				{
					DayOfWeek = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("DayOfMonth", out token) && token.Type != JTokenType.Null)
				{
					DayOfMonth = (int?)serializer.Deserialize(token.CreateReader(), typeof(int?));
				}
				if(source.TryGetProperty("EmailNotice", out token) && token.Type != JTokenType.Null)
				{
					EmailNotice = (bool?)serializer.Deserialize(token.CreateReader(), typeof(bool?));
				}
				if(source.TryGetProperty("EmailToNotify", out token) && token.Type != JTokenType.Null)
				{
					EmailToNotify = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
			}
		}
	}
}