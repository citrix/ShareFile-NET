// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2018 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Net;

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using ShareFile.Api.Client.Extensions;
using ShareFile.Api.Client.Exceptions;

namespace ShareFile.Api.Client.Models 
{
	/// <summary>
	/// The parameters we need for user confirm flow
	/// </summary>
	public class UserConfirmRequirement : ODataObject 
	{
		public string AuthenticationId { get; set; }
		public bool IsProbableSAMLOnlyUser { get; set; }
		public bool IsADLinked { get; set; }
		public string ADUserName { get; set; }
		public string TempPassword { get; set; }
		public bool IsUnlicensedUser { get; set; }
		public ClientUpgradeWeb ClientUpgradeWeb { get; set; }
		public User User { get; set; }

		public override void Copy(ODataObject source, JsonSerializer serializer)
		{
			if(source == null || serializer == null) return;
			base.Copy(source, serializer);

			var typedSource = source as UserConfirmRequirement;
			if(typedSource != null)
			{
				AuthenticationId = typedSource.AuthenticationId;
				IsProbableSAMLOnlyUser = typedSource.IsProbableSAMLOnlyUser;
				IsADLinked = typedSource.IsADLinked;
				ADUserName = typedSource.ADUserName;
				TempPassword = typedSource.TempPassword;
				IsUnlicensedUser = typedSource.IsUnlicensedUser;
				ClientUpgradeWeb = typedSource.ClientUpgradeWeb;
				User = typedSource.User;
			}
			else
			{
				JToken token;
				if(source.TryGetProperty("AuthenticationId", out token) && token.Type != JTokenType.Null)
				{
					AuthenticationId = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("IsProbableSAMLOnlyUser", out token) && token.Type != JTokenType.Null)
				{
					IsProbableSAMLOnlyUser = (bool)serializer.Deserialize(token.CreateReader(), typeof(bool));
				}
				if(source.TryGetProperty("IsADLinked", out token) && token.Type != JTokenType.Null)
				{
					IsADLinked = (bool)serializer.Deserialize(token.CreateReader(), typeof(bool));
				}
				if(source.TryGetProperty("ADUserName", out token) && token.Type != JTokenType.Null)
				{
					ADUserName = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("TempPassword", out token) && token.Type != JTokenType.Null)
				{
					TempPassword = (string)serializer.Deserialize(token.CreateReader(), typeof(string));
				}
				if(source.TryGetProperty("IsUnlicensedUser", out token) && token.Type != JTokenType.Null)
				{
					IsUnlicensedUser = (bool)serializer.Deserialize(token.CreateReader(), typeof(bool));
				}
				if(source.TryGetProperty("ClientUpgradeWeb", out token) && token.Type != JTokenType.Null)
				{
					ClientUpgradeWeb = (ClientUpgradeWeb)serializer.Deserialize(token.CreateReader(), typeof(ClientUpgradeWeb));
				}
				if(source.TryGetProperty("User", out token) && token.Type != JTokenType.Null)
				{
					User = (User)serializer.Deserialize(token.CreateReader(), typeof(User));
				}
			}
		}
	}
}