// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2018 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using ShareFile.Api.Client;
using ShareFile.Api.Client.Extensions;
using ShareFile.Api.Client.Models;
using ShareFile.Api.Client.Requests;


namespace ShareFile.Api.Client.Entities
{
    public interface IAccessControlsEntity : IEntityBase
    {
        
        /// <summary>
        /// Get AccessControl by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a single Access Control entry for a given Item and Principal
        /// </remarks>
        /// <returns>
        /// A single AccessControl object matching the query
        /// </returns>
        IQuery<AccessControl> Get(Uri url);
        
        /// <summary>
        /// Get AccessControl List By Item
        /// </summary>
        /// <remarks>
        /// Retrieves the Access Control List for a given Item.
        /// </remarks>
        /// <param name="url"></param>
        /// <returns>
        /// Access Control List of the given object ID.
        /// </returns>
        IQuery<ODataFeed<AccessControl>> GetByItem(Uri url);
        
        /// <summary>
        /// Create AccessControl
        /// </summary>
        /// <example>
        /// {
        /// "Principal":{"url":"https://account.sf-api.com/v3/Groups(id)"},
        /// "CanUpload":true,
        /// "CanDownload":true,
        /// "CanView":true,
        /// "CanDelete":true,
        /// "CanManagePermissions":true,
        /// "Message":"Message"
        /// }
        /// </example>
        /// <remarks>
        /// Creates a new Access Controls entry for a given Item. Access controls can only define a single Principal,
        /// which can be either a Group or User. The 'Principal' element is specified as an object - you should populate
        /// either the URL or the ID reference.
        /// 
        /// If CanDownload is set to true, CanView will automatically be set to true.
        /// If CanDownload is set to false, CanDelete will be set to false.
        /// In order for a user/group to be able to manage permissions, they must be able to upload, download, and delete. Otherwise it will be set to false.
        /// 
        /// This endpoint can return an AsyncOperation if the request is to be fulfilled asynchronously
        /// </remarks>
        /// <param name="url"></param>
        /// <param name="accessControl"></param>
        /// <param name="recursive"></param>
        /// <param name="message"></param>
        /// <param name="sendDefaultNotification"></param>
        /// <returns>
        /// the created or modified AccessControl instance, or AsyncOperation
        /// </returns>
        IQuery<AccessControl> CreateByItem(Uri url, AccessControl accessControl, bool recursive = false, bool sendDefaultNotification = false, string message = null);
        
        /// <summary>
        /// Update AccessControl
        /// </summary>
        /// <example>
        /// {
        /// "Principal":{"Email":"user@domain.com"},
        /// "CanUpload":true,
        /// "CanDownload":true,
        /// "CanView":true,
        /// "CanDelete":true,
        /// "CanManagePermissions":true
        /// }
        /// </example>
        /// <remarks>
        /// Updates an existing Access Controls of a given Item. The Principal element cannot be modified, it is provided
        /// in the Body to identity the AccessControl element to be modified. You can provide an ID, Email or URL on the
        /// Principal object.
        /// 
        /// This endpoint can return an AsyncOperation if the request is to be fulfilled asynchronously
        /// </remarks>
        /// <param name="url"></param>
        /// <param name="accessControl"></param>
        /// <param name="recursive"></param>
        /// <returns>
        /// the created or modified AccessControl instance, or AsyncOperation
        /// </returns>
        IQuery<AccessControl> UpdateByItem(Uri url, AccessControl accessControl, bool recursive = false);
        
        /// <summary>
        /// Delete AccessControl
        /// </summary>
        /// <remarks>
        /// Deletes an AccessControl entry by itemID and principalID. This method does not return any object, a 204 (No Content)
        /// response indicates success.
        /// </remarks>
        IQuery Delete(Uri url);
        
        /// <summary>
        /// Create or Update multiple AccessControls for a given Item
        /// </summary>
        /// <example>
        /// {
        /// "NotifyUser":true,
        /// "NotifyMessage":"msg",
        /// 
        /// "AccessControlParams":
        /// [
        /// {
        /// "AccessControl":
        /// {
        /// "Principal" : { "Id":"existing_user_id" },
        /// "CanUpload" : true,
        /// "CanDownload" : false,
        /// "CanView" : true
        /// },
        /// "NotifyUser":false
        /// },
        /// {
        /// "AccessControl":
        /// {
        /// "Principal" : { "Id":"group_id" },
        /// "CanUpload" : false,
        /// "CanDownload" : true,
        /// "CanView" : true
        /// },
        /// "Recursive":true
        /// },
        /// {
        /// "AccessControl":
        /// {
        /// "Principal" : { "Email":"new_or_existing_user@a.com" },
        /// "CanUpload" : false,
        /// "CanDownload" : true,
        /// "CanView" : true
        /// }
        /// }
        /// ]
        /// }
        /// </example>
        /// <remarks>
        /// All the AccessControls are created or updated for a single Item identified by the Item id in the URI. AccessControl.Item Ids are not allowed.
        /// If an AccessControl doesn't specify NotifyUser or NotifyMessage property their values are inherited from the corresponding
        /// top-level properties.
        /// The Principal can be identified by Id or Email (Users). If a User with the specified email does not exist it will be created.
        /// Defaults for NotifyUser and Recursive are false.
        /// See AccessControlsBulkParams for other details.
        /// </remarks>
        /// <param name="url"></param>
        /// <param name="bulkParams"></param>
        /// <returns>
        /// AccessControlBulkResult
        /// </returns>
        IQuery<AccessControlBulkResult> BulkSet(Uri url, AccessControlsBulkParams bulkParams);
        
        /// <summary>
        /// Update multiple access controls for a single principal
        /// </summary>
        /// <example>
        /// {
        /// "NotifyUser":true,
        /// "NotifyMessage":"msg",
        /// 
        /// "AccessControlParams":
        /// [
        /// {
        /// "AccessControl":
        /// {
        /// "Item": { "Id": "item-id-1" },
        /// "Principal" : { "Id":"existing_user_id" },
        /// "CanUpload" : true,
        /// "CanDownload" : false,
        /// "CanView" : true
        /// },
        /// "NotifyUser":false
        /// },
        /// {
        /// "AccessControl":
        /// {
        /// "Item": { "Id": "item-id-3" },
        /// "Principal" : { "Id":"group_id" },
        /// "CanUpload" : false,
        /// "CanDownload" : true,
        /// "CanView" : true
        /// },
        /// "Recursive":true
        /// },
        /// {
        /// "AccessControl":
        /// {
        /// "Item": { "Id": "item-id-2" },
        /// "Principal" : { "Email":"new_or_existing_user@a.com" },
        /// "CanUpload" : false,
        /// "CanDownload" : true,
        /// "CanView" : true
        /// }
        /// }
        /// ]
        /// }
        /// </example>
        /// <param name="principalId"></param>
        /// <param name="bulkParams"></param>
        /// <returns>
        /// AccessControlBulkResult
        /// </returns>
        IQuery<AccessControlBulkResult> BulkSetForPrincipal(AccessControlsBulkParams bulkParams, string principalId);
        
        /// <summary>
        /// Recursively clones multiple access controls for multiple principals
        /// </summary>
        /// <example>
        /// {
        /// "FolderId":"top-level-folder-id",
        /// "PrincipalId":"source-user-or-group-id",
        /// "ClonePrincipalIds":
        /// [
        /// "clone-user-or-group-id-1",
        /// "clone-user-or-group-id-2",
        /// "clone-user-or-group-id-3"
        /// ]
        /// }
        /// </example>
        /// <param name="accessControlsCloneParams"></param>
        /// <returns>
        /// Cloned access controls
        /// </returns>
        IQuery<AccessControlBulkResult> Clone(AccessControlsCloneParams accessControlsCloneParams);
        
        /// <summary>
        /// Delete multiple access controls
        /// </summary>
        /// <example>
        /// ["id1","id2"]
        /// </example>
        /// <param name="folderUrl"></param>
        /// <param name="principalIds"></param>
        IQuery BulkDelete(Uri folderUrl, IEnumerable<string> principalIds);
        
        /// <summary>
        /// Delete multiple access controls for principal
        /// </summary>
        /// <example>
        /// ["id1","id2"]
        /// </example>
        /// <param name="principalId"></param>
        /// <param name="folderIds"></param>
        IQuery BulkDeleteForPrincipal(IEnumerable<string> folderIds, string principalId);
        
        /// <summary>
        /// Notify users that they have access to the parent folder
        /// </summary>
        /// <example>
        /// {
        /// UserIds: ["id1", "id2"],
        /// CustomMessage: "Message content goes here"
        /// }
        /// </example>
        /// <remarks>
        /// All users should have access to the parent folder
        /// </remarks>
        /// <param name="folderUrl"></param>
        /// <param name="notifyUsersParams"></param>
        IQuery NotifyUsers(Uri folderUrl, NotifyUsersParams notifyUsersParams);
        
        /// <summary>
        /// Shows preview of the folder user email
        /// </summary>
        /// <param name="folderUrl"></param>
        /// <param name="notifyUsersParams"></param>
        IQuery<System.IO.Stream> NotifyUsersPreview(Uri folderUrl, NotifyUsersParams notifyUsersParams);
    }

    public class AccessControlsEntity : EntityBase, IAccessControlsEntity
    {
        public AccessControlsEntity (IShareFileClient client)
            : base (client, "AccessControls")
        { }
        
        
        /// <summary>
        /// Get AccessControl by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a single Access Control entry for a given Item and Principal
        /// </remarks>
        /// <returns>
        /// A single AccessControl object matching the query
        /// </returns>
        public IQuery<AccessControl> Get(Uri url)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<AccessControl>(Client);
            sfApiQuery.Uri(url);
            sfApiQuery.HttpMethod = "GET";	
            return sfApiQuery;
        }
        
        /// <summary>
        /// Get AccessControl List By Item
        /// </summary>
        /// <remarks>
        /// Retrieves the Access Control List for a given Item.
        /// </remarks>
        /// <param name="url"></param>
        /// <returns>
        /// Access Control List of the given object ID.
        /// </returns>
        public IQuery<ODataFeed<AccessControl>> GetByItem(Uri url)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<ODataFeed<AccessControl>>(Client);
            sfApiQuery.Action("AccessControls");
            sfApiQuery.Uri(url);
            sfApiQuery.HttpMethod = "GET";	
            return sfApiQuery;
        }
        
        /// <summary>
        /// Create AccessControl
        /// </summary>
        /// <example>
        /// {
        /// "Principal":{"url":"https://account.sf-api.com/v3/Groups(id)"},
        /// "CanUpload":true,
        /// "CanDownload":true,
        /// "CanView":true,
        /// "CanDelete":true,
        /// "CanManagePermissions":true,
        /// "Message":"Message"
        /// }
        /// </example>
        /// <remarks>
        /// Creates a new Access Controls entry for a given Item. Access controls can only define a single Principal,
        /// which can be either a Group or User. The 'Principal' element is specified as an object - you should populate
        /// either the URL or the ID reference.
        /// 
        /// If CanDownload is set to true, CanView will automatically be set to true.
        /// If CanDownload is set to false, CanDelete will be set to false.
        /// In order for a user/group to be able to manage permissions, they must be able to upload, download, and delete. Otherwise it will be set to false.
        /// 
        /// This endpoint can return an AsyncOperation if the request is to be fulfilled asynchronously
        /// </remarks>
        /// <param name="url"></param>
        /// <param name="accessControl"></param>
        /// <param name="recursive"></param>
        /// <param name="message"></param>
        /// <param name="sendDefaultNotification"></param>
        /// <returns>
        /// the created or modified AccessControl instance, or AsyncOperation
        /// </returns>
        public IQuery<AccessControl> CreateByItem(Uri url, AccessControl accessControl, bool recursive = false, bool sendDefaultNotification = false, string message = null)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<AccessControl>(Client);
            sfApiQuery.Action("AccessControls");
            sfApiQuery.Uri(url);
            sfApiQuery.QueryString("recursive", recursive);
            sfApiQuery.QueryString("sendDefaultNotification", sendDefaultNotification);
            accessControl.AddProperty("Message", message);
            sfApiQuery.Body = accessControl;
            sfApiQuery.HttpMethod = "POST";	
            return sfApiQuery;
        }
        
        /// <summary>
        /// Update AccessControl
        /// </summary>
        /// <example>
        /// {
        /// "Principal":{"Email":"user@domain.com"},
        /// "CanUpload":true,
        /// "CanDownload":true,
        /// "CanView":true,
        /// "CanDelete":true,
        /// "CanManagePermissions":true
        /// }
        /// </example>
        /// <remarks>
        /// Updates an existing Access Controls of a given Item. The Principal element cannot be modified, it is provided
        /// in the Body to identity the AccessControl element to be modified. You can provide an ID, Email or URL on the
        /// Principal object.
        /// 
        /// This endpoint can return an AsyncOperation if the request is to be fulfilled asynchronously
        /// </remarks>
        /// <param name="url"></param>
        /// <param name="accessControl"></param>
        /// <param name="recursive"></param>
        /// <returns>
        /// the created or modified AccessControl instance, or AsyncOperation
        /// </returns>
        public IQuery<AccessControl> UpdateByItem(Uri url, AccessControl accessControl, bool recursive = false)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<AccessControl>(Client);
            sfApiQuery.Action("AccessControls");
            sfApiQuery.Uri(url);
            sfApiQuery.QueryString("recursive", recursive);
            sfApiQuery.Body = accessControl;
            sfApiQuery.HttpMethod = "PATCH";	
            return sfApiQuery;
        }
        
        /// <summary>
        /// Delete AccessControl
        /// </summary>
        /// <remarks>
        /// Deletes an AccessControl entry by itemID and principalID. This method does not return any object, a 204 (No Content)
        /// response indicates success.
        /// </remarks>
        public IQuery Delete(Uri url)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query(Client);
            sfApiQuery.Uri(url);
            sfApiQuery.HttpMethod = "DELETE";	
            return sfApiQuery;
        }
        
        /// <summary>
        /// Create or Update multiple AccessControls for a given Item
        /// </summary>
        /// <example>
        /// {
        /// "NotifyUser":true,
        /// "NotifyMessage":"msg",
        /// 
        /// "AccessControlParams":
        /// [
        /// {
        /// "AccessControl":
        /// {
        /// "Principal" : { "Id":"existing_user_id" },
        /// "CanUpload" : true,
        /// "CanDownload" : false,
        /// "CanView" : true
        /// },
        /// "NotifyUser":false
        /// },
        /// {
        /// "AccessControl":
        /// {
        /// "Principal" : { "Id":"group_id" },
        /// "CanUpload" : false,
        /// "CanDownload" : true,
        /// "CanView" : true
        /// },
        /// "Recursive":true
        /// },
        /// {
        /// "AccessControl":
        /// {
        /// "Principal" : { "Email":"new_or_existing_user@a.com" },
        /// "CanUpload" : false,
        /// "CanDownload" : true,
        /// "CanView" : true
        /// }
        /// }
        /// ]
        /// }
        /// </example>
        /// <remarks>
        /// All the AccessControls are created or updated for a single Item identified by the Item id in the URI. AccessControl.Item Ids are not allowed.
        /// If an AccessControl doesn't specify NotifyUser or NotifyMessage property their values are inherited from the corresponding
        /// top-level properties.
        /// The Principal can be identified by Id or Email (Users). If a User with the specified email does not exist it will be created.
        /// Defaults for NotifyUser and Recursive are false.
        /// See AccessControlsBulkParams for other details.
        /// </remarks>
        /// <param name="url"></param>
        /// <param name="bulkParams"></param>
        /// <returns>
        /// AccessControlBulkResult
        /// </returns>
        public IQuery<AccessControlBulkResult> BulkSet(Uri url, AccessControlsBulkParams bulkParams)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<AccessControlBulkResult>(Client);
            sfApiQuery.Action("AccessControls");
            sfApiQuery.Uri(url);
            sfApiQuery.SubAction("BulkSet");
            sfApiQuery.Body = bulkParams;
            sfApiQuery.HttpMethod = "POST";	
            return sfApiQuery;
        }
        
        /// <summary>
        /// Update multiple access controls for a single principal
        /// </summary>
        /// <example>
        /// {
        /// "NotifyUser":true,
        /// "NotifyMessage":"msg",
        /// 
        /// "AccessControlParams":
        /// [
        /// {
        /// "AccessControl":
        /// {
        /// "Item": { "Id": "item-id-1" },
        /// "Principal" : { "Id":"existing_user_id" },
        /// "CanUpload" : true,
        /// "CanDownload" : false,
        /// "CanView" : true
        /// },
        /// "NotifyUser":false
        /// },
        /// {
        /// "AccessControl":
        /// {
        /// "Item": { "Id": "item-id-3" },
        /// "Principal" : { "Id":"group_id" },
        /// "CanUpload" : false,
        /// "CanDownload" : true,
        /// "CanView" : true
        /// },
        /// "Recursive":true
        /// },
        /// {
        /// "AccessControl":
        /// {
        /// "Item": { "Id": "item-id-2" },
        /// "Principal" : { "Email":"new_or_existing_user@a.com" },
        /// "CanUpload" : false,
        /// "CanDownload" : true,
        /// "CanView" : true
        /// }
        /// }
        /// ]
        /// }
        /// </example>
        /// <param name="principalId"></param>
        /// <param name="bulkParams"></param>
        /// <returns>
        /// AccessControlBulkResult
        /// </returns>
        public IQuery<AccessControlBulkResult> BulkSetForPrincipal(AccessControlsBulkParams bulkParams, string principalId)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<AccessControlBulkResult>(Client);
            sfApiQuery.From("AccessControls");
            sfApiQuery.Action("BulkSetForPrincipal");
            sfApiQuery.QueryString("principalId", principalId);
            sfApiQuery.Body = bulkParams;
            sfApiQuery.HttpMethod = "POST";	
            return sfApiQuery;
        }
        
        /// <summary>
        /// Recursively clones multiple access controls for multiple principals
        /// </summary>
        /// <example>
        /// {
        /// "FolderId":"top-level-folder-id",
        /// "PrincipalId":"source-user-or-group-id",
        /// "ClonePrincipalIds":
        /// [
        /// "clone-user-or-group-id-1",
        /// "clone-user-or-group-id-2",
        /// "clone-user-or-group-id-3"
        /// ]
        /// }
        /// </example>
        /// <param name="accessControlsCloneParams"></param>
        /// <returns>
        /// Cloned access controls
        /// </returns>
        public IQuery<AccessControlBulkResult> Clone(AccessControlsCloneParams accessControlsCloneParams)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<AccessControlBulkResult>(Client);
            sfApiQuery.From("AccessControls");
            sfApiQuery.Action("Clone");
            sfApiQuery.Body = accessControlsCloneParams;
            sfApiQuery.HttpMethod = "POST";	
            return sfApiQuery;
        }
        
        /// <summary>
        /// Delete multiple access controls
        /// </summary>
        /// <example>
        /// ["id1","id2"]
        /// </example>
        /// <param name="folderUrl"></param>
        /// <param name="principalIds"></param>
        public IQuery BulkDelete(Uri folderUrl, IEnumerable<string> principalIds)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query(Client);
            sfApiQuery.Action("AccessControls");
            sfApiQuery.Uri(folderUrl);
            sfApiQuery.SubAction("BulkDelete");
            sfApiQuery.Body = principalIds;
            sfApiQuery.HttpMethod = "POST";	
            return sfApiQuery;
        }
        
        /// <summary>
        /// Delete multiple access controls for principal
        /// </summary>
        /// <example>
        /// ["id1","id2"]
        /// </example>
        /// <param name="principalId"></param>
        /// <param name="folderIds"></param>
        public IQuery BulkDeleteForPrincipal(IEnumerable<string> folderIds, string principalId)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query(Client);
            sfApiQuery.From("AccessControls");
            sfApiQuery.Action("BulkDeleteForPrincipal");
            sfApiQuery.QueryString("principalId", principalId);
            sfApiQuery.Body = folderIds;
            sfApiQuery.HttpMethod = "POST";	
            return sfApiQuery;
        }
        
        /// <summary>
        /// Notify users that they have access to the parent folder
        /// </summary>
        /// <example>
        /// {
        /// UserIds: ["id1", "id2"],
        /// CustomMessage: "Message content goes here"
        /// }
        /// </example>
        /// <remarks>
        /// All users should have access to the parent folder
        /// </remarks>
        /// <param name="folderUrl"></param>
        /// <param name="notifyUsersParams"></param>
        public IQuery NotifyUsers(Uri folderUrl, NotifyUsersParams notifyUsersParams)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query(Client);
            sfApiQuery.Action("AccessControls");
            sfApiQuery.Uri(folderUrl);
            sfApiQuery.SubAction("NotifyUsers");
            sfApiQuery.Body = notifyUsersParams;
            sfApiQuery.HttpMethod = "POST";	
            return sfApiQuery;
        }
        
        /// <summary>
        /// Shows preview of the folder user email
        /// </summary>
        /// <param name="folderUrl"></param>
        /// <param name="notifyUsersParams"></param>
        public IQuery<System.IO.Stream> NotifyUsersPreview(Uri folderUrl, NotifyUsersParams notifyUsersParams)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<System.IO.Stream>(Client);
            sfApiQuery.Action("AccessControls");
            sfApiQuery.Uri(folderUrl);
            sfApiQuery.SubAction("NotifyUsersPreview");
            sfApiQuery.Body = notifyUsersParams;
            sfApiQuery.HttpMethod = "POST";	
            return sfApiQuery;
        }
    }
}
