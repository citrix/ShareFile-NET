// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2018 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using ShareFile.Api.Client;
using ShareFile.Api.Client.Extensions;
using ShareFile.Api.Client.Models;
using ShareFile.Api.Client.Requests;


namespace ShareFile.Api.Client.Entities
{
    public interface IWorkflowsEntity : IEntityBase
    {
        
        /// <summary>
        /// Gets workflows initiated by the current user.
        /// </summary>
        /// <remarks>
        /// Restrictions:
        /// * Skip must be a multiple of 25.
        /// * Top must be 25. It's preferred to not supply this.
        /// * Sort is only supported for LastUpdatedDate and Due
        /// </remarks>
        /// <returns>
        /// A feed of Workflow objects
        /// </returns>
        IQuery<ODataFeed<Workflow>> GetInitiated();
        
        /// <summary>
        /// Gets workflows shared with the current user.
        /// </summary>
        /// <remarks>
        /// Restrictions:
        /// * Skip must be a multiple of 25.
        /// * Top must be 25. It's preferred to not supply this.
        /// * Sort is only supported for LastUpdatedDate and Due
        /// </remarks>
        /// <returns>
        /// A feed of Workflow objects
        /// </returns>
        IQuery<ODataFeed<Workflow>> GetShared();
        
        /// <summary>
        /// Get a workflow by id.
        /// </summary>
        /// <param name="url"></param>
        /// <returns>
        /// A Workflow object
        /// </returns>
        IQuery<Workflow> Get(Uri url);
        
        /// <summary>
        /// Get a protocol link to view a workflow in a web browser.
        /// </summary>
        /// <remarks>
        /// Only the latest version of each major browser is supported.
        /// </remarks>
        /// <param name="url"></param>
        /// <returns>
        /// A ItemProtocolLink set for the Workflow
        /// </returns>
        IQuery<ItemProtocolLink> GetLink(Uri url);
        
        /// <summary>
        /// Create an Approval Workflow
        /// </summary>
        /// <example>
        /// {
        /// "Participants":
        /// [
        /// {
        /// "Contact":
        /// {
        /// "Email": "contact@email.com"
        /// },
        /// "Role": "Active"
        /// },
        /// {
        /// "Contact":
        /// {
        /// "Email": "contact.cc@email.com"
        /// },
        /// "Role": "Passive"
        /// }
        /// ]
        /// }
        /// </example>
        /// <param name="url"></param>
        /// <param name="request"></param>
        /// <returns>
        /// A new approval workflow
        /// </returns>
        IQuery<Workflow> CreateApproval(Uri url, CreateWorkflowParams request);
        
        /// <summary>
        /// Create a Feedback Workflow
        /// </summary>
        /// <example>
        /// {
        /// "Participants":
        /// [
        /// {
        /// "Contact":
        /// {
        /// "Email": "contact@email.com"
        /// },
        /// "Role": "Active"
        /// },
        /// {
        /// "Contact":
        /// {
        /// "Email": "contact.cc@email.com"
        /// },
        /// "Role": "Passive"
        /// }
        /// ]
        /// }
        /// </example>
        /// <param name="url"></param>
        /// <param name="request"></param>
        /// <returns>
        /// A new feedback workflow
        /// </returns>
        IQuery<Workflow> CreateFeedback(Uri url, CreateWorkflowParams request);
    }

    public class WorkflowsEntity : EntityBase, IWorkflowsEntity
    {
        public WorkflowsEntity (IShareFileClient client)
            : base (client, "Workflows")
        { }
        
        
        /// <summary>
        /// Gets workflows initiated by the current user.
        /// </summary>
        /// <remarks>
        /// Restrictions:
        /// * Skip must be a multiple of 25.
        /// * Top must be 25. It's preferred to not supply this.
        /// * Sort is only supported for LastUpdatedDate and Due
        /// </remarks>
        /// <returns>
        /// A feed of Workflow objects
        /// </returns>
        public IQuery<ODataFeed<Workflow>> GetInitiated()
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<ODataFeed<Workflow>>(Client);
            sfApiQuery.From("Workflows");
            sfApiQuery.Action("Initiated");
            sfApiQuery.HttpMethod = "GET";	
            return sfApiQuery;
        }
        
        /// <summary>
        /// Gets workflows shared with the current user.
        /// </summary>
        /// <remarks>
        /// Restrictions:
        /// * Skip must be a multiple of 25.
        /// * Top must be 25. It's preferred to not supply this.
        /// * Sort is only supported for LastUpdatedDate and Due
        /// </remarks>
        /// <returns>
        /// A feed of Workflow objects
        /// </returns>
        public IQuery<ODataFeed<Workflow>> GetShared()
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<ODataFeed<Workflow>>(Client);
            sfApiQuery.From("Workflows");
            sfApiQuery.Action("Shared");
            sfApiQuery.HttpMethod = "GET";	
            return sfApiQuery;
        }
        
        /// <summary>
        /// Get a workflow by id.
        /// </summary>
        /// <param name="url"></param>
        /// <returns>
        /// A Workflow object
        /// </returns>
        public IQuery<Workflow> Get(Uri url)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<Workflow>(Client);
            sfApiQuery.Uri(url);
            sfApiQuery.HttpMethod = "GET";	
            return sfApiQuery;
        }
        
        /// <summary>
        /// Get a protocol link to view a workflow in a web browser.
        /// </summary>
        /// <remarks>
        /// Only the latest version of each major browser is supported.
        /// </remarks>
        /// <param name="url"></param>
        /// <returns>
        /// A ItemProtocolLink set for the Workflow
        /// </returns>
        public IQuery<ItemProtocolLink> GetLink(Uri url)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<ItemProtocolLink>(Client);
            sfApiQuery.Action("Link");
            sfApiQuery.Uri(url);
            sfApiQuery.HttpMethod = "GET";	
            return sfApiQuery;
        }
        
        /// <summary>
        /// Create an Approval Workflow
        /// </summary>
        /// <example>
        /// {
        /// "Participants":
        /// [
        /// {
        /// "Contact":
        /// {
        /// "Email": "contact@email.com"
        /// },
        /// "Role": "Active"
        /// },
        /// {
        /// "Contact":
        /// {
        /// "Email": "contact.cc@email.com"
        /// },
        /// "Role": "Passive"
        /// }
        /// ]
        /// }
        /// </example>
        /// <param name="url"></param>
        /// <param name="request"></param>
        /// <returns>
        /// A new approval workflow
        /// </returns>
        public IQuery<Workflow> CreateApproval(Uri url, CreateWorkflowParams request)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<Workflow>(Client);
            sfApiQuery.Action("Workflows");
            sfApiQuery.Uri(url);
            sfApiQuery.SubAction("Approval");
            sfApiQuery.Body = request;
            sfApiQuery.HttpMethod = "POST";	
            return sfApiQuery;
        }
        
        /// <summary>
        /// Create a Feedback Workflow
        /// </summary>
        /// <example>
        /// {
        /// "Participants":
        /// [
        /// {
        /// "Contact":
        /// {
        /// "Email": "contact@email.com"
        /// },
        /// "Role": "Active"
        /// },
        /// {
        /// "Contact":
        /// {
        /// "Email": "contact.cc@email.com"
        /// },
        /// "Role": "Passive"
        /// }
        /// ]
        /// }
        /// </example>
        /// <param name="url"></param>
        /// <param name="request"></param>
        /// <returns>
        /// A new feedback workflow
        /// </returns>
        public IQuery<Workflow> CreateFeedback(Uri url, CreateWorkflowParams request)
        {
            var sfApiQuery = new ShareFile.Api.Client.Requests.Query<Workflow>(Client);
            sfApiQuery.Action("Workflows");
            sfApiQuery.Uri(url);
            sfApiQuery.SubAction("Feedback");
            sfApiQuery.Body = request;
            sfApiQuery.HttpMethod = "POST";	
            return sfApiQuery;
        }
    }
}
